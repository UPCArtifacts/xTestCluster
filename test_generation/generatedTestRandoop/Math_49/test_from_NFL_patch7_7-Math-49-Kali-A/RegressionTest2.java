import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector5.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector31.iterator();
        boolean boolean38 = openMapRealVector31.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector59.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append(openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector31.add(openMapRealVector59);
        double[] doubleArray68 = new double[] { (short) 1, 100.0f, 99, (-1) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector63.append(doubleArray68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector5.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        boolean boolean71 = openMapRealVector70.isInfinite();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 100.0, 99.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        openMapRealVector7.set((double) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (int) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector13.mapAdd((double) '4');
        int int16 = openMapRealVector13.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector30.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.append((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = openMapRealVector26.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        double[] doubleArray36 = openMapRealVector30.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector30);
        boolean boolean38 = openMapRealVector13.equals((java.lang.Object) openMapRealVector37);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = openMapRealVector7.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 0");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (int) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAdd((double) '4');
        openMapRealVector4.set((double) '#');
        double double7 = openMapRealVector4.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor25 = openMapRealVector19.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector19);
        double double27 = openMapRealVector19.getMinValue();
        double[] doubleArray28 = openMapRealVector19.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector4.combineToSelf((double) 97, (double) (-1L), doubleArray28);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 0 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        boolean boolean16 = openMapRealVector9.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        double double31 = openMapRealVector22.dotProduct(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor39 = openMapRealVector37.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector22.append(openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector9.add(openMapRealVector37);
        double[] doubleArray46 = new double[] { (short) 1, 100.0f, 99, (-1) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector41.append(doubleArray46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector41.mapAdd((double) 'a');
        openMapRealVector49.set(300.999999999999d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(entryItor39);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 100.0, 99.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(openMapRealVector49);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector20.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector27.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        int int36 = openMapRealVector31.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector31.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        int int54 = openMapRealVector44.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor55 = openMapRealVector44.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        int int63 = openMapRealVector58.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector58.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor73 = openMapRealVector71.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector44.add((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        double double76 = openMapRealVector65.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector38.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector65.unitVector();
        double double79 = openMapRealVector65.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector83.append((double) 1.0f);
        int int86 = openMapRealVector83.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector81.append(openMapRealVector83);
        double double88 = openMapRealVector65.getL1Distance(openMapRealVector87);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector27.append((org.apache.commons.math.linear.RealVector) openMapRealVector87);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector91 = openMapRealVector87.mapToSelf(univariateRealFunction90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
        org.junit.Assert.assertNotNull(entryItor55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 99 + "'", int63 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(entryItor73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 96 + "'", int86 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 100.0d + "'", double88 == 100.0d);
        org.junit.Assert.assertNotNull(openMapRealVector89);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector20.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector3.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector3.mapSubtractToSelf((double) 99);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector25.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector28.iterator();
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector28.mapDivideToSelf((double) 100L);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector28.mapToSelf(univariateRealFunction32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector20.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector3.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector3.mapAdd(14.142135623730951d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(2, 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector33.append(openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector47.projection((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        double double59 = openMapRealVector50.dotProduct(openMapRealVector54);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor60 = openMapRealVector54.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector43.append((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        double[] doubleArray62 = openMapRealVector43.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix63 = openMapRealVector36.outerProduct(doubleArray62);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor60);
        org.junit.Assert.assertNotNull(openMapRealVector61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix63);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector5.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        int int37 = openMapRealVector27.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor38 = openMapRealVector27.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector41.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector54.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector27.add((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        int int59 = openMapRealVector27.getDimension();
        double double60 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector27.append((double) '4');
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, (double) 10.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector74.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector81 = openMapRealVector79.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = openMapRealVector79.append((double) 0.0f);
        double double84 = openMapRealVector79.getSparsity();
        org.apache.commons.math.linear.RealMatrix realMatrix85 = openMapRealVector74.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector79);
        double[] doubleArray86 = openMapRealVector79.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector27.subtract(doubleArray86);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 99 + "'", int37 == 99);
        org.junit.Assert.assertNotNull(entryItor38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(entryItor56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(openMapRealVector83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector87);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector42.mapDivide((double) 100.0f);
        double[] doubleArray45 = openMapRealVector42.getData();
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector26.combine(201.0d, (double) (byte) 1, doubleArray45);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector26.mapMultiply((double) 100.0f);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor49 = openMapRealVector26.sparseIterator();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(entryItor49);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(197, 97, (double) 'a');
        double double5 = openMapRealVector3.getEntry(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(10, (int) '4');
        double[] doubleArray9 = openMapRealVector8.toArray();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = openMapRealVector3.dotProduct(doubleArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 197 != 10");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        int int9 = openMapRealVector4.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector4.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        double double26 = openMapRealVector17.dotProduct(openMapRealVector21);
        int int27 = openMapRealVector17.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor28 = openMapRealVector17.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        int int36 = openMapRealVector31.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector31.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor46 = openMapRealVector44.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector17.add((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double double49 = openMapRealVector38.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector11.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double[] doubleArray51 = openMapRealVector50.getData();
        double double52 = openMapRealVector1.getDistance(openMapRealVector50);
        int int53 = openMapRealVector50.getMaxIndex();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 99 + "'", int9 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertNotNull(entryItor28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(entryItor46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 99 + "'", int53 == 99);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        boolean boolean24 = openMapRealVector23.isNaN();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor25 = openMapRealVector23.sparseIterator();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(entryItor25);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        double double22 = openMapRealVector13.dotProduct(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.projection((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector28.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector13.append(openMapRealVector28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = openMapRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector2.mapDivideToSelf((double) (byte) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector37.projection((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        double double56 = openMapRealVector47.dotProduct(openMapRealVector51);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor57 = openMapRealVector51.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = openMapRealVector40.append((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector51.mapAdd((double) (byte) 0);
        double double61 = openMapRealVector2.dotProduct(openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector((int) '#', (double) (byte) 0);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray67, (double) (byte) 1);
        double[] doubleArray75 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix76 = openMapRealVector69.outerProduct(doubleArray75);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector64.add(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector2.ebeMultiply(doubleArray75);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 5");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor57);
        org.junit.Assert.assertNotNull(openMapRealVector58);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realVector77);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 0.0d);
        double double14 = openMapRealVector13.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 101.0d + "'", double14 == 101.0d);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector18.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector27.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor31 = openMapRealVector30.iterator();
        double double32 = openMapRealVector1.getDistance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        double double47 = openMapRealVector38.dotProduct(openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor48 = openMapRealVector42.iterator();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51, (double) (byte) 1);
        double[] doubleArray59 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix60 = openMapRealVector53.outerProduct(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector42.add(doubleArray59);
        boolean boolean62 = openMapRealVector30.equals((java.lang.Object) openMapRealVector42);
        double double63 = openMapRealVector42.getNorm();
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray68, (double) (byte) 1);
        double[] doubleArray76 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix77 = openMapRealVector70.outerProduct(doubleArray76);
        openMapRealVector70.set((double) (short) 10);
        int int80 = openMapRealVector70.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector82 = openMapRealVector42.combineToSelf((-0.0d), (double) ' ', (org.apache.commons.math.linear.RealVector) openMapRealVector81);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 2");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(entryItor31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.lang.Double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0, 100.51368066089312d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        boolean boolean16 = openMapRealVector9.isInfinite();
        double[] doubleArray22 = new double[] { 10, (-1.0d), 2, (short) 100, (byte) 10 };
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector9.add(doubleArray22);
        openMapRealVector9.set(100.51368066089312d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 2.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector26.add(realVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector26.copy();
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector72.mapSubtractToSelf((double) 103);
        openMapRealVector72.unitize();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(realVector74);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector20.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector27.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        double double43 = openMapRealVector34.dotProduct(openMapRealVector38);
        int int44 = openMapRealVector34.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean48 = openMapRealVector47.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector34.append((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        double double64 = openMapRealVector55.dotProduct(openMapRealVector59);
        int int65 = openMapRealVector55.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor66 = openMapRealVector55.sparseIterator();
        double double67 = openMapRealVector34.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector70.projection((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        int int75 = openMapRealVector70.getMaxIndex();
        double double76 = openMapRealVector55.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        int int77 = openMapRealVector70.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector70.mapDivide((double) 10.0f);
        double[] doubleArray80 = openMapRealVector70.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray80);
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector81.mapSubtractToSelf((double) 'a');
        org.apache.commons.math.linear.RealVector realVector84 = openMapRealVector27.add(realVector83);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 99 + "'", int65 == 99);
        org.junit.Assert.assertNotNull(entryItor66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 99 + "'", int75 == 99);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 99 + "'", int77 == 99);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(realVector84);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double37 = openMapRealVector5.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        int int45 = openMapRealVector40.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor68 = openMapRealVector66.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector51.append(openMapRealVector66);
        org.apache.commons.math.linear.RealMatrix realMatrix70 = openMapRealVector40.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        double double71 = openMapRealVector5.dotProduct(openMapRealVector66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector74.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        double double86 = openMapRealVector77.dotProduct(openMapRealVector81);
        org.apache.commons.math.linear.RealVector realVector87 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        double double88 = openMapRealVector66.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector66.copy();
        org.apache.commons.math.linear.RealVector realVector91 = openMapRealVector89.mapDivideToSelf((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector89.unitize();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 99 + "'", int45 == 99);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(entryItor68);
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector89);
        org.junit.Assert.assertNotNull(realVector91);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double[] doubleArray25 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector20.setSubVector(99, doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        double double43 = openMapRealVector34.dotProduct(openMapRealVector38);
        int int44 = openMapRealVector34.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean48 = openMapRealVector47.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector34.append((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        double[] doubleArray54 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector49.setSubVector(99, doubleArray54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray54, (double) (-1.0f));
        org.apache.commons.math.linear.RealMatrix realMatrix58 = openMapRealVector28.outerProduct(doubleArray54);
        boolean boolean59 = openMapRealVector28.isNaN();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, 200, Double.NaN);
        int int4 = openMapRealVector3.getMinIndex();
        double double5 = openMapRealVector3.getLInfNorm();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector3.mapToSelf(univariateRealFunction6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(199);
        double double2 = openMapRealVector1.getL1Norm();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        double double47 = openMapRealVector26.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        int int48 = openMapRealVector41.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector41.mapDivide((double) 10.0f);
        double[] doubleArray51 = openMapRealVector41.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector52.unitVector();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (double) (short) 0);
        int int3 = openMapRealVector2.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double18 = openMapRealVector9.dotProduct(openMapRealVector13);
        int int19 = openMapRealVector9.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean23 = openMapRealVector22.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        double double39 = openMapRealVector30.dotProduct(openMapRealVector34);
        int int40 = openMapRealVector30.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector30.sparseIterator();
        double double42 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        int int50 = openMapRealVector45.getMaxIndex();
        double double51 = openMapRealVector30.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        double double73 = openMapRealVector64.dotProduct(openMapRealVector68);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor74 = openMapRealVector68.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector57.append((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        double[] doubleArray76 = openMapRealVector75.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector30.append(doubleArray76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector30.copy();
        double double79 = openMapRealVector2.getDistance(openMapRealVector30);
        double double80 = openMapRealVector2.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector2);
        double double82 = openMapRealVector81.getLInfNorm();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 99 + "'", int50 == 99);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor74);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, 0.01020408163265306d);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor19 = openMapRealVector8.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        int int27 = openMapRealVector22.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector22.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector35.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector8.add((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        int int40 = openMapRealVector8.getDimension();
        double double41 = openMapRealVector8.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector2.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        double double57 = openMapRealVector48.dotProduct(openMapRealVector52);
        int int58 = openMapRealVector48.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean62 = openMapRealVector61.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector48.append((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor67 = openMapRealVector66.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector66.mapDivide(0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector61.append(openMapRealVector66);
        double[] doubleArray71 = openMapRealVector70.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix72 = openMapRealVector2.outerProduct(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector2.unitVector();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertNotNull(entryItor19);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(entryItor67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix72);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double37 = openMapRealVector5.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        int int45 = openMapRealVector40.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor68 = openMapRealVector66.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector51.append(openMapRealVector66);
        org.apache.commons.math.linear.RealMatrix realMatrix70 = openMapRealVector40.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        double double71 = openMapRealVector5.dotProduct(openMapRealVector66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector74.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        double double86 = openMapRealVector77.dotProduct(openMapRealVector81);
        org.apache.commons.math.linear.RealVector realVector87 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        double double88 = openMapRealVector66.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector66.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector66.unitVector();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 99 + "'", int45 == 99);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(entryItor68);
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector89);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector27.sparseIterator();
        openMapRealVector18.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double double31 = openMapRealVector18.getLInfNorm();
        double double32 = openMapRealVector18.getMinValue();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector18.mapDivide((double) 197);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector37.projection((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        int int42 = openMapRealVector37.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector37.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector47.projection((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        double double59 = openMapRealVector50.dotProduct(openMapRealVector54);
        int int60 = openMapRealVector50.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector50.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        int int69 = openMapRealVector64.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector64.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector74.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor79 = openMapRealVector77.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector71.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        org.apache.commons.math.linear.RealVector realVector81 = openMapRealVector50.add((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        double double82 = openMapRealVector71.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = openMapRealVector44.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = openMapRealVector71.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = openMapRealVector84.append((double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = openMapRealVector18.cosine((org.apache.commons.math.linear.RealVector) openMapRealVector86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 99 + "'", int42 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector44);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 99 + "'", int60 == 99);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 99 + "'", int69 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(entryItor79);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector83);
        org.junit.Assert.assertNotNull(openMapRealVector84);
        org.junit.Assert.assertNotNull(openMapRealVector86);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, 0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        double double16 = openMapRealVector14.getMaxValue();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 14.142135623730951d + "'", double16 == 14.142135623730951d);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        double double22 = openMapRealVector13.dotProduct(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.projection((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector28.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector13.append(openMapRealVector28);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector28.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector28.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector35.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector3.append(openMapRealVector36);
        double double38 = openMapRealVector3.getNorm();
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector3.mapDivide((double) 99);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector3.setEntry(103, (double) 1L);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (103)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector26.add(realVector70);
        int int72 = openMapRealVector26.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector26.append((double) 0L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector74);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector75.mapDivide((double) ' ');
        java.lang.Class<?> wildcardClass78 = openMapRealVector75.getClass();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(200, (int) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor6 = openMapRealVector5.sparseIterator();
        double double8 = openMapRealVector5.getEntry((int) (byte) 0);
        double double9 = openMapRealVector5.getL1Norm();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = openMapRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 200 != 97");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(entryItor6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        int int5 = openMapRealVector4.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector4.mapSubtract((double) 10.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        double double22 = openMapRealVector13.dotProduct(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.projection((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector28.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector13.append(openMapRealVector28);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector28.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        int int41 = openMapRealVector36.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector36.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector46.projection((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        double double58 = openMapRealVector49.dotProduct(openMapRealVector53);
        int int59 = openMapRealVector49.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor60 = openMapRealVector49.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        int int68 = openMapRealVector63.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector63.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor78 = openMapRealVector76.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector70.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector49.add((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        double double81 = openMapRealVector70.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector43.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        openMapRealVector70.setEntry((int) 'a', (double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = openMapRealVector28.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector4.append((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector87);
        org.apache.commons.math.linear.RealVector realVector90 = openMapRealVector87.mapSubtract((double) 'a');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 99 + "'", int41 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 99 + "'", int59 == 99);
        org.junit.Assert.assertNotNull(entryItor60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 99 + "'", int68 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(entryItor78);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector82);
        org.junit.Assert.assertNotNull(openMapRealVector86);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertNotNull(realVector90);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector23.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector23.mapDivide(0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append(openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector27.append((double) '4');
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.append((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = openMapRealVector9.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        double[] doubleArray19 = openMapRealVector13.getData();
        org.apache.commons.math.linear.RealVector realVector21 = null;
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector13.setSubVector((int) (short) 100, realVector21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (100)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(99, 0.0d);
        int int3 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector8.projection((org.apache.commons.math.linear.RealVector) openMapRealVector11);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector15.projection((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double double20 = openMapRealVector11.dotProduct(openMapRealVector15);
        int int21 = openMapRealVector11.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        int int37 = openMapRealVector27.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor38 = openMapRealVector27.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector41.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector54.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector27.add((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        double double59 = openMapRealVector48.getSparsity();
        double double60 = openMapRealVector48.getMaxValue();
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector11.add((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double[] doubleArray69 = openMapRealVector67.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector11.ebeDivide(doubleArray69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector5.append(doubleArray69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 98 + "'", int3 == 98);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 99 + "'", int21 == 99);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 99 + "'", int37 == 99);
        org.junit.Assert.assertNotNull(entryItor38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(entryItor56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1.0d) + "'", double60 == (-1.0d));
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(openMapRealVector73);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        boolean boolean64 = openMapRealVector63.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector67.projection((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector74.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        double double79 = openMapRealVector70.dotProduct(openMapRealVector74);
        int int80 = openMapRealVector70.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean84 = openMapRealVector83.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector70.append((org.apache.commons.math.linear.RealVector) openMapRealVector83);
        double[] doubleArray90 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector85.setSubVector(99, doubleArray90);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector93 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray90, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector94 = openMapRealVector63.append(doubleArray90);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector96 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray90, (double) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = openMapRealVector96.getEntry(200);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (200)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 99 + "'", int80 == 99);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector94);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double[] doubleArray25 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector20.setSubVector(99, doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25, (double) 'a');
        int int29 = openMapRealVector28.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        int int45 = openMapRealVector35.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean49 = openMapRealVector48.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector35.append((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        double double65 = openMapRealVector56.dotProduct(openMapRealVector60);
        int int66 = openMapRealVector56.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor67 = openMapRealVector56.sparseIterator();
        double double68 = openMapRealVector35.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector56.mapMultiply((double) 100);
        double[] doubleArray71 = openMapRealVector56.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector28.append(doubleArray71);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray71, (double) (short) 1);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector74.mapDivideToSelf(320.0d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 99 + "'", int45 == 99);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 99 + "'", int66 == 99);
        org.junit.Assert.assertNotNull(entryItor67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(realVector76);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        double double26 = openMapRealVector16.getNorm();
        double double27 = openMapRealVector16.getLInfNorm();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32);
        int int36 = openMapRealVector35.getMinIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector16.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 4");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18, (double) 197);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector12.combine((double) 4, 0.07071067811865475d, (org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector28);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector5.mapAdd((double) (short) 1);
        boolean boolean17 = openMapRealVector16.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector16.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector22.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.append((double) 0.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector33);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector22.add((org.apache.commons.math.linear.RealVector) openMapRealVector33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray31);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        boolean boolean36 = openMapRealVector32.isInfinite();
        double[] doubleArray37 = openMapRealVector32.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector16.projection(doubleArray37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector14.append(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector10.setSubVector(2, doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (101)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(openMapRealVector39);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double double29 = openMapRealVector20.dotProduct(openMapRealVector24);
        int int30 = openMapRealVector20.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean34 = openMapRealVector33.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector20.append((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        double double50 = openMapRealVector41.dotProduct(openMapRealVector45);
        int int51 = openMapRealVector41.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor52 = openMapRealVector41.sparseIterator();
        double double53 = openMapRealVector20.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector70.projection((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        double double75 = openMapRealVector66.dotProduct(openMapRealVector70);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor76 = openMapRealVector70.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector59.append((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector41.add(openMapRealVector59);
        double double79 = openMapRealVector5.getL1Distance(openMapRealVector59);
        double double80 = openMapRealVector5.getL1Norm();
        java.lang.Double[] doubleArray85 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray85, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray85, (double) 10L);
        double double90 = openMapRealVector5.getDistance(openMapRealVector89);
        int int91 = openMapRealVector89.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector89);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 99 + "'", int30 == 99);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 99 + "'", int51 == 99);
        org.junit.Assert.assertNotNull(entryItor52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor76);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 14.142135623730951d + "'", double90 == 14.142135623730951d);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double[] doubleArray49 = openMapRealVector48.getData();
        openMapRealVector48.set(99.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector48);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector26.add(realVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector26.copy();
        boolean boolean73 = openMapRealVector72.isNaN();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector3.append((double) 0.0f);
        double double8 = openMapRealVector3.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector3.getSubVector(1, 99);
        int int12 = openMapRealVector11.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (-1.0f));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        double double34 = openMapRealVector25.dotProduct(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector37.projection((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor42 = openMapRealVector40.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector25.append(openMapRealVector40);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector40.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        int int53 = openMapRealVector48.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector48.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector40.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        double double57 = openMapRealVector56.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        double double73 = openMapRealVector64.dotProduct(openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector76.projection((org.apache.commons.math.linear.RealVector) openMapRealVector79);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor81 = openMapRealVector79.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector64.append(openMapRealVector79);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor83 = openMapRealVector64.iterator();
        org.apache.commons.math.linear.RealVector realVector84 = openMapRealVector56.add((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = openMapRealVector56.mapAdd((-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector87 = openMapRealVector11.combine((double) (short) -1, 9807.0d, (org.apache.commons.math.linear.RealVector) openMapRealVector56);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 99 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 98 + "'", int12 == 98);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(entryItor42);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 99 + "'", int53 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(openMapRealVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(entryItor81);
        org.junit.Assert.assertNotNull(openMapRealVector82);
        org.junit.Assert.assertNotNull(entryItor83);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(openMapRealVector86);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double39 = openMapRealVector5.getLInfNorm();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector5.iterator();
        org.apache.commons.math.linear.RealVector realVector41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = openMapRealVector5.getL1Distance(realVector41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor40);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(2, 0);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray7, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray7);
        int int11 = openMapRealVector10.getMinIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) openMapRealVector10);
        openMapRealVector12.set((double) 101);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(openMapRealVector12);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, 0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        int int23 = openMapRealVector18.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector18.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double double40 = openMapRealVector31.dotProduct(openMapRealVector35);
        int int41 = openMapRealVector31.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor42 = openMapRealVector31.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        int int50 = openMapRealVector45.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector45.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor60 = openMapRealVector58.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector31.add((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        double double63 = openMapRealVector52.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector25.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector52.unitVector();
        double double66 = openMapRealVector52.getSparsity();
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector52.mapSubtractToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(99, 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector71.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix73 = openMapRealVector52.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = openMapRealVector14.getLInfDistance((org.apache.commons.math.linear.RealVector) openMapRealVector52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 4 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 99 + "'", int23 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 99 + "'", int41 == 99);
        org.junit.Assert.assertNotNull(entryItor42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 99 + "'", int50 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(entryItor60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector64);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(realMatrix73);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(103, (double) (short) 1);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector7);
        double double10 = openMapRealVector9.getNorm();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.00499987500625d + "'", double10 == 100.00499987500625d);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector23.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector23.mapDivide(0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append(openMapRealVector23);
        double[] doubleArray28 = openMapRealVector27.getData();
        int int29 = openMapRealVector27.getMinIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) -1, (int) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector32.mapAddToSelf((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector27.add(openMapRealVector34);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 197 != -1");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 196 + "'", int29 == 196);
        org.junit.Assert.assertNotNull(openMapRealVector34);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector20.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector3.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector35.append((double) 1.0f);
        int int38 = openMapRealVector35.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector33.append(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        double double54 = openMapRealVector45.dotProduct(openMapRealVector49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor62 = openMapRealVector60.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector45.append(openMapRealVector60);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector60.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector60.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector67.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector35.append(openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector30.append(openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector70.unitVector();
        double[] doubleArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector70.subtract(doubleArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 96 + "'", int38 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(entryItor62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(openMapRealVector67);
        org.junit.Assert.assertNotNull(openMapRealVector68);
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector16.mapAddToSelf((double) (-1.0f));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        double double33 = openMapRealVector24.dotProduct(openMapRealVector28);
        int int34 = openMapRealVector24.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor35 = openMapRealVector24.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        int int43 = openMapRealVector38.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector38.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor53 = openMapRealVector51.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector24.add((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        int int56 = openMapRealVector24.getDimension();
        double double57 = openMapRealVector24.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector67.projection((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        double double72 = openMapRealVector63.dotProduct(openMapRealVector67);
        int int73 = openMapRealVector63.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean77 = openMapRealVector76.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector63.append((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double[] doubleArray83 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector78.setSubVector(99, doubleArray83);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray83, (double) (-1.0f));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector24.append(doubleArray83);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray83, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = openMapRealVector16.getDistance(openMapRealVector89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (3)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(entryItor35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(entryItor53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 99 + "'", int73 == 99);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector87);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAddToSelf((double) (-1.0f));
        double double5 = openMapRealVector4.getLInfNorm();
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        int int22 = openMapRealVector17.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector17.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor32 = openMapRealVector30.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector24.mapMultiply(100.0d);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector9.projection(realVector35);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector9.mapDivide((double) ' ');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        int int54 = openMapRealVector44.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean58 = openMapRealVector57.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector66 = openMapRealVector62.projection((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        double double74 = openMapRealVector65.dotProduct(openMapRealVector69);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor75 = openMapRealVector69.iterator();
        java.lang.Double[] doubleArray78 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray78, (double) (byte) 1);
        double[] doubleArray86 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix87 = openMapRealVector80.outerProduct(doubleArray86);
        org.apache.commons.math.linear.RealVector realVector88 = openMapRealVector69.add(doubleArray86);
        org.apache.commons.math.linear.RealVector realVector89 = openMapRealVector59.add(doubleArray86);
        boolean boolean90 = openMapRealVector59.isInfinite();
        org.apache.commons.math.linear.RealVector realVector92 = openMapRealVector59.mapSubtractToSelf((double) (byte) 100);
        double[] doubleArray93 = openMapRealVector59.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector95 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray93, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector96 = openMapRealVector9.ebeDivide(doubleArray93);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 200");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 99 + "'", int22 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(entryItor32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(openMapRealVector59);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor75);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix87);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(realVector92);
        org.junit.Assert.assertNotNull(doubleArray93);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        openMapRealVector15.set(0.0d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor21 = openMapRealVector15.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        int int39 = openMapRealVector29.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector29.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        int int48 = openMapRealVector43.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector43.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor58 = openMapRealVector56.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector29.add((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector15.combineToSelf((double) 2, (double) '#', (org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double63 = openMapRealVector15.getSparsity();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(entryItor21);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(entryItor58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 10.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, Double.NaN);
        java.lang.Class<?> wildcardClass14 = openMapRealVector13.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector5.mapAdd((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        double double41 = openMapRealVector32.dotProduct(openMapRealVector36);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor42 = openMapRealVector36.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector25.append((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector36.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector45.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean49 = openMapRealVector48.isNaN();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = openMapRealVector19.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        boolean boolean51 = openMapRealVector19.isInfinite();
        openMapRealVector16.setSubVector((int) (byte) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(99);
        double[] doubleArray55 = openMapRealVector54.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector16.append(doubleArray55);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor42);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector56);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (double) (short) 1);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (short) 0, (double) 0L);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (int) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAdd((double) '4');
        openMapRealVector4.set((double) '#');
        double double7 = openMapRealVector4.getL1Norm();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor8 = openMapRealVector4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector4.unitVector();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor8);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        boolean boolean16 = openMapRealVector9.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        double double31 = openMapRealVector22.dotProduct(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor39 = openMapRealVector37.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector22.append(openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector9.add(openMapRealVector37);
        double[] doubleArray46 = new double[] { (short) 1, 100.0f, 99, (-1) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector41.append(doubleArray46);
        openMapRealVector47.set((double) 0.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        double double64 = openMapRealVector55.dotProduct(openMapRealVector59);
        int int65 = openMapRealVector55.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean69 = openMapRealVector68.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector55.append((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector47.append(openMapRealVector55);
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray74, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector71.subtract(openMapRealVector77);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 204 != 2");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(entryItor39);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 100.0, 99.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 99 + "'", int65 == 99);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(99, (double) '#');
        openMapRealVector2.set((double) 1L);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.mapMultiply(1320.0d);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        boolean boolean16 = openMapRealVector9.isInfinite();
        double[] doubleArray22 = new double[] { 10, (-1.0d), 2, (short) 100, (byte) 10 };
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector9.add(doubleArray22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector27.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector27.append((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = openMapRealVector9.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        double double33 = openMapRealVector9.getLInfNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double35 = openMapRealVector9.getDistance(openMapRealVector34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 2.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        double double47 = openMapRealVector26.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        int int48 = openMapRealVector41.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector41.mapDivide((double) 10.0f);
        double[] doubleArray51 = openMapRealVector41.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector41.append((double) (short) 10);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector53);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor3 = openMapRealVector2.sparseIterator();
        double double5 = openMapRealVector2.getEntry((int) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector2.mapAdd((double) 196);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (double) (short) 0);
        int int11 = openMapRealVector10.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        double double26 = openMapRealVector17.dotProduct(openMapRealVector21);
        int int27 = openMapRealVector17.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean31 = openMapRealVector30.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector17.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        double double47 = openMapRealVector38.dotProduct(openMapRealVector42);
        int int48 = openMapRealVector38.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor49 = openMapRealVector38.sparseIterator();
        double double50 = openMapRealVector17.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        int int58 = openMapRealVector53.getMaxIndex();
        double double59 = openMapRealVector38.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector66 = openMapRealVector62.projection((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector76.projection((org.apache.commons.math.linear.RealVector) openMapRealVector79);
        double double81 = openMapRealVector72.dotProduct(openMapRealVector76);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor82 = openMapRealVector76.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = openMapRealVector65.append((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double[] doubleArray84 = openMapRealVector83.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector38.append(doubleArray84);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = openMapRealVector38.copy();
        double double87 = openMapRealVector10.getDistance(openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector38.mapAdd((double) '4');
        org.apache.commons.math.linear.RealVector realVector91 = openMapRealVector89.mapSubtract((double) 197);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = openMapRealVector7.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 97 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(entryItor3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(entryItor49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor82);
        org.junit.Assert.assertNotNull(openMapRealVector83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertNotNull(openMapRealVector86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector89);
        org.junit.Assert.assertNotNull(realVector91);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor19 = openMapRealVector8.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        int int27 = openMapRealVector22.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector22.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector35.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector8.add((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        int int40 = openMapRealVector8.getDimension();
        double double41 = openMapRealVector8.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector2.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        int int43 = openMapRealVector8.getMaxIndex();
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertNotNull(entryItor19);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(99, 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        double double4 = openMapRealVector2.getNorm();
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor36 = openMapRealVector30.iterator();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray39, (double) (byte) 1);
        double[] doubleArray47 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix48 = openMapRealVector41.outerProduct(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector30.add(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector20.add(doubleArray47);
        boolean boolean51 = openMapRealVector20.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        double double66 = openMapRealVector57.dotProduct(openMapRealVector61);
        int int67 = openMapRealVector57.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean71 = openMapRealVector70.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector57.append((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector57.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector20.append(openMapRealVector73);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector74.mapMultiply((double) (-1.0f));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector74);
        int int78 = openMapRealVector74.getDimension();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 99 + "'", int67 == 99);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 300 + "'", int78 == 300);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector26.mapMultiply((double) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector26.mapAddToSelf((double) 200);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        double double57 = openMapRealVector48.dotProduct(openMapRealVector52);
        int int58 = openMapRealVector48.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean62 = openMapRealVector61.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector48.append((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        int int79 = openMapRealVector69.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor80 = openMapRealVector69.sparseIterator();
        double double81 = openMapRealVector48.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector69.mapMultiply((double) 100);
        double[] doubleArray84 = openMapRealVector69.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector42.ebeDivide(doubleArray84);
        double double86 = openMapRealVector42.getNorm();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 99 + "'", int79 == 99);
        org.junit.Assert.assertNotNull(entryItor80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2000.0d + "'", double86 == 2000.0d);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        double double47 = openMapRealVector26.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double double69 = openMapRealVector60.dotProduct(openMapRealVector64);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor70 = openMapRealVector64.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector53.append((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        double[] doubleArray72 = openMapRealVector71.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector26.append(doubleArray72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector26.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = openMapRealVector74.mapAdd((double) 2);
        double[] doubleArray77 = openMapRealVector74.toArray();
        int int78 = openMapRealVector74.getMinIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor79 = openMapRealVector74.sparseIterator();
        double double81 = openMapRealVector74.getEntry(0);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(openMapRealVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 99 + "'", int78 == 99);
        org.junit.Assert.assertNotNull(entryItor79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor3 = openMapRealVector2.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        int int11 = openMapRealVector6.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector6.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double28 = openMapRealVector19.dotProduct(openMapRealVector23);
        int int29 = openMapRealVector19.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector19.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        int int38 = openMapRealVector33.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector33.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor48 = openMapRealVector46.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector19.add((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        double double51 = openMapRealVector40.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector13.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        openMapRealVector40.setEntry((int) 'a', (double) (byte) -1);
        double double57 = openMapRealVector40.getEntry((int) (byte) 10);
        double[] doubleArray58 = openMapRealVector40.toArray();
        // The following exception was thrown during execution in test generation
        try {
            double double59 = openMapRealVector2.getLInfDistance(doubleArray58);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 97 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(entryItor3);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 99 + "'", int29 == 99);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 99 + "'", int38 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(entryItor48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor36 = openMapRealVector30.iterator();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray39, (double) (byte) 1);
        double[] doubleArray47 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix48 = openMapRealVector41.outerProduct(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector30.add(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector20.add(doubleArray47);
        boolean boolean51 = openMapRealVector20.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        double double66 = openMapRealVector57.dotProduct(openMapRealVector61);
        int int67 = openMapRealVector57.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean71 = openMapRealVector70.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector57.append((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector57.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector20.append(openMapRealVector73);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector74.mapMultiply((double) (-1.0f));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector74);
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector77.mapSubtractToSelf((double) 0);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 99 + "'", int67 == 99);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(realVector79);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean3 = openMapRealVector2.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        double double6 = openMapRealVector2.getEntry((int) 'a');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        int int37 = openMapRealVector5.getDimension();
        double double38 = openMapRealVector5.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        int int54 = openMapRealVector44.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean58 = openMapRealVector57.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        double[] doubleArray64 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector59.setSubVector(99, doubleArray64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray64, (double) (-1.0f));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector5.append(doubleArray64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 1);
        boolean boolean75 = openMapRealVector74.isNaN();
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector74.mapDivideToSelf((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector69.combineToSelf((double) 1L, 0.01020408163265306d, (org.apache.commons.math.linear.RealVector) openMapRealVector74);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 0");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(openMapRealVector59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector68);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(realVector77);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector10.mapToSelf(univariateRealFunction11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(96, (double) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean22 = openMapRealVector21.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector8.append((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        int int39 = openMapRealVector29.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector29.sparseIterator();
        double double41 = openMapRealVector8.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        double double63 = openMapRealVector54.dotProduct(openMapRealVector58);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor64 = openMapRealVector58.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector47.append((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector29.add(openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector76.projection((org.apache.commons.math.linear.RealVector) openMapRealVector79);
        double double81 = openMapRealVector72.dotProduct(openMapRealVector76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector88 = openMapRealVector84.projection((org.apache.commons.math.linear.RealVector) openMapRealVector87);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor89 = openMapRealVector87.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector72.append(openMapRealVector87);
        double double91 = openMapRealVector47.getL1Distance(openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = openMapRealVector72.copy();
        double[] doubleArray93 = openMapRealVector92.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix94 = openMapRealVector2.outerProduct(doubleArray93);
        openMapRealVector2.set((double) (-1));
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor64);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(entryItor89);
        org.junit.Assert.assertNotNull(openMapRealVector90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix94);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, 197);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor7 = openMapRealVector5.sparseIterator();
        double double8 = openMapRealVector5.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector5.projection(realVector9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(entryItor7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        openMapRealVector36.setEntry((int) 'a', (double) (byte) -1);
        double double53 = openMapRealVector36.getEntry((int) (byte) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector36.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double[] doubleArray62 = openMapRealVector60.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray62);
        double double64 = openMapRealVector54.getLInfDistance(doubleArray62);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector54.append((double) (byte) 100);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(openMapRealVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.1d + "'", double64 == 0.1d);
        org.junit.Assert.assertNotNull(openMapRealVector66);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector4.mapAdd((-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.append((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector8.combineToSelf((double) 196, (double) 0.0f, (org.apache.commons.math.linear.RealVector) openMapRealVector27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 2 != 101");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector27);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector20.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector3.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        double double32 = openMapRealVector3.getSparsity();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor33 = openMapRealVector3.sparseIterator();
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor33);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        openMapRealVector15.set(0.0d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor21 = openMapRealVector15.iterator();
        double double22 = openMapRealVector15.getMaxValue();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(entryItor21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector20.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector27.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        int int36 = openMapRealVector31.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector31.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        int int54 = openMapRealVector44.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor55 = openMapRealVector44.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        int int63 = openMapRealVector58.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector58.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor73 = openMapRealVector71.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector44.add((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        double double76 = openMapRealVector65.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector38.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        double[] doubleArray78 = openMapRealVector77.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray78);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector27.add(doubleArray78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray78);
        double double82 = openMapRealVector81.getNorm();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
        org.junit.Assert.assertNotNull(entryItor55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 99 + "'", int63 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(entryItor73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 10.0d + "'", double82 == 10.0d);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector84.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector69.append(openMapRealVector84);
        double double88 = openMapRealVector44.getL1Distance(openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector69.copy();
        double[] doubleArray90 = openMapRealVector89.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray90);
        java.lang.Class<?> wildcardClass92 = openMapRealVector91.getClass();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(entryItor86);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector25.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector25.mapAdd(99.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double30 = openMapRealVector28.getL1Distance(openMapRealVector29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector28);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        int int8 = openMapRealVector7.getMinIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        int int24 = openMapRealVector14.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean28 = openMapRealVector27.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector14.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        int int45 = openMapRealVector35.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor46 = openMapRealVector35.sparseIterator();
        double double47 = openMapRealVector14.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        int int55 = openMapRealVector50.getMaxIndex();
        double double56 = openMapRealVector35.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor79 = openMapRealVector73.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = openMapRealVector62.append((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        double[] doubleArray81 = openMapRealVector80.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector35.append(doubleArray81);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = openMapRealVector35.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector83.mapAdd((double) 2);
        double[] doubleArray86 = openMapRealVector83.toArray();
        org.apache.commons.math.linear.RealVector realVector87 = openMapRealVector7.add(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 99 + "'", int45 == 99);
        org.junit.Assert.assertNotNull(entryItor46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 99 + "'", int55 == 99);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor79);
        org.junit.Assert.assertNotNull(openMapRealVector80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector82);
        org.junit.Assert.assertNotNull(openMapRealVector83);
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector87);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector26.add(realVector70);
        int int72 = openMapRealVector26.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector26.append((double) 0L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector74);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray79, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray79, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray79, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray79, (double) 10.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = openMapRealVector87.unitVector();
        double double89 = openMapRealVector87.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector87.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double91 = openMapRealVector74.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 101 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(openMapRealVector88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 100.0d + "'", double89 == 100.0d);
        org.junit.Assert.assertNotNull(openMapRealVector90);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        double double16 = openMapRealVector7.dotProduct(openMapRealVector11);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector11.iterator();
        boolean boolean18 = openMapRealVector11.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        double double33 = openMapRealVector24.dotProduct(openMapRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector39.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector24.append(openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector11.add(openMapRealVector39);
        double[] doubleArray48 = new double[] { (short) 1, 100.0f, 99, (-1) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector43.append(doubleArray48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48, (double) 96);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector1.append(doubleArray48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (-1)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0, 99.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector49);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector20.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector3.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector35.append((double) 1.0f);
        int int38 = openMapRealVector35.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector33.append(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        double double54 = openMapRealVector45.dotProduct(openMapRealVector49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor62 = openMapRealVector60.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector45.append(openMapRealVector60);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector60.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector60.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector67.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector35.append(openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector30.append(openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector70.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 96 + "'", int38 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(entryItor62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(openMapRealVector67);
        org.junit.Assert.assertNotNull(openMapRealVector68);
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(99, 0);
        double double4 = openMapRealVector2.getEntry(1);
        double double5 = openMapRealVector2.getNorm();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        boolean boolean16 = openMapRealVector9.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor20 = openMapRealVector19.sparseIterator();
        double double22 = openMapRealVector19.getEntry((int) (byte) 0);
        double double23 = openMapRealVector19.getL1Norm();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector37.projection((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        double double49 = openMapRealVector40.dotProduct(openMapRealVector44);
        int int50 = openMapRealVector40.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean54 = openMapRealVector53.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector40.append((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        double[] doubleArray60 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector55.setSubVector(99, doubleArray60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray60, (double) 'a');
        double double64 = openMapRealVector63.getNorm();
        double[] doubleArray65 = openMapRealVector63.getData();
        org.apache.commons.math.linear.RealVector realVector66 = openMapRealVector32.combineToSelf((double) 1, (double) 10.0f, doubleArray65);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = openMapRealVector19.outerProduct(doubleArray65);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = openMapRealVector9.outerProduct(doubleArray65);
        java.lang.Class<?> wildcardClass69 = realMatrix68.getClass();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(entryItor20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 99 + "'", int50 == 99);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        double double22 = openMapRealVector13.dotProduct(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.projection((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector28.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector13.append(openMapRealVector28);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector28.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector28.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector35.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector3.append(openMapRealVector36);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.getSubVector((int) (short) 100, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (100)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(openMapRealVector37);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(1, (int) (byte) 1);
        openMapRealVector26.setSubVector((int) (byte) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector66 = openMapRealVector62.projection((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        double double67 = openMapRealVector58.dotProduct(openMapRealVector62);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor68 = openMapRealVector62.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector51.append((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector62.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector71.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean75 = openMapRealVector74.isNaN();
        org.apache.commons.math.linear.RealMatrix realMatrix76 = openMapRealVector45.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector74);
        openMapRealVector45.set((double) 100);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector45.mapMultiply((double) 100L);
        org.apache.commons.math.linear.RealVector realVector81 = openMapRealVector26.combine((double) (short) 1, (double) (short) 10, realVector80);
        int int82 = openMapRealVector26.getDimension();
        org.apache.commons.math.linear.RealVector realVector84 = openMapRealVector26.mapDivide((double) 1.0f);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor68);
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertNotNull(realVector84);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(2, (int) 'a');
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double double29 = openMapRealVector20.dotProduct(openMapRealVector24);
        int int30 = openMapRealVector20.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean34 = openMapRealVector33.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector20.append((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        double double50 = openMapRealVector41.dotProduct(openMapRealVector45);
        int int51 = openMapRealVector41.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor52 = openMapRealVector41.sparseIterator();
        double double53 = openMapRealVector20.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector70.projection((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        double double75 = openMapRealVector66.dotProduct(openMapRealVector70);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor76 = openMapRealVector70.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector59.append((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector41.add(openMapRealVector59);
        double double79 = openMapRealVector5.getL1Distance(openMapRealVector59);
        double double80 = openMapRealVector5.getL1Norm();
        int int81 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector82.getSubVector((int) (short) 1, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector92 = openMapRealVector88.projection((org.apache.commons.math.linear.RealVector) openMapRealVector91);
        double[] doubleArray93 = openMapRealVector91.toArray();
        // The following exception was thrown during execution in test generation
        try {
            double double94 = openMapRealVector85.getLInfDistance(doubleArray93);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 10 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 99 + "'", int30 == 99);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 99 + "'", int51 == 99);
        org.junit.Assert.assertNotNull(entryItor52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor76);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 99 + "'", int81 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertNotNull(realVector92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.mapMultiply(100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector9.append(openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector9.copy();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector29);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) '#');
        double[] doubleArray2 = openMapRealVector1.getData();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray5, (double) (byte) 1);
        double[] doubleArray13 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix14 = openMapRealVector7.outerProduct(doubleArray13);
        openMapRealVector7.set((double) (short) 10);
        int int17 = openMapRealVector7.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector7);
        boolean boolean19 = openMapRealVector7.isInfinite();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector7.mapMultiplyToSelf((double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = openMapRealVector1.cosine((org.apache.commons.math.linear.RealVector) openMapRealVector7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(103, (double) 0);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector9.mapAddToSelf((double) ' ');
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector9.mapDivide((double) 0.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector9.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor43 = openMapRealVector41.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector26.append(openMapRealVector41);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector41.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        int int54 = openMapRealVector49.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector49.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector41.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector41.mapMultiplyToSelf((double) (byte) -1);
        double[] doubleArray60 = openMapRealVector41.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector9.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector9.mapDivideToSelf(0.01020408163265306d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(entryItor43);
        org.junit.Assert.assertNotNull(openMapRealVector44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector56);
        org.junit.Assert.assertNotNull(openMapRealVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector61);
        org.junit.Assert.assertNotNull(realVector63);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector1.append((double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.mapAddToSelf((double) 0L);
        double double7 = openMapRealVector5.getEntry((int) (byte) 1);
        int int8 = openMapRealVector5.getMaxIndex();
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector25.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector28.iterator();
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector28.mapSubtractToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector28.mapAdd((double) 100L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        double double48 = openMapRealVector39.dotProduct(openMapRealVector43);
        int int49 = openMapRealVector39.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor50 = openMapRealVector39.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        int int58 = openMapRealVector53.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector53.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor68 = openMapRealVector66.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector39.add((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double71 = openMapRealVector39.getL1Norm();
        double[] doubleArray72 = openMapRealVector39.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector33.append(openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 99 + "'", int49 == 99);
        org.junit.Assert.assertNotNull(entryItor50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(entryItor68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector73);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector25.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean29 = openMapRealVector28.isNaN();
        double double30 = openMapRealVector28.getL1Norm();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector7.mapAddToSelf((double) (-1L));
        int int10 = openMapRealVector9.getDimension();
        openMapRealVector9.unitize();
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 197 + "'", int10 == 197);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (-1L));
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector20.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector27.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        int int36 = openMapRealVector31.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector31.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        int int54 = openMapRealVector44.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor55 = openMapRealVector44.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        int int63 = openMapRealVector58.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector58.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor73 = openMapRealVector71.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector44.add((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        double double76 = openMapRealVector65.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector38.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector65.unitVector();
        double double79 = openMapRealVector65.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector83.append((double) 1.0f);
        int int86 = openMapRealVector83.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector81.append(openMapRealVector83);
        double double88 = openMapRealVector65.getL1Distance(openMapRealVector87);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector27.append((org.apache.commons.math.linear.RealVector) openMapRealVector87);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector27.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = openMapRealVector27.append(0.1d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
        org.junit.Assert.assertNotNull(entryItor55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 99 + "'", int63 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(entryItor73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 96 + "'", int86 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 100.0d + "'", double88 == 100.0d);
        org.junit.Assert.assertNotNull(openMapRealVector89);
        org.junit.Assert.assertNotNull(openMapRealVector90);
        org.junit.Assert.assertNotNull(openMapRealVector92);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 201.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, (int) ' ', 1.0E-12d);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector5.mapAdd((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        double double31 = openMapRealVector22.dotProduct(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector22.mapAdd((double) (short) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector22.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector38.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.append((double) 0.0f);
        double double43 = openMapRealVector38.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector38.getSubVector(1, 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector22.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double62 = openMapRealVector53.dotProduct(openMapRealVector57);
        int int63 = openMapRealVector53.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean67 = openMapRealVector66.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector53.append((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        double[] doubleArray73 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector68.setSubVector(99, doubleArray73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray73, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector38.append(doubleArray73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector16.append(doubleArray73);
        openMapRealVector78.set((double) '4');
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 99 + "'", int63 == 99);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(openMapRealVector68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector26.add(realVector70);
        int int72 = openMapRealVector26.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector26.mapAdd((double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(200, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = openMapRealVector74.getDistance(openMapRealVector77);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(openMapRealVector74);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor10 = openMapRealVector2.sparseIterator();
        double double11 = openMapRealVector2.getLInfNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(96, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = openMapRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 96");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(entryItor10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, (double) (byte) 1);
        double[] doubleArray74 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix75 = openMapRealVector68.outerProduct(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector26.add(doubleArray74);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector79.projection((org.apache.commons.math.linear.RealVector) openMapRealVector82);
        double double84 = openMapRealVector82.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector26.add(openMapRealVector82);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector85);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector5.mapAdd((double) (short) 1);
        org.apache.commons.math.linear.RealVector realVector17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector16.add(realVector17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, 100);
        boolean boolean3 = openMapRealVector2.isInfinite();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapSubtract((double) 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector27.sparseIterator();
        openMapRealVector18.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector18.mapSubtractToSelf(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector18.mapMultiply((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector18.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector18.copy();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(openMapRealVector37);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(196, (double) 98);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.map(univariateRealFunction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 10.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector11.mapSubtractToSelf((double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor39 = openMapRealVector33.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector22.append((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector33.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector42.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean46 = openMapRealVector45.isNaN();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = openMapRealVector16.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double49 = openMapRealVector11.getL1Distance(openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        double double73 = openMapRealVector64.dotProduct(openMapRealVector68);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor74 = openMapRealVector68.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector57.append((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector68.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = openMapRealVector77.mapAddToSelf((double) 'a');
        double double80 = openMapRealVector79.getL1Norm();
        double[] doubleArray81 = openMapRealVector79.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector82 = openMapRealVector11.combine((double) 97, 0.0d, doubleArray81);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 101");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor39);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 101.0d + "'", double49 == 101.0d);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor74);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 9807.0d + "'", double80 == 9807.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 107.0]");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor39 = openMapRealVector33.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector22.append((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector33.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector42.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean46 = openMapRealVector45.isNaN();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = openMapRealVector16.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        boolean boolean48 = openMapRealVector16.isInfinite();
        double double49 = openMapRealVector9.getL1Distance(openMapRealVector16);
        java.lang.Class<?> wildcardClass50 = openMapRealVector9.getClass();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor39);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        double double4 = openMapRealVector3.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector7.projection((org.apache.commons.math.linear.RealVector) openMapRealVector10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor12 = openMapRealVector10.sparseIterator();
        boolean boolean13 = openMapRealVector10.isNaN();
        double[] doubleArray14 = openMapRealVector10.toArray();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector3.add(doubleArray14);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(entryItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector27.sparseIterator();
        openMapRealVector18.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector18.mapSubtractToSelf(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector18.mapMultiply((double) (-1L));
        boolean boolean35 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector18.append((double) (-1.0f));
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(openMapRealVector37);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector18.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector28.append((double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        double double45 = openMapRealVector36.dotProduct(openMapRealVector40);
        int int46 = openMapRealVector36.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean50 = openMapRealVector49.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector36.append((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        double[] doubleArray56 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector51.setSubVector(99, doubleArray56);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = openMapRealVector28.outerProduct(doubleArray56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = openMapRealVector1.getLInfDistance((org.apache.commons.math.linear.RealVector) openMapRealVector59);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: -1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(openMapRealVector51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(realMatrix58);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector31.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector20.append((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        int int54 = openMapRealVector44.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor55 = openMapRealVector44.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        int int63 = openMapRealVector58.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector58.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor73 = openMapRealVector71.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector44.add((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        double double76 = openMapRealVector65.getSparsity();
        double double77 = openMapRealVector20.dotProduct(openMapRealVector65);
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector65.mapMultiplyToSelf((double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector65.append((double) (byte) 100);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor82 = openMapRealVector65.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector84 = openMapRealVector65.mapDivideToSelf(0.01020408163265306d);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector5.projection(realVector84);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
        org.junit.Assert.assertNotNull(entryItor55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 99 + "'", int63 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(entryItor73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(openMapRealVector81);
        org.junit.Assert.assertNotNull(entryItor82);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector85);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(10, (int) '4');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean22 = openMapRealVector21.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector8.append((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        double[] doubleArray31 = openMapRealVector29.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = openMapRealVector23.outerProduct(doubleArray31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector2.append(doubleArray31);
        int int34 = openMapRealVector2.getDimension();
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor3 = openMapRealVector2.sparseIterator();
        double double5 = openMapRealVector2.getEntry((int) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        int int15 = openMapRealVector10.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector10.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor25 = openMapRealVector23.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        boolean boolean27 = openMapRealVector23.isInfinite();
        double[] doubleArray28 = openMapRealVector23.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector7.projection(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector2.subtract(doubleArray28);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 97 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(entryItor3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(entryItor25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector29);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double[] doubleArray25 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector20.setSubVector(99, doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0, 0.009900990099009901d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector1.append((double) 1.0f);
        int int4 = openMapRealVector1.getMaxIndex();
        boolean boolean5 = openMapRealVector1.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector8.projection((org.apache.commons.math.linear.RealVector) openMapRealVector11);
        double[] doubleArray13 = openMapRealVector11.toArray();
        double[] doubleArray14 = openMapRealVector11.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector1.ebeMultiply(doubleArray14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 97 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 96 + "'", int4 == 96);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector1.append((double) 1.0f);
        double double4 = openMapRealVector3.getLInfNorm();
        double double5 = openMapRealVector3.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector11.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.append((double) 0.0f);
        double double16 = openMapRealVector11.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector11.getSubVector(1, 99);
        int int20 = openMapRealVector19.getMaxIndex();
        double[] doubleArray21 = openMapRealVector19.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector3.combine((double) 1L, 2000.0d, doubleArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 98 != 99");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.01020408163265306d + "'", double5 == 0.01020408163265306d);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 98 + "'", int20 == 98);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        boolean boolean19 = openMapRealVector15.isInfinite();
        double[] doubleArray20 = openMapRealVector15.getData();
        double double21 = openMapRealVector15.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        int int37 = openMapRealVector27.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean41 = openMapRealVector40.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector27.append((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        double double57 = openMapRealVector48.dotProduct(openMapRealVector52);
        int int58 = openMapRealVector48.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor59 = openMapRealVector48.sparseIterator();
        double double60 = openMapRealVector27.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        int int68 = openMapRealVector63.getMaxIndex();
        double double69 = openMapRealVector48.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        int int70 = openMapRealVector63.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector63.mapDivide((double) 10.0f);
        double[] doubleArray73 = openMapRealVector63.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector15.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        openMapRealVector74.setEntry((int) '4', (double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector81.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector81.append((double) 0.0f);
        double double86 = openMapRealVector81.getSparsity();
        int int87 = openMapRealVector81.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = openMapRealVector74.add(openMapRealVector81);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 99 + "'", int37 == 99);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertNotNull(entryItor59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 99 + "'", int68 == 99);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 99 + "'", int70 == 99);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertNotNull(openMapRealVector88);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean22 = openMapRealVector21.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector8.append((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        int int39 = openMapRealVector29.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector29.sparseIterator();
        double double41 = openMapRealVector8.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        double double63 = openMapRealVector54.dotProduct(openMapRealVector58);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor64 = openMapRealVector58.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector47.append((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector29.add(openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector76.projection((org.apache.commons.math.linear.RealVector) openMapRealVector79);
        double double81 = openMapRealVector72.dotProduct(openMapRealVector76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector88 = openMapRealVector84.projection((org.apache.commons.math.linear.RealVector) openMapRealVector87);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor89 = openMapRealVector87.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector72.append(openMapRealVector87);
        double double91 = openMapRealVector47.getL1Distance(openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = openMapRealVector72.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector93 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        java.lang.Class<?> wildcardClass94 = openMapRealVector93.getClass();
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor64);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(entryItor89);
        org.junit.Assert.assertNotNull(openMapRealVector90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector92);
        org.junit.Assert.assertNotNull(openMapRealVector93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(200, (int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAddToSelf(14.177446878757825d);
        org.junit.Assert.assertNotNull(openMapRealVector4);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double[] doubleArray24 = openMapRealVector23.getData();
        int int25 = openMapRealVector23.getMinIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        int int35 = openMapRealVector30.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector30.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector47.projection((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        double double52 = openMapRealVector43.dotProduct(openMapRealVector47);
        int int53 = openMapRealVector43.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor54 = openMapRealVector43.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        int int62 = openMapRealVector57.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector57.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector67.projection((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor72 = openMapRealVector70.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector43.add((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        double double75 = openMapRealVector64.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = openMapRealVector37.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector64.unitVector();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector23.combineToSelf((double) (short) 0, 301.0d, (org.apache.commons.math.linear.RealVector) openMapRealVector77);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 200 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 199 + "'", int25 == 199);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 99 + "'", int35 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 99 + "'", int53 == 99);
        org.junit.Assert.assertNotNull(entryItor54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 99 + "'", int62 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector64);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(entryItor72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector76);
        org.junit.Assert.assertNotNull(openMapRealVector77);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((-1), (double) ' ');
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor19 = openMapRealVector8.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        int int27 = openMapRealVector22.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector22.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector35.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector8.add((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        int int40 = openMapRealVector8.getDimension();
        double double41 = openMapRealVector8.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector2.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector8.mapMultiply((double) 98);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertNotNull(entryItor19);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector44);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        openMapRealVector15.set(0.0d);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector15.append(openMapRealVector28);
        int int30 = openMapRealVector15.getMinIndex();
        double[] doubleArray31 = openMapRealVector15.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        double double46 = openMapRealVector37.dotProduct(openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor54 = openMapRealVector52.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector37.append(openMapRealVector52);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector52.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector67.projection((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        double double72 = openMapRealVector63.dotProduct(openMapRealVector67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector75.projection((org.apache.commons.math.linear.RealVector) openMapRealVector78);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor80 = openMapRealVector78.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector63.append(openMapRealVector78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector52.append((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        double[] doubleArray83 = openMapRealVector52.getData();
        double double84 = openMapRealVector15.getL1Distance(doubleArray83);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 99 + "'", int30 == 99);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(entryItor54);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(entryItor80);
        org.junit.Assert.assertNotNull(openMapRealVector81);
        org.junit.Assert.assertNotNull(openMapRealVector82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        boolean boolean21 = openMapRealVector18.isNaN();
        double double22 = openMapRealVector18.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector18.mapSubtractToSelf(0.009900990099009901d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(1, (-0.0d));
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector26.mapMultiply((double) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector26.mapAddToSelf((double) 200);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        double double57 = openMapRealVector48.dotProduct(openMapRealVector52);
        int int58 = openMapRealVector48.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean62 = openMapRealVector61.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector48.append((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        int int79 = openMapRealVector69.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor80 = openMapRealVector69.sparseIterator();
        double double81 = openMapRealVector48.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector69.mapMultiply((double) 100);
        double[] doubleArray84 = openMapRealVector69.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector42.ebeDivide(doubleArray84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector85.sparseIterator();
        double double87 = openMapRealVector85.getSparsity();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 99 + "'", int79 == 99);
        org.junit.Assert.assertNotNull(entryItor80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertNotNull(entryItor86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector5.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        int int37 = openMapRealVector27.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor38 = openMapRealVector27.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector41.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector54.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector27.add((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        int int59 = openMapRealVector27.getDimension();
        double double60 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        openMapRealVector27.setEntry(1, 301.0d);
        double double64 = openMapRealVector27.getLInfNorm();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 99 + "'", int37 == 99);
        org.junit.Assert.assertNotNull(entryItor38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(entryItor56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 301.0d + "'", double64 == 301.0d);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector20.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor35 = openMapRealVector33.sparseIterator();
        boolean boolean36 = openMapRealVector33.isNaN();
        double double37 = openMapRealVector20.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector47.projection((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        double double59 = openMapRealVector50.dotProduct(openMapRealVector54);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor60 = openMapRealVector54.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector43.append((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector54.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector63.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor67 = openMapRealVector66.iterator();
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector66.mapSubtractToSelf((double) (short) 1);
        double[] doubleArray70 = openMapRealVector66.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector71.mapMultiplyToSelf((double) 99);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = openMapRealVector33.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 1");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(entryItor35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor60);
        org.junit.Assert.assertNotNull(openMapRealVector61);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(entryItor67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0]");
        org.junit.Assert.assertNotNull(realVector73);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor19 = openMapRealVector8.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        int int27 = openMapRealVector22.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector22.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector35.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector8.add((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        int int40 = openMapRealVector8.getDimension();
        double double41 = openMapRealVector8.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector2.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector42.mapSubtract((double) (byte) -1);
        double double45 = openMapRealVector42.getMinValue();
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertNotNull(entryItor19);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(10, (-1), Double.NaN);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector7.projection((org.apache.commons.math.linear.RealVector) openMapRealVector10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        double double19 = openMapRealVector10.dotProduct(openMapRealVector14);
        int int20 = openMapRealVector10.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean24 = openMapRealVector23.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector10.append((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector10.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        double double50 = openMapRealVector41.dotProduct(openMapRealVector45);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor51 = openMapRealVector45.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector34.append((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector45.append((double) 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector26.combineToSelf((double) 'a', (double) 2, (org.apache.commons.math.linear.RealVector) openMapRealVector45);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector3.setSubVector(1, (org.apache.commons.math.linear.RealVector) openMapRealVector26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (100)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 99 + "'", int20 == 99);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor51);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertNotNull(openMapRealVector54);
        org.junit.Assert.assertNotNull(realVector55);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(10, 0, 0.01020408163265306d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double18 = openMapRealVector9.dotProduct(openMapRealVector13);
        int int19 = openMapRealVector9.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean23 = openMapRealVector22.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        double double39 = openMapRealVector30.dotProduct(openMapRealVector34);
        int int40 = openMapRealVector30.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector30.sparseIterator();
        double double42 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        double double64 = openMapRealVector55.dotProduct(openMapRealVector59);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor65 = openMapRealVector59.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector48.append((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector30.add(openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector70.projection((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector81 = openMapRealVector77.projection((org.apache.commons.math.linear.RealVector) openMapRealVector80);
        double double82 = openMapRealVector73.dotProduct(openMapRealVector77);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector89 = openMapRealVector85.projection((org.apache.commons.math.linear.RealVector) openMapRealVector88);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor90 = openMapRealVector88.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector73.append(openMapRealVector88);
        double double92 = openMapRealVector48.getL1Distance(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector93 = openMapRealVector73.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector95 = openMapRealVector73.mapAddToSelf((double) (byte) -1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor96 = openMapRealVector73.iterator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector97 = openMapRealVector3.add(openMapRealVector73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 10 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor65);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(openMapRealVector67);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(entryItor90);
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector93);
        org.junit.Assert.assertNotNull(openMapRealVector95);
        org.junit.Assert.assertNotNull(entryItor96);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector5.mapAdd((double) (short) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector21.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.append((double) 0.0f);
        double double26 = openMapRealVector21.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector21.getSubVector(1, 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector5.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        double double45 = openMapRealVector36.dotProduct(openMapRealVector40);
        int int46 = openMapRealVector36.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean50 = openMapRealVector49.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector36.append((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        double[] doubleArray56 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector51.setSubVector(99, doubleArray56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector21.append(doubleArray56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56, (double) (short) 10);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(openMapRealVector51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector60);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean3 = openMapRealVector2.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 10, (int) (short) 10, (double) (-1));
        openMapRealVector8.unitize();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = openMapRealVector2.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 10");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(openMapRealVector4);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        double double16 = openMapRealVector7.dotProduct(openMapRealVector11);
        int int17 = openMapRealVector7.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor18 = openMapRealVector7.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        int int26 = openMapRealVector21.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector21.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor36 = openMapRealVector34.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector7.add((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        int int39 = openMapRealVector7.getDimension();
        double double40 = openMapRealVector7.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        double double55 = openMapRealVector46.dotProduct(openMapRealVector50);
        int int56 = openMapRealVector46.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean60 = openMapRealVector59.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector46.append((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        double[] doubleArray66 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector61.setSubVector(99, doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, (double) (-1.0f));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector7.append(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector1.append(doubleArray66);
        openMapRealVector1.set(19600.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 99 + "'", int17 == 99);
        org.junit.Assert.assertNotNull(entryItor18);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 99 + "'", int26 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(entryItor36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 99 + "'", int56 == 99);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(openMapRealVector61);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector5.iterator();
        openMapRealVector5.set((double) 2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(96, (-1), (double) 97);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 96");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(entryItor24);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        int int39 = openMapRealVector29.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector29.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        int int48 = openMapRealVector43.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector43.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor58 = openMapRealVector56.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector29.add((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        double double61 = openMapRealVector50.getSparsity();
        double double62 = openMapRealVector5.dotProduct(openMapRealVector50);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector50.mapMultiplyToSelf((double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector50.append((double) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(entryItor58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(openMapRealVector66);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector20.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector3.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector3.mapAdd(14.142135623730951d);
        double[] doubleArray34 = openMapRealVector3.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector5.mapAdd((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        double double41 = openMapRealVector32.dotProduct(openMapRealVector36);
        int int42 = openMapRealVector32.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor43 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector46.projection((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        int int51 = openMapRealVector46.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector46.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector59.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector32.add((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        double double64 = openMapRealVector53.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector26.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        openMapRealVector53.setEntry((int) 'a', (double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector5.append(openMapRealVector53);
        double double70 = openMapRealVector53.getMaxValue();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector53.mapToSelf(univariateRealFunction71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 99 + "'", int42 == 99);
        org.junit.Assert.assertNotNull(entryItor43);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 99 + "'", int51 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1.0d) + "'", double70 == (-1.0d));
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        boolean boolean16 = openMapRealVector5.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double double40 = openMapRealVector31.dotProduct(openMapRealVector35);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector35.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector24.append((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector35.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector44.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor48 = openMapRealVector47.iterator();
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector47.mapSubtractToSelf((double) (short) 1);
        double[] doubleArray51 = openMapRealVector47.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector5.combineToSelf((double) 97, (double) (short) 0, doubleArray51);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 1");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(openMapRealVector44);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(entryItor48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0]");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor36 = openMapRealVector30.iterator();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray39, (double) (byte) 1);
        double[] doubleArray47 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix48 = openMapRealVector41.outerProduct(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector30.add(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector20.add(doubleArray47);
        boolean boolean51 = openMapRealVector20.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        double double66 = openMapRealVector57.dotProduct(openMapRealVector61);
        int int67 = openMapRealVector57.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean71 = openMapRealVector70.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector57.append((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector57.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector20.append(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        double[] doubleArray77 = openMapRealVector20.getData();
        org.apache.commons.math.linear.RealVector realVector78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector20.projection(realVector78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 99 + "'", int67 == 99);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        double[] doubleArray10 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = openMapRealVector4.outerProduct(doubleArray10);
        openMapRealVector4.set((double) (short) 10);
        double double14 = openMapRealVector4.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 20.0d + "'", double14 == 20.0d);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector20.mapDivideToSelf((double) 0.0f);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector20.mapMultiplyToSelf(0.009900990099009901d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector37.projection((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        double double49 = openMapRealVector40.dotProduct(openMapRealVector44);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor50 = openMapRealVector44.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector33.append((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector44.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector53.mapAddToSelf((double) 'a');
        double double56 = openMapRealVector55.getL1Norm();
        double[] doubleArray57 = openMapRealVector55.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double58 = openMapRealVector20.getL1Distance(doubleArray57);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 101");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor50);
        org.junit.Assert.assertNotNull(openMapRealVector51);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 9807.0d + "'", double56 == 9807.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 107.0]");
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        int int17 = openMapRealVector12.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector12.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor27 = openMapRealVector25.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector19.mapMultiply(100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector19.append(openMapRealVector33);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector33.mapSubtractToSelf(Double.NaN);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        double double55 = openMapRealVector46.dotProduct(openMapRealVector50);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector50.iterator();
        boolean boolean57 = openMapRealVector50.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector67.projection((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        double double72 = openMapRealVector63.dotProduct(openMapRealVector67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector75.projection((org.apache.commons.math.linear.RealVector) openMapRealVector78);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor80 = openMapRealVector78.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector63.append(openMapRealVector78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector50.add(openMapRealVector78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = openMapRealVector33.subtract(openMapRealVector78);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector78.mapMultiplyToSelf((double) 0.0f);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector78.sparseIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector87 = openMapRealVector7.combine((-10.0d), 301.0d, (org.apache.commons.math.linear.RealVector) openMapRealVector78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 99 + "'", int17 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(entryItor27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(entryItor80);
        org.junit.Assert.assertNotNull(openMapRealVector81);
        org.junit.Assert.assertNotNull(openMapRealVector82);
        org.junit.Assert.assertNotNull(openMapRealVector83);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(entryItor86);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean22 = openMapRealVector21.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector8.append((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        int int39 = openMapRealVector29.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector29.sparseIterator();
        double double41 = openMapRealVector8.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        double double63 = openMapRealVector54.dotProduct(openMapRealVector58);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor64 = openMapRealVector58.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector47.append((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector29.add(openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector76.projection((org.apache.commons.math.linear.RealVector) openMapRealVector79);
        double double81 = openMapRealVector72.dotProduct(openMapRealVector76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector88 = openMapRealVector84.projection((org.apache.commons.math.linear.RealVector) openMapRealVector87);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor89 = openMapRealVector87.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector72.append(openMapRealVector87);
        double double91 = openMapRealVector47.getL1Distance(openMapRealVector72);
        org.apache.commons.math.linear.RealMatrix realMatrix92 = openMapRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector93 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        int int94 = openMapRealVector72.getDimension();
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor64);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(entryItor89);
        org.junit.Assert.assertNotNull(openMapRealVector90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 100 + "'", int94 == 100);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        int int24 = openMapRealVector14.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean28 = openMapRealVector27.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector14.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double[] doubleArray34 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector29.setSubVector(99, doubleArray34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector29.mapAdd(0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean41 = openMapRealVector40.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor42 = openMapRealVector40.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 1);
        openMapRealVector40.setSubVector((int) ' ', (org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        double double61 = openMapRealVector52.dotProduct(openMapRealVector56);
        int int62 = openMapRealVector52.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean66 = openMapRealVector65.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector52.append((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector40.append(openMapRealVector67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector40.mapAddToSelf((double) 199);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double[] doubleArray78 = openMapRealVector76.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = openMapRealVector70.projection(doubleArray78);
        org.apache.commons.math.linear.RealMatrix realMatrix80 = openMapRealVector37.outerProduct(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector7.setSubVector(9, doubleArray78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (9)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(entryItor42);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 99 + "'", int62 == 99);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(openMapRealVector67);
        org.junit.Assert.assertNotNull(openMapRealVector68);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector79);
        org.junit.Assert.assertNotNull(realMatrix80);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        double[] doubleArray7 = openMapRealVector5.toArray();
        double[] doubleArray8 = openMapRealVector5.toArray();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        double double34 = openMapRealVector25.dotProduct(openMapRealVector29);
        int int35 = openMapRealVector25.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean39 = openMapRealVector38.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector25.append((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double[] doubleArray45 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector40.setSubVector(99, doubleArray45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45, (double) 'a');
        double double49 = openMapRealVector48.getNorm();
        double[] doubleArray50 = openMapRealVector48.getData();
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector17.combineToSelf((double) 1, (double) 10.0f, doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = openMapRealVector5.getDistance(doubleArray50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 99 + "'", int35 == 99);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector51);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) -1, (int) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        int int10 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector5.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector15.projection((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor20 = openMapRealVector18.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector12.mapMultiply(100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector12.append(openMapRealVector26);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor32 = openMapRealVector12.sparseIterator();
        boolean boolean33 = openMapRealVector2.equals((java.lang.Object) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector12.add(openMapRealVector34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 99 + "'", int10 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(entryItor20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(entryItor32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.projection((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        double double30 = openMapRealVector21.dotProduct(openMapRealVector25);
        int int31 = openMapRealVector21.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor32 = openMapRealVector21.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        int int40 = openMapRealVector35.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector35.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor50 = openMapRealVector48.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector21.add((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double53 = openMapRealVector42.getSparsity();
        double double54 = openMapRealVector42.getMaxValue();
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double56 = openMapRealVector5.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        double double71 = openMapRealVector62.dotProduct(openMapRealVector66);
        int int72 = openMapRealVector62.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean76 = openMapRealVector75.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector62.append((org.apache.commons.math.linear.RealVector) openMapRealVector75);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector84.sparseIterator();
        openMapRealVector75.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector84);
        org.apache.commons.math.linear.RealVector realVector89 = openMapRealVector75.mapSubtractToSelf(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector91 = openMapRealVector75.mapMultiply((double) (-1L));
        double double92 = openMapRealVector5.getDistance(realVector91);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 99 + "'", int31 == 99);
        org.junit.Assert.assertNotNull(entryItor32);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(entryItor50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 99 + "'", int72 == 99);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(entryItor86);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        double[] doubleArray10 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = openMapRealVector4.outerProduct(doubleArray10);
        openMapRealVector4.set((double) (short) 10);
        int int14 = openMapRealVector4.getDimension();
        int int15 = openMapRealVector4.getMaxIndex();
        double double16 = openMapRealVector4.getMaxValue();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector1.append((double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.mapAddToSelf((double) 0L);
        boolean boolean6 = openMapRealVector5.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector5);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector7.mapMultiply(99.0d);
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        double[] doubleArray10 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = openMapRealVector4.outerProduct(doubleArray10);
        openMapRealVector4.set((double) (short) 10);
        int int14 = openMapRealVector4.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector31.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector20.append((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        double double39 = openMapRealVector4.getDistance(openMapRealVector38);
        double double40 = openMapRealVector4.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector4.mapAddToSelf((double) (byte) 10);
        org.apache.commons.math.linear.RealVector realVector43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector42.add(realVector43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 14.142135623730951d + "'", double39 == 14.142135623730951d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 14.142135623730951d + "'", double40 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(openMapRealVector42);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector5.mapAdd((double) (short) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector21.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.append((double) 0.0f);
        double double26 = openMapRealVector21.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector21.getSubVector(1, 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector5.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double31 = openMapRealVector21.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        double double55 = openMapRealVector46.dotProduct(openMapRealVector50);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector50.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector39.append((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector50.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector59.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean63 = openMapRealVector62.isNaN();
        org.apache.commons.math.linear.RealMatrix realMatrix64 = openMapRealVector33.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        openMapRealVector33.set((double) 100);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector33.mapMultiply((double) 100L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector21.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor56);
        org.junit.Assert.assertNotNull(openMapRealVector57);
        org.junit.Assert.assertNotNull(openMapRealVector59);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(openMapRealVector70);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double[] doubleArray25 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector20.setSubVector(99, doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25, (double) 'a');
        double double29 = openMapRealVector28.getNorm();
        double double30 = openMapRealVector28.getLInfNorm();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double28 = openMapRealVector19.dotProduct(openMapRealVector23);
        int int29 = openMapRealVector19.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector19.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        int int38 = openMapRealVector33.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector33.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor48 = openMapRealVector46.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector19.add((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        int int51 = openMapRealVector19.getDimension();
        double double52 = openMapRealVector19.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector66 = openMapRealVector62.projection((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        double double67 = openMapRealVector58.dotProduct(openMapRealVector62);
        int int68 = openMapRealVector58.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean72 = openMapRealVector71.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector58.append((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        double[] doubleArray78 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector73.setSubVector(99, doubleArray78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray78, (double) (-1.0f));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector19.append(doubleArray78);
        int int83 = openMapRealVector82.getDimension();
        double double84 = openMapRealVector82.getLInfNorm();
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector12.setSubVector(4, (org.apache.commons.math.linear.RealVector) openMapRealVector82);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (4)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 99 + "'", int29 == 99);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 99 + "'", int38 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(entryItor48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 99 + "'", int68 == 99);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 103 + "'", int83 == 103);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector3.append((double) 0.0f);
        double double8 = openMapRealVector3.getSparsity();
        int int9 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double[] doubleArray17 = openMapRealVector15.getData();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector15.mapSubtract(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector15.mapMultiply((double) 0.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector3.append(openMapRealVector15);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector3.mapDivideToSelf(97.0d);
        java.lang.Class<?> wildcardClass25 = realVector24.getClass();
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 99 + "'", int9 == 99);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector3.append((double) 0.0f);
        double double8 = openMapRealVector3.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector3.getSubVector(1, 99);
        int int12 = openMapRealVector11.getMaxIndex();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17, (double) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        double double25 = openMapRealVector24.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        double[] doubleArray33 = openMapRealVector31.getData();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector24.add(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = openMapRealVector11.dotProduct(doubleArray33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 99 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 98 + "'", int12 == 98);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double double29 = openMapRealVector20.dotProduct(openMapRealVector24);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector24.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector13.append((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector24.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector33.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector36.iterator();
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector36.mapDivideToSelf((double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector7.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 1");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(realVector39);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector20.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector29.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean33 = openMapRealVector32.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        double double55 = openMapRealVector46.dotProduct(openMapRealVector50);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector50.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector39.append((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector50.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector59.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor63 = openMapRealVector62.iterator();
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector62.mapSubtractToSelf((double) (short) 1);
        double[] doubleArray66 = openMapRealVector62.toArray();
        double double67 = openMapRealVector32.dotProduct(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = openMapRealVector3.getDistance(doubleArray66);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 1");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor56);
        org.junit.Assert.assertNotNull(openMapRealVector57);
        org.junit.Assert.assertNotNull(openMapRealVector59);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(entryItor63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double double40 = openMapRealVector31.dotProduct(openMapRealVector35);
        int int41 = openMapRealVector31.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean45 = openMapRealVector44.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector31.append((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        double double61 = openMapRealVector52.dotProduct(openMapRealVector56);
        int int62 = openMapRealVector52.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor63 = openMapRealVector52.sparseIterator();
        double double64 = openMapRealVector31.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector67.projection((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        int int72 = openMapRealVector67.getMaxIndex();
        double double73 = openMapRealVector52.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        int int74 = openMapRealVector67.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector67.mapDivide((double) 10.0f);
        double[] doubleArray77 = openMapRealVector67.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray77);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray77);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = openMapRealVector25.append(doubleArray77);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector25.copy();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 99 + "'", int41 == 99);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 99 + "'", int62 == 99);
        org.junit.Assert.assertNotNull(entryItor63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 99 + "'", int72 == 99);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 99 + "'", int74 == 99);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector80);
        org.junit.Assert.assertNotNull(openMapRealVector81);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double18 = openMapRealVector9.dotProduct(openMapRealVector13);
        int int19 = openMapRealVector9.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean23 = openMapRealVector22.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        double double39 = openMapRealVector30.dotProduct(openMapRealVector34);
        int int40 = openMapRealVector30.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector30.sparseIterator();
        double double42 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        int int50 = openMapRealVector45.getMaxIndex();
        double double51 = openMapRealVector30.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        double double52 = openMapRealVector3.getDistance(openMapRealVector30);
        double double53 = openMapRealVector3.getSparsity();
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 99 + "'", int50 == 99);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.append((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = openMapRealVector9.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        double[] doubleArray19 = openMapRealVector13.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector13);
        boolean boolean22 = openMapRealVector13.equals((java.lang.Object) 99);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector18.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector27.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor31 = openMapRealVector30.iterator();
        double double32 = openMapRealVector1.getDistance(openMapRealVector30);
        double double33 = openMapRealVector1.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector1.mapAddToSelf((double) (byte) 0);
        double double36 = openMapRealVector1.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector1);
        int int38 = openMapRealVector37.getMaxIndex();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(entryItor31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector5.mapAdd((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        double double31 = openMapRealVector22.dotProduct(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector22.mapAdd((double) (short) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector22.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector38.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.append((double) 0.0f);
        double double43 = openMapRealVector38.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector38.getSubVector(1, 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector22.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double62 = openMapRealVector53.dotProduct(openMapRealVector57);
        int int63 = openMapRealVector53.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean67 = openMapRealVector66.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector53.append((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        double[] doubleArray73 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector68.setSubVector(99, doubleArray73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray73, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector38.append(doubleArray73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector16.append(doubleArray73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = openMapRealVector16.append((double) 1L);
        org.apache.commons.math.linear.RealVector realVector82 = openMapRealVector16.mapDivide(201.0d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 99 + "'", int63 == 99);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(openMapRealVector68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertNotNull(openMapRealVector80);
        org.junit.Assert.assertNotNull(realVector82);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.unitVector();
        double double50 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector36.mapSubtractToSelf((double) (short) 1);
        double[] doubleArray53 = openMapRealVector36.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        double double68 = openMapRealVector59.dotProduct(openMapRealVector63);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector59.mapAdd((double) (short) 1);
        boolean boolean71 = openMapRealVector70.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector36.subtract(openMapRealVector70);
        double double73 = openMapRealVector70.getSparsity();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0]");
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        double double7 = openMapRealVector5.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        double double22 = openMapRealVector13.dotProduct(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.projection((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor45 = openMapRealVector39.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector28.append((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        double double61 = openMapRealVector52.dotProduct(openMapRealVector56);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor62 = openMapRealVector56.iterator();
        boolean boolean63 = openMapRealVector56.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector84.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector69.append(openMapRealVector84);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = openMapRealVector56.add(openMapRealVector84);
        double double89 = openMapRealVector28.getL1Distance(openMapRealVector84);
        double[] doubleArray90 = openMapRealVector28.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector17.projection(doubleArray90);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = openMapRealVector5.ebeDivide(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector93 = openMapRealVector5.unitVector();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor45);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(entryItor86);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertNotNull(openMapRealVector88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertNotNull(openMapRealVector92);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, 0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector16.mapDivide((double) 100.0f);
        double[] doubleArray19 = openMapRealVector16.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = openMapRealVector12.cosine(doubleArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        double[] doubleArray10 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = openMapRealVector4.outerProduct(doubleArray10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10, (double) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 10, 9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        int int9 = openMapRealVector8.getMaxIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector2.combine(100.51368066089312d, (double) (-1), (org.apache.commons.math.linear.RealVector) openMapRealVector8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 10 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 99 + "'", int9 == 99);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor7 = openMapRealVector5.sparseIterator();
        double[] doubleArray8 = openMapRealVector5.getData();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(entryItor7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(98, 300, (double) (-1.0f));
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double[] doubleArray25 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector20.setSubVector(99, doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector20.mapAdd(0.0d);
        boolean boolean29 = openMapRealVector20.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        int int38 = openMapRealVector33.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector33.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        double double55 = openMapRealVector46.dotProduct(openMapRealVector50);
        int int56 = openMapRealVector46.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor57 = openMapRealVector46.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        int int65 = openMapRealVector60.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector60.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector70.projection((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor75 = openMapRealVector73.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector67.projection((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector46.add((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double double78 = openMapRealVector67.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = openMapRealVector40.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = openMapRealVector67.unitVector();
        org.apache.commons.math.linear.RealVector realVector82 = openMapRealVector80.mapMultiplyToSelf((double) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        double double86 = openMapRealVector80.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector85);
        openMapRealVector20.setSubVector((int) ' ', (org.apache.commons.math.linear.RealVector) openMapRealVector85);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector85.mapAdd((double) ' ');
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 99 + "'", int38 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 99 + "'", int56 == 99);
        org.junit.Assert.assertNotNull(entryItor57);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 99 + "'", int65 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector67);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(entryItor75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector79);
        org.junit.Assert.assertNotNull(openMapRealVector80);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector89);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) '4', 0, (double) 101);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, (int) (byte) 1, (double) (-1));
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector7.mapDivideToSelf((double) 97);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = openMapRealVector3.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 52 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector5.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        int int37 = openMapRealVector27.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor38 = openMapRealVector27.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector41.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector54.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector27.add((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        int int59 = openMapRealVector27.getDimension();
        double double60 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        int int61 = openMapRealVector27.getMinIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector84.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector69.append(openMapRealVector84);
        org.apache.commons.math.linear.RealVector realVector89 = openMapRealVector84.mapDivideToSelf((double) 0.0f);
        org.apache.commons.math.linear.RealVector realVector90 = openMapRealVector27.combine((double) 100L, (double) 'a', (org.apache.commons.math.linear.RealVector) openMapRealVector84);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 99 + "'", int37 == 99);
        org.junit.Assert.assertNotNull(entryItor38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(entryItor56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 99 + "'", int61 == 99);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(entryItor86);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(realVector90);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector26.append((double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        double double43 = openMapRealVector34.dotProduct(openMapRealVector38);
        int int44 = openMapRealVector34.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean48 = openMapRealVector47.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector34.append((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        double[] doubleArray54 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector49.setSubVector(99, doubleArray54);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = openMapRealVector26.outerProduct(doubleArray54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(96, 0);
        openMapRealVector26.setSubVector(0, (org.apache.commons.math.linear.RealVector) openMapRealVector60);
        int int62 = openMapRealVector26.getMinIndex();
        openMapRealVector26.setEntry(2, 100.00999950005d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 99 + "'", int62 == 99);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (double) (short) 0);
        int int3 = openMapRealVector2.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double18 = openMapRealVector9.dotProduct(openMapRealVector13);
        int int19 = openMapRealVector9.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean23 = openMapRealVector22.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        double double39 = openMapRealVector30.dotProduct(openMapRealVector34);
        int int40 = openMapRealVector30.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector30.sparseIterator();
        double double42 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        int int50 = openMapRealVector45.getMaxIndex();
        double double51 = openMapRealVector30.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        double double73 = openMapRealVector64.dotProduct(openMapRealVector68);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor74 = openMapRealVector68.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector57.append((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        double[] doubleArray76 = openMapRealVector75.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector30.append(doubleArray76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector30.copy();
        double double79 = openMapRealVector2.getDistance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector30.mapAdd((double) '4');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(96, 0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = openMapRealVector84.mapAdd((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector87 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 96");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 99 + "'", int50 == 99);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor74);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector81);
        org.junit.Assert.assertNotNull(openMapRealVector86);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        double double17 = openMapRealVector9.getMinValue();
        double[] doubleArray18 = openMapRealVector9.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector20.mapAdd(1.0d);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.mapDivideToSelf(0.1d);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector20.mapSubtractToSelf((-1.0E12d));
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        boolean boolean15 = openMapRealVector9.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double[] doubleArray23 = openMapRealVector21.getData();
        double double24 = openMapRealVector9.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        double double48 = openMapRealVector39.dotProduct(openMapRealVector43);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor49 = openMapRealVector43.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector32.append((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector43.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector52.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector55.iterator();
        double double57 = openMapRealVector26.getDistance(openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector67.projection((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        double double72 = openMapRealVector63.dotProduct(openMapRealVector67);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor73 = openMapRealVector67.iterator();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray76, (double) (byte) 1);
        double[] doubleArray84 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix85 = openMapRealVector78.outerProduct(doubleArray84);
        org.apache.commons.math.linear.RealVector realVector86 = openMapRealVector67.add(doubleArray84);
        boolean boolean87 = openMapRealVector55.equals((java.lang.Object) openMapRealVector67);
        double double88 = openMapRealVector67.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector21.append((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor49);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(entryItor56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix85);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector89);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        boolean boolean15 = openMapRealVector9.isNaN();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector9.unitVector();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector20.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector3.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector35.append((double) 1.0f);
        int int38 = openMapRealVector35.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector33.append(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        double double54 = openMapRealVector45.dotProduct(openMapRealVector49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor62 = openMapRealVector60.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector45.append(openMapRealVector60);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector60.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector60.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector67.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector35.append(openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector30.append(openMapRealVector69);
        double double71 = openMapRealVector70.getMinValue();
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 96 + "'", int38 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(entryItor62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(openMapRealVector67);
        org.junit.Assert.assertNotNull(openMapRealVector68);
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        boolean boolean8 = openMapRealVector7.isNaN();
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector7.mapMultiply((double) 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(realVector10);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        int int24 = openMapRealVector14.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean28 = openMapRealVector27.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector14.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor45 = openMapRealVector39.iterator();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48, (double) (byte) 1);
        double[] doubleArray56 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix57 = openMapRealVector50.outerProduct(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector39.add(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector29.add(doubleArray56);
        openMapRealVector7.setSubVector(0, doubleArray56);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector7.mapDivideToSelf((double) '#');
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor63 = openMapRealVector7.iterator();
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(entryItor63);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        boolean boolean37 = openMapRealVector26.isNaN();
        double[] doubleArray38 = openMapRealVector26.getData();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        double double8 = openMapRealVector7.getMaxValue();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        boolean boolean18 = openMapRealVector7.equals((java.lang.Object) openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        double double33 = openMapRealVector24.dotProduct(openMapRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector39.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector24.append(openMapRealVector39);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector39.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector39.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector46.append(301.0d);
        double[] doubleArray49 = openMapRealVector46.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector17.subtract(doubleArray49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector5.copy();
        double double22 = openMapRealVector5.getLInfNorm();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27, (double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27, (double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27, 0.0d);
        double double36 = openMapRealVector5.getDistance(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 14.177446878757825d + "'", double36 == 14.177446878757825d);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor79 = openMapRealVector73.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector73);
        double double81 = openMapRealVector73.getMinValue();
        double[] doubleArray82 = openMapRealVector73.toArray();
        double double83 = openMapRealVector44.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 1.0E-12d, 100.0d, 0.0d, 101.0d, 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray5);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11, (double) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        double double19 = openMapRealVector18.getL1Norm();
        openMapRealVector6.setSubVector(0, (org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 101.0d + "'", double19 == 101.0d);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(199, (int) (short) 100, (double) 0.0f);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector5.mapAdd((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        double double41 = openMapRealVector32.dotProduct(openMapRealVector36);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor42 = openMapRealVector36.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector25.append((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector36.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector45.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean49 = openMapRealVector48.isNaN();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = openMapRealVector19.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        boolean boolean51 = openMapRealVector19.isInfinite();
        openMapRealVector16.setSubVector((int) (byte) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double53 = openMapRealVector16.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        double double68 = openMapRealVector59.dotProduct(openMapRealVector63);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector71.projection((org.apache.commons.math.linear.RealVector) openMapRealVector74);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor76 = openMapRealVector74.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector59.append(openMapRealVector74);
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector74.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector74.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector81.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = openMapRealVector16.subtract(openMapRealVector81);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = openMapRealVector16.unitVector();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor42);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(entryItor76);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(openMapRealVector81);
        org.junit.Assert.assertNotNull(openMapRealVector82);
        org.junit.Assert.assertNotNull(openMapRealVector83);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapDivide((double) 100.0f);
        double[] doubleArray6 = openMapRealVector3.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        int int14 = openMapRealVector9.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double double29 = openMapRealVector20.dotProduct(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector35.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector20.append(openMapRealVector35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector9.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        double double54 = openMapRealVector45.dotProduct(openMapRealVector49);
        int int55 = openMapRealVector45.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean59 = openMapRealVector58.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector45.append((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector70.projection((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        double double75 = openMapRealVector66.dotProduct(openMapRealVector70);
        int int76 = openMapRealVector66.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor77 = openMapRealVector66.sparseIterator();
        double double78 = openMapRealVector45.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        int int86 = openMapRealVector81.getMaxIndex();
        double double87 = openMapRealVector66.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector81);
        int int88 = openMapRealVector81.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector90 = openMapRealVector81.mapDivide((double) 10.0f);
        double[] doubleArray91 = openMapRealVector81.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray91);
        org.apache.commons.math.linear.RealVector realVector94 = openMapRealVector92.mapSubtractToSelf((double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector95 = openMapRealVector9.ebeMultiply(realVector94);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector96 = openMapRealVector95.copy();
        double double97 = openMapRealVector3.getLInfDistance((org.apache.commons.math.linear.RealVector) openMapRealVector95);
        int int98 = openMapRealVector95.getMaxIndex();
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 99 + "'", int14 == 99);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 99 + "'", int55 == 99);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 99 + "'", int76 == 99);
        org.junit.Assert.assertNotNull(entryItor77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 99 + "'", int86 == 99);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 99 + "'", int88 == 99);
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector94);
        org.junit.Assert.assertNotNull(openMapRealVector95);
        org.junit.Assert.assertNotNull(openMapRealVector96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 99 + "'", int98 == 99);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        double double47 = openMapRealVector26.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double double69 = openMapRealVector60.dotProduct(openMapRealVector64);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor70 = openMapRealVector64.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector53.append((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        double[] doubleArray72 = openMapRealVector71.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector26.append(doubleArray72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector26.copy();
        double[] doubleArray75 = openMapRealVector74.getData();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor76 = openMapRealVector74.iterator();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(entryItor76);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(197, (int) (byte) -1, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector7.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 197");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        double double47 = openMapRealVector26.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        int int48 = openMapRealVector41.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector41.mapDivide((double) 10.0f);
        double[] doubleArray51 = openMapRealVector41.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector41.copy();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector41.mapToSelf(univariateRealFunction53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector52);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector25.mapAddToSelf((double) 'a');
        double double28 = openMapRealVector27.getL1Norm();
        double double29 = openMapRealVector27.getLInfNorm();
        double double30 = openMapRealVector27.getL1Norm();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 9807.0d + "'", double28 == 9807.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 107.0d + "'", double29 == 107.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 9807.0d + "'", double30 == 9807.0d);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        openMapRealVector36.setEntry((int) 'a', (double) (byte) -1);
        double double53 = openMapRealVector36.getEntry((int) (byte) 10);
        double[] doubleArray54 = openMapRealVector36.toArray();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector36.map(univariateRealFunction55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]");
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector4.mapAdd((-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector14.mapAdd((double) (short) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector14.sparseIterator();
        double double27 = openMapRealVector8.getL1Distance(openMapRealVector14);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector8.mapSubtract((double) 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        int int37 = openMapRealVector32.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector32.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        double double54 = openMapRealVector45.dotProduct(openMapRealVector49);
        int int55 = openMapRealVector45.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector45.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        int int64 = openMapRealVector59.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector59.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor74 = openMapRealVector72.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector45.add((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        double double77 = openMapRealVector66.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector39.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        openMapRealVector66.setEntry((int) 'a', (double) (byte) -1);
        double double83 = openMapRealVector66.getEntry((int) (byte) 10);
        double[] doubleArray84 = openMapRealVector66.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector8.projection(doubleArray84);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 2 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 301.0d + "'", double27 == 301.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 99 + "'", int37 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 99 + "'", int55 == 99);
        org.junit.Assert.assertNotNull(entryItor56);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 99 + "'", int64 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(entryItor74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1.0d) + "'", double83 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.append((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = openMapRealVector9.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.mapMultiplyToSelf((double) (byte) -1);
        int int21 = openMapRealVector9.getMaxIndex();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 99 + "'", int21 == 99);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        int int5 = openMapRealVector4.getMaxIndex();
        double double6 = openMapRealVector4.getNorm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.00499987500625d + "'", double6 == 100.00499987500625d);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(300);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 10, (int) '#', (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        int int11 = openMapRealVector6.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector6.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor21 = openMapRealVector19.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        boolean boolean23 = openMapRealVector19.isInfinite();
        double[] doubleArray24 = openMapRealVector19.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double25 = openMapRealVector3.dotProduct(openMapRealVector19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 10 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(entryItor21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector4.map(univariateRealFunction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector27.sparseIterator();
        openMapRealVector18.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double double31 = openMapRealVector18.getLInfNorm();
        double double32 = openMapRealVector18.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector36.append((double) 1.0f);
        int int39 = openMapRealVector36.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector34.append(openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        double double56 = openMapRealVector47.dotProduct(openMapRealVector51);
        int int57 = openMapRealVector47.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean61 = openMapRealVector60.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector47.append((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector72.projection((org.apache.commons.math.linear.RealVector) openMapRealVector75);
        double double77 = openMapRealVector68.dotProduct(openMapRealVector72);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor78 = openMapRealVector72.iterator();
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray81, (double) (byte) 1);
        double[] doubleArray89 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix90 = openMapRealVector83.outerProduct(doubleArray89);
        org.apache.commons.math.linear.RealVector realVector91 = openMapRealVector72.add(doubleArray89);
        org.apache.commons.math.linear.RealVector realVector92 = openMapRealVector62.add(doubleArray89);
        openMapRealVector40.setSubVector(0, doubleArray89);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector94 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        double double95 = openMapRealVector18.getL1Distance(openMapRealVector94);
        org.apache.commons.math.linear.RealVector realVector97 = openMapRealVector18.mapMultiplyToSelf((double) (byte) 1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 96 + "'", int39 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 99 + "'", int57 == 99);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realVector92);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 113.0d + "'", double95 == 113.0d);
        org.junit.Assert.assertNotNull(realVector97);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(99, 0.0d);
        boolean boolean3 = openMapRealVector2.isInfinite();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean3 = openMapRealVector2.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.iterator();
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.mapDivide((double) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector25.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean29 = openMapRealVector28.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector46.projection((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        double double51 = openMapRealVector42.dotProduct(openMapRealVector46);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor52 = openMapRealVector46.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector35.append((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector46.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = openMapRealVector55.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor59 = openMapRealVector58.iterator();
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector58.mapSubtractToSelf((double) (short) 1);
        double[] doubleArray62 = openMapRealVector58.toArray();
        double double63 = openMapRealVector28.dotProduct(doubleArray62);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray62);
        double double65 = openMapRealVector64.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector64.copy();
        int int67 = openMapRealVector66.getMinIndex();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor52);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(openMapRealVector58);
        org.junit.Assert.assertNotNull(entryItor59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector20.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector3.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        int int40 = openMapRealVector35.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector35.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor50 = openMapRealVector48.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        openMapRealVector48.set(0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        double[] doubleArray61 = openMapRealVector59.getData();
        double double62 = openMapRealVector48.getDistance(doubleArray61);
        double double63 = openMapRealVector48.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector48.mapSubtractToSelf((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector32.ebeDivide(realVector65);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 102 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(entryItor50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(realVector65);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        double[] doubleArray10 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = openMapRealVector4.outerProduct(doubleArray10);
        openMapRealVector4.set((double) (short) 10);
        int int14 = openMapRealVector4.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector31.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector20.append((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        double double39 = openMapRealVector4.getDistance(openMapRealVector38);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector4.mapDivide(1.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector4);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 1.0E-12d, 100.0d, 0.0d, 101.0d, 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48);
        double double50 = openMapRealVector4.getL1Distance(openMapRealVector49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(199, (double) 196);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector49.setSubVector((int) (byte) -1, (org.apache.commons.math.linear.RealVector) openMapRealVector54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (-1)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 14.142135623730951d + "'", double39 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 300.999999999999d + "'", double50 == 300.999999999999d);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(200, (int) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector7.projection((org.apache.commons.math.linear.RealVector) openMapRealVector10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        double double19 = openMapRealVector10.dotProduct(openMapRealVector14);
        int int20 = openMapRealVector10.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean24 = openMapRealVector23.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector10.append((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double[] doubleArray30 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector25.setSubVector(99, doubleArray30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30, (double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30, 10.049875621120895d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector2.combineToSelf((double) 197, (double) 'a', doubleArray30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 200 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 99 + "'", int20 == 99);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0]");
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector1.append((double) 1.0f);
        int int4 = openMapRealVector1.getMaxIndex();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8, 10.0d);
        double double17 = openMapRealVector16.getL1Norm();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = openMapRealVector1.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 97 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 96 + "'", int4 == 96);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double[] doubleArray24 = openMapRealVector23.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        double double46 = openMapRealVector37.dotProduct(openMapRealVector41);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor47 = openMapRealVector41.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector30.append((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        double[] doubleArray49 = openMapRealVector48.getData();
        double double50 = openMapRealVector23.getL1Distance(doubleArray49);
        int int51 = openMapRealVector23.getMinIndex();
        org.apache.commons.math.linear.RealVector realVector52 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double53 = openMapRealVector23.getDistance(realVector52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor47);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 199 + "'", int51 == 199);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor3 = openMapRealVector2.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapDivide(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.unitVector();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(entryItor3);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector18.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector27.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor31 = openMapRealVector30.iterator();
        double double32 = openMapRealVector1.getDistance(openMapRealVector30);
        double double33 = openMapRealVector1.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector1.mapAddToSelf((double) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        double double50 = openMapRealVector41.dotProduct(openMapRealVector45);
        int int51 = openMapRealVector41.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean55 = openMapRealVector54.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector41.append((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        double double71 = openMapRealVector62.dotProduct(openMapRealVector66);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor72 = openMapRealVector66.iterator();
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray75, (double) (byte) 1);
        double[] doubleArray83 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix84 = openMapRealVector77.outerProduct(doubleArray83);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector66.add(doubleArray83);
        org.apache.commons.math.linear.RealVector realVector86 = openMapRealVector56.add(doubleArray83);
        boolean boolean87 = openMapRealVector56.isInfinite();
        org.apache.commons.math.linear.RealVector realVector89 = openMapRealVector56.mapSubtractToSelf((double) (byte) 100);
        double[] doubleArray90 = openMapRealVector56.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector35.append(doubleArray90);
        openMapRealVector91.setEntry(10, 1000.0d);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(entryItor31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 99 + "'", int51 == 99);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(openMapRealVector56);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor72);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix84);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(openMapRealVector91);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double double40 = openMapRealVector31.dotProduct(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        int int48 = openMapRealVector43.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector43.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor58 = openMapRealVector56.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector50.mapMultiply(100.0d);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector35.projection(realVector61);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector35.mapDivide((double) ' ');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(99, 103, 0.009900990099009901d);
        double[] doubleArray69 = openMapRealVector68.getData();
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector35.add(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector23.combine((double) 300, (double) 2, doubleArray69);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 200 != 99");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(entryItor58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector70);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.apache.commons.math.linear.RealVector realVector0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(realVector0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        boolean boolean13 = openMapRealVector12.isInfinite();
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector12.combineToSelf((double) 100L, (double) 0.0f, doubleArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 0");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector25.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector28.iterator();
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector28.mapSubtractToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector28.mapAdd((double) 100L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        double double48 = openMapRealVector39.dotProduct(openMapRealVector43);
        int int49 = openMapRealVector39.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor50 = openMapRealVector39.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        int int58 = openMapRealVector53.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector53.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor68 = openMapRealVector66.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector39.add((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double71 = openMapRealVector39.getL1Norm();
        double[] doubleArray72 = openMapRealVector39.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector33.append(openMapRealVector39);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector33.mapToSelf(univariateRealFunction74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 99 + "'", int49 == 99);
        org.junit.Assert.assertNotNull(entryItor50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(entryItor68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector73);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 1);
        boolean boolean3 = openMapRealVector2.isNaN();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8, (double) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        double double16 = openMapRealVector15.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double[] doubleArray24 = openMapRealVector22.getData();
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector15.add(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector2.subtract(doubleArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 0 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        int int22 = openMapRealVector12.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor23 = openMapRealVector12.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        int int31 = openMapRealVector26.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector26.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector39.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector12.add((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double44 = openMapRealVector33.getSparsity();
        double double45 = openMapRealVector33.getMaxValue();
        int int46 = openMapRealVector33.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector2.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector48.copy();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 99 + "'", int22 == 99);
        org.junit.Assert.assertNotNull(entryItor23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 99 + "'", int31 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(openMapRealVector49);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        int int39 = openMapRealVector29.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector29.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        int int48 = openMapRealVector43.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector43.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor58 = openMapRealVector56.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector29.add((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        double double61 = openMapRealVector50.getSparsity();
        double double62 = openMapRealVector5.dotProduct(openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector64.append((double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = openMapRealVector50.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor68 = openMapRealVector50.sparseIterator();
        double double69 = openMapRealVector50.getL1Norm();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(entryItor58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(entryItor68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 100.0d + "'", double69 == 100.0d);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        int int24 = openMapRealVector14.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean28 = openMapRealVector27.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector14.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor45 = openMapRealVector39.iterator();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48, (double) (byte) 1);
        double[] doubleArray56 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix57 = openMapRealVector50.outerProduct(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector39.add(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector29.add(doubleArray56);
        openMapRealVector7.setSubVector(0, doubleArray56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector71.projection((org.apache.commons.math.linear.RealVector) openMapRealVector74);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector82 = openMapRealVector78.projection((org.apache.commons.math.linear.RealVector) openMapRealVector81);
        double double83 = openMapRealVector74.dotProduct(openMapRealVector78);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor84 = openMapRealVector78.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector67.append((org.apache.commons.math.linear.RealVector) openMapRealVector78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = openMapRealVector61.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector67);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 197 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor84);
        org.junit.Assert.assertNotNull(openMapRealVector85);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 0, (-1), (double) 99);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        int int22 = openMapRealVector12.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor23 = openMapRealVector12.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        int int31 = openMapRealVector26.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector26.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector39.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector12.add((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double44 = openMapRealVector33.getSparsity();
        double double45 = openMapRealVector33.getMaxValue();
        int int46 = openMapRealVector33.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector2.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 99 + "'", int22 == 99);
        org.junit.Assert.assertNotNull(entryItor23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 99 + "'", int31 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector47);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 1);
        boolean boolean3 = openMapRealVector2.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double18 = openMapRealVector9.dotProduct(openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector24.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append(openMapRealVector24);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector24.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector47.projection((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor52 = openMapRealVector50.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector35.append(openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector24.append((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector24.mapDivideToSelf((double) 96);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector24.mapSubtract((double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double59 = openMapRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 0 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(entryItor52);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertNotNull(openMapRealVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector58);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double[] doubleArray49 = openMapRealVector48.getData();
        double[] doubleArray50 = openMapRealVector48.toArray();
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.mapSubtractToSelf((double) 0);
        double double53 = openMapRealVector48.getMinValue();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (int) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAdd((double) '4');
        openMapRealVector4.set((double) '#');
        double double7 = openMapRealVector4.getMinValue();
        int int8 = openMapRealVector4.getMaxIndex();
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(2, (double) 199);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        double double31 = openMapRealVector22.dotProduct(openMapRealVector26);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor32 = openMapRealVector26.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector15.append((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        double double48 = openMapRealVector39.dotProduct(openMapRealVector43);
        int int49 = openMapRealVector39.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor50 = openMapRealVector39.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        int int58 = openMapRealVector53.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector53.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor68 = openMapRealVector66.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector39.add((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double71 = openMapRealVector60.getSparsity();
        double double72 = openMapRealVector15.dotProduct(openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector9.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(10);
        double double76 = openMapRealVector15.getL1Distance(openMapRealVector75);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector15.map(univariateRealFunction77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor32);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 99 + "'", int49 == 99);
        org.junit.Assert.assertNotNull(entryItor50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(entryItor68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        double double47 = openMapRealVector26.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double double69 = openMapRealVector60.dotProduct(openMapRealVector64);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor70 = openMapRealVector64.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector53.append((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        double[] doubleArray72 = openMapRealVector71.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector26.append(doubleArray72);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor74 = openMapRealVector73.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(99, 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector77.copy();
        double double79 = openMapRealVector78.getSparsity();
        org.apache.commons.math.linear.RealMatrix realMatrix80 = openMapRealVector73.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector78);
        int int81 = openMapRealVector78.getDimension();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertNotNull(entryItor74);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 99 + "'", int81 == 99);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100, 0.009900990099009901d);
        boolean boolean3 = openMapRealVector2.isNaN();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entryItor4);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 1.0E-12d, 100.0d, 0.0d, 101.0d, 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector6.mapDivide((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(realVector8);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector18.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector27.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor31 = openMapRealVector30.iterator();
        double double32 = openMapRealVector1.getDistance(openMapRealVector30);
        double double33 = openMapRealVector1.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector1.mapAddToSelf((double) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector47.projection((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        double double52 = openMapRealVector43.dotProduct(openMapRealVector47);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor53 = openMapRealVector47.iterator();
        boolean boolean54 = openMapRealVector47.isInfinite();
        int int55 = openMapRealVector47.getDimension();
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector47.mapMultiply((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector1.combine((double) (-1), (double) 98, (org.apache.commons.math.linear.RealVector) openMapRealVector47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 0 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(entryItor31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(realVector57);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector5.mapAdd((double) (short) 1);
        double double17 = openMapRealVector16.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        double double32 = openMapRealVector23.dotProduct(openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector38.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector23.append(openMapRealVector38);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector38.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector46.projection((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        int int51 = openMapRealVector46.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector46.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        double double68 = openMapRealVector59.dotProduct(openMapRealVector63);
        int int69 = openMapRealVector59.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor70 = openMapRealVector59.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        int int78 = openMapRealVector73.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = openMapRealVector73.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector87 = openMapRealVector83.projection((org.apache.commons.math.linear.RealVector) openMapRealVector86);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor88 = openMapRealVector86.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector89 = openMapRealVector80.projection((org.apache.commons.math.linear.RealVector) openMapRealVector86);
        org.apache.commons.math.linear.RealVector realVector90 = openMapRealVector59.add((org.apache.commons.math.linear.RealVector) openMapRealVector80);
        double double91 = openMapRealVector80.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = openMapRealVector53.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector80);
        openMapRealVector80.setEntry((int) 'a', (double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector96 = openMapRealVector38.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector80);
        double[] doubleArray97 = openMapRealVector96.getData();
        double double98 = openMapRealVector16.dotProduct(doubleArray97);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 99 + "'", int51 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 99 + "'", int69 == 99);
        org.junit.Assert.assertNotNull(entryItor70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 99 + "'", int78 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector80);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertNotNull(entryItor88);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector92);
        org.junit.Assert.assertNotNull(openMapRealVector96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector12.mapAdd((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector29.mapAdd((double) (short) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector29.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector45.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector45.append((double) 0.0f);
        double double50 = openMapRealVector45.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector45.getSubVector(1, 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector29.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double double69 = openMapRealVector60.dotProduct(openMapRealVector64);
        int int70 = openMapRealVector60.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean74 = openMapRealVector73.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector60.append((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        double[] doubleArray80 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector75.setSubVector(99, doubleArray80);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray80, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = openMapRealVector45.append(doubleArray80);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector23.append(doubleArray80);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector23.append((double) 1L);
        int int88 = openMapRealVector23.getMinIndex();
        double double89 = openMapRealVector6.getDistance(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertNotNull(openMapRealVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 99 + "'", int70 == 99);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector84);
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 99 + "'", int88 == 99);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 99.51381813597547d + "'", double89 == 99.51381813597547d);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(197, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.unitVector();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double[] doubleArray25 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector20.setSubVector(99, doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25, (double) (-1.0f));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        double double43 = openMapRealVector34.dotProduct(openMapRealVector38);
        int int44 = openMapRealVector34.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector47.projection((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        double double59 = openMapRealVector50.dotProduct(openMapRealVector54);
        int int60 = openMapRealVector50.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector50.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        int int69 = openMapRealVector64.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector64.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector74.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor79 = openMapRealVector77.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector71.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        org.apache.commons.math.linear.RealVector realVector81 = openMapRealVector50.add((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        double double82 = openMapRealVector71.getSparsity();
        double double83 = openMapRealVector71.getMaxValue();
        org.apache.commons.math.linear.RealVector realVector84 = openMapRealVector34.add((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector91 = openMapRealVector87.projection((org.apache.commons.math.linear.RealVector) openMapRealVector90);
        double[] doubleArray92 = openMapRealVector90.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector93 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray92);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector94 = openMapRealVector34.ebeDivide(doubleArray92);
        org.apache.commons.math.linear.RealMatrix realMatrix95 = openMapRealVector28.outerProduct(doubleArray92);
        openMapRealVector28.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector97 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 99 + "'", int60 == 99);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 99 + "'", int69 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(entryItor79);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1.0d) + "'", double83 == (-1.0d));
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector94);
        org.junit.Assert.assertNotNull(realMatrix95);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector18.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector27.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean31 = openMapRealVector30.isNaN();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = openMapRealVector1.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor33 = openMapRealVector30.iterator();
        double double34 = openMapRealVector30.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector37.projection((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        double double49 = openMapRealVector40.dotProduct(openMapRealVector44);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor50 = openMapRealVector44.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector44);
        double double52 = openMapRealVector44.getMinValue();
        double[] doubleArray53 = openMapRealVector44.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray53, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = openMapRealVector30.getDistance(doubleArray53);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(entryItor33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor50);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100, 0, (double) 100.0f);
        double double4 = openMapRealVector3.getL1Norm();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(99, 0.0d);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29, (double) (byte) 1);
        double[] doubleArray37 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix38 = openMapRealVector31.outerProduct(doubleArray37);
        openMapRealVector31.set((double) (short) 10);
        int int41 = openMapRealVector31.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector26.append((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        double double57 = openMapRealVector48.dotProduct(openMapRealVector52);
        int int58 = openMapRealVector48.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean62 = openMapRealVector61.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector48.append((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        double[] doubleArray68 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector63.setSubVector(99, doubleArray68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector63.mapAdd(0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector42.append(openMapRealVector71);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector20.add((org.apache.commons.math.linear.RealVector) openMapRealVector71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 200");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(openMapRealVector72);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(96, 0.0d);
        double double3 = openMapRealVector2.getL1Norm();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        double double47 = openMapRealVector26.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double double69 = openMapRealVector60.dotProduct(openMapRealVector64);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor70 = openMapRealVector64.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector53.append((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        double[] doubleArray72 = openMapRealVector71.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector26.append(doubleArray72);
        openMapRealVector26.set((double) 300);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector73);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        double[] doubleArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector5.setSubVector((int) (short) 1, doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean3 = openMapRealVector2.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 1);
        openMapRealVector2.setSubVector((int) ' ', (org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        int int24 = openMapRealVector14.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean28 = openMapRealVector27.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector14.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector2.append(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector2.mapAddToSelf((double) 199);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector32.mapDivideToSelf((double) (byte) 100);
        double[] doubleArray35 = openMapRealVector32.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector32.mapAdd((double) 99);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99, 1.99]");
        org.junit.Assert.assertNotNull(openMapRealVector37);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor20 = openMapRealVector15.sparseIterator();
        double double21 = openMapRealVector15.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = openMapRealVector15.getDistance(openMapRealVector22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(entryItor20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector42.mapDivide((double) 100.0f);
        double[] doubleArray45 = openMapRealVector42.getData();
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector26.combine(201.0d, (double) (byte) 1, doubleArray45);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector26.mapMultiply((double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector26.getSubVector((int) '#', 98);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (132)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector48);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 103);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector3.append((double) 0.0f);
        double double8 = openMapRealVector3.getSparsity();
        int int9 = openMapRealVector3.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        double double26 = openMapRealVector17.dotProduct(openMapRealVector21);
        int int27 = openMapRealVector17.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector37.projection((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        double double42 = openMapRealVector33.dotProduct(openMapRealVector37);
        int int43 = openMapRealVector33.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector33.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector47.projection((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        int int52 = openMapRealVector47.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector47.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor62 = openMapRealVector60.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector33.add((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        double double65 = openMapRealVector54.getSparsity();
        double double66 = openMapRealVector54.getMaxValue();
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector17.add((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector70.projection((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        double[] doubleArray75 = openMapRealVector73.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray75);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector17.ebeDivide(doubleArray75);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector11.append(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = openMapRealVector3.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 102");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 99 + "'", int52 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(entryItor62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean3 = openMapRealVector2.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 1);
        openMapRealVector2.setSubVector((int) ' ', (org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        int int24 = openMapRealVector14.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean28 = openMapRealVector27.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector14.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector2.append(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector2.mapAddToSelf((-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        int int40 = openMapRealVector35.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector35.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        double double57 = openMapRealVector48.dotProduct(openMapRealVector52);
        int int58 = openMapRealVector48.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor59 = openMapRealVector48.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector66 = openMapRealVector62.projection((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        int int67 = openMapRealVector62.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector62.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector72.projection((org.apache.commons.math.linear.RealVector) openMapRealVector75);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor77 = openMapRealVector75.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector75);
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector48.add((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        double double80 = openMapRealVector69.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector42.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        double[] doubleArray82 = openMapRealVector81.getData();
        double[] doubleArray83 = openMapRealVector81.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector92 = openMapRealVector88.projection((org.apache.commons.math.linear.RealVector) openMapRealVector91);
        int int93 = openMapRealVector88.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector95 = openMapRealVector88.mapAddToSelf((double) (byte) -1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor96 = openMapRealVector88.sparseIterator();
        double double97 = openMapRealVector88.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector98 = openMapRealVector81.combineToSelf((double) 100.0f, (double) 2, (org.apache.commons.math.linear.RealVector) openMapRealVector88);
        org.apache.commons.math.linear.RealVector realVector99 = openMapRealVector2.add(realVector98);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertNotNull(entryItor59);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 99 + "'", int67 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(entryItor77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 99 + "'", int93 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector95);
        org.junit.Assert.assertNotNull(entryItor96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1.0d + "'", double97 == 1.0d);
        org.junit.Assert.assertNotNull(realVector98);
        org.junit.Assert.assertNotNull(realVector99);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector26.mapMultiply(100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector26.append(openMapRealVector40);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector40.mapSubtractToSelf(Double.NaN);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double62 = openMapRealVector53.dotProduct(openMapRealVector57);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor63 = openMapRealVector57.iterator();
        boolean boolean64 = openMapRealVector57.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector67.projection((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector74.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        double double79 = openMapRealVector70.dotProduct(openMapRealVector74);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector86 = openMapRealVector82.projection((org.apache.commons.math.linear.RealVector) openMapRealVector85);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor87 = openMapRealVector85.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = openMapRealVector70.append(openMapRealVector85);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector57.add(openMapRealVector85);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector40.subtract(openMapRealVector85);
        double double91 = openMapRealVector90.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = openMapRealVector90.copy();
        org.apache.commons.math.linear.RealVector realVector94 = openMapRealVector92.mapDivideToSelf((double) (short) 10);
        org.apache.commons.math.linear.RealVector realVector95 = openMapRealVector9.projection(realVector94);
        org.apache.commons.math.linear.RealVector realVector97 = openMapRealVector9.mapSubtract((double) (short) 100);
        int int98 = openMapRealVector9.getMaxIndex();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertNotNull(entryItor87);
        org.junit.Assert.assertNotNull(openMapRealVector88);
        org.junit.Assert.assertNotNull(openMapRealVector89);
        org.junit.Assert.assertNotNull(openMapRealVector90);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertNotNull(openMapRealVector92);
        org.junit.Assert.assertNotNull(realVector94);
        org.junit.Assert.assertNotNull(realVector95);
        org.junit.Assert.assertNotNull(realVector97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 99 + "'", int98 == 99);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        double double45 = openMapRealVector36.dotProduct(openMapRealVector40);
        int int46 = openMapRealVector36.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean50 = openMapRealVector49.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector36.append((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        double[] doubleArray56 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector51.setSubVector(99, doubleArray56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56, (double) 'a');
        double double60 = openMapRealVector59.getNorm();
        double[] doubleArray61 = openMapRealVector59.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray61);
        double double63 = openMapRealVector30.getDistance(doubleArray61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector30.append(100.00999950005d);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = openMapRealVector5.cosine((org.apache.commons.math.linear.RealVector) openMapRealVector65);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(openMapRealVector51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 141.42489172702236d + "'", double63 == 141.42489172702236d);
        org.junit.Assert.assertNotNull(openMapRealVector65);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double[] doubleArray25 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector20.setSubVector(99, doubleArray25);
        int int27 = openMapRealVector20.getMaxIndex();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector5.mapAdd((double) (short) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector21.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.append((double) 0.0f);
        double double26 = openMapRealVector21.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector21.getSubVector(1, 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector5.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        double double45 = openMapRealVector36.dotProduct(openMapRealVector40);
        int int46 = openMapRealVector36.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean50 = openMapRealVector49.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector36.append((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        double[] doubleArray56 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector51.setSubVector(99, doubleArray56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector21.append(doubleArray56);
        double[] doubleArray61 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector72.projection((org.apache.commons.math.linear.RealVector) openMapRealVector75);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector79.projection((org.apache.commons.math.linear.RealVector) openMapRealVector82);
        double double84 = openMapRealVector75.dotProduct(openMapRealVector79);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor85 = openMapRealVector79.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = openMapRealVector68.append((org.apache.commons.math.linear.RealVector) openMapRealVector79);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = openMapRealVector79.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector88.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor92 = openMapRealVector91.iterator();
        double double93 = openMapRealVector62.getDistance(openMapRealVector91);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector95 = openMapRealVector62.mapAddToSelf(0.0d);
        org.apache.commons.math.linear.RealVector realVector97 = openMapRealVector95.mapDivide(141.42489172702236d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector98 = openMapRealVector60.add((org.apache.commons.math.linear.RealVector) openMapRealVector95);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 103 != 0");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(openMapRealVector51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor85);
        org.junit.Assert.assertNotNull(openMapRealVector86);
        org.junit.Assert.assertNotNull(openMapRealVector88);
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertNotNull(entryItor92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector95);
        org.junit.Assert.assertNotNull(realVector97);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(99, 103, 0.009900990099009901d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double18 = openMapRealVector9.dotProduct(openMapRealVector13);
        int int19 = openMapRealVector9.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean23 = openMapRealVector22.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        double double39 = openMapRealVector30.dotProduct(openMapRealVector34);
        int int40 = openMapRealVector30.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector30.sparseIterator();
        double double42 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        double double64 = openMapRealVector55.dotProduct(openMapRealVector59);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor65 = openMapRealVector59.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector48.append((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector30.add(openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector70.projection((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector81 = openMapRealVector77.projection((org.apache.commons.math.linear.RealVector) openMapRealVector80);
        double double82 = openMapRealVector73.dotProduct(openMapRealVector77);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector89 = openMapRealVector85.projection((org.apache.commons.math.linear.RealVector) openMapRealVector88);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor90 = openMapRealVector88.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector73.append(openMapRealVector88);
        double double92 = openMapRealVector48.getL1Distance(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector93 = openMapRealVector73.copy();
        double[] doubleArray94 = openMapRealVector93.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double95 = openMapRealVector3.getLInfDistance(doubleArray94);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 99 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor65);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(openMapRealVector67);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(entryItor90);
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double double29 = openMapRealVector20.dotProduct(openMapRealVector24);
        int int30 = openMapRealVector20.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean34 = openMapRealVector33.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector20.append((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        double double50 = openMapRealVector41.dotProduct(openMapRealVector45);
        int int51 = openMapRealVector41.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor52 = openMapRealVector41.sparseIterator();
        double double53 = openMapRealVector20.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector70.projection((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        double double75 = openMapRealVector66.dotProduct(openMapRealVector70);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor76 = openMapRealVector70.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector59.append((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector41.add(openMapRealVector59);
        double double79 = openMapRealVector5.getL1Distance(openMapRealVector59);
        double double80 = openMapRealVector5.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector82 = openMapRealVector5.mapSubtractToSelf((double) (byte) 1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 99 + "'", int30 == 99);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 99 + "'", int51 == 99);
        org.junit.Assert.assertNotNull(entryItor52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor76);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(realVector82);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector23.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector23.mapDivide(0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append(openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        double double12 = openMapRealVector11.getMinValue();
        double double13 = openMapRealVector11.getMaxValue();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 14.142135623730951d + "'", double13 == 14.142135623730951d);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) '#', (double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector8.mapAdd((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.projection((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor45 = openMapRealVector39.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector28.append((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector39.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector48.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean52 = openMapRealVector51.isNaN();
        org.apache.commons.math.linear.RealMatrix realMatrix53 = openMapRealVector22.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        boolean boolean54 = openMapRealVector22.isInfinite();
        openMapRealVector19.setSubVector((int) (byte) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector22);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = openMapRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 35 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor45);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 10, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = openMapRealVector25.getDistance(openMapRealVector29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (100)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        double[] doubleArray10 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = openMapRealVector4.outerProduct(doubleArray10);
        openMapRealVector4.set((double) (short) 10);
        int int14 = openMapRealVector4.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector4);
        boolean boolean16 = openMapRealVector4.isInfinite();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector4.mapMultiplyToSelf((double) 10L);
        double[] doubleArray19 = openMapRealVector4.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 100.0]");
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(2);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector1.mapSubtract(101.0d);
        int int4 = openMapRealVector1.getDimension();
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector4.mapAdd((-1.0d));
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector6.mapSubtract((double) 10.0f);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector13.mapAdd((-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.mapAdd((double) 100);
        openMapRealVector17.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector6.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (int) (byte) 100);
        double double25 = openMapRealVector24.getLInfNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector19.combineToSelf(9807.0d, 97.0d, (org.apache.commons.math.linear.RealVector) openMapRealVector24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 2 != 0");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(199, 301.0d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.map(univariateRealFunction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector23.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector23.mapDivide(0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append(openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        double double43 = openMapRealVector34.dotProduct(openMapRealVector38);
        int int44 = openMapRealVector34.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean48 = openMapRealVector47.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector34.append((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        double[] doubleArray54 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector49.setSubVector(99, doubleArray54);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = openMapRealVector28.outerProduct(doubleArray54);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100, 0, (double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector7.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.append((double) 0.0f);
        double double12 = openMapRealVector7.getSparsity();
        double double13 = openMapRealVector3.getL1Distance(openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (double) (short) 0);
        int int17 = openMapRealVector16.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        double double32 = openMapRealVector23.dotProduct(openMapRealVector27);
        int int33 = openMapRealVector23.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean37 = openMapRealVector36.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector23.append((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        int int54 = openMapRealVector44.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor55 = openMapRealVector44.sparseIterator();
        double double56 = openMapRealVector23.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        int int64 = openMapRealVector59.getMaxIndex();
        double double65 = openMapRealVector44.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector75.projection((org.apache.commons.math.linear.RealVector) openMapRealVector78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector86 = openMapRealVector82.projection((org.apache.commons.math.linear.RealVector) openMapRealVector85);
        double double87 = openMapRealVector78.dotProduct(openMapRealVector82);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor88 = openMapRealVector82.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector71.append((org.apache.commons.math.linear.RealVector) openMapRealVector82);
        double[] doubleArray90 = openMapRealVector89.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector44.append(doubleArray90);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = openMapRealVector44.copy();
        double double93 = openMapRealVector16.getDistance(openMapRealVector44);
        double double94 = openMapRealVector16.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector95 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double96 = openMapRealVector16.getL1Norm();
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 99 + "'", int33 == 99);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
        org.junit.Assert.assertNotNull(entryItor55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 99 + "'", int64 == 99);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor88);
        org.junit.Assert.assertNotNull(openMapRealVector89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertNotNull(openMapRealVector92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(98);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector84.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector69.append(openMapRealVector84);
        double double88 = openMapRealVector44.getL1Distance(openMapRealVector69);
        double double89 = openMapRealVector69.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector69.mapAddToSelf((double) (short) 10);
        org.apache.commons.math.linear.RealVector realVector93 = openMapRealVector91.mapMultiplyToSelf((-2.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector96 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100, (double) 2);
        double double97 = openMapRealVector91.getLInfDistance((org.apache.commons.math.linear.RealVector) openMapRealVector96);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(entryItor86);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertNotNull(realVector93);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 20.0d + "'", double97 == 20.0d);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        double double17 = openMapRealVector9.getMinValue();
        double[] doubleArray18 = openMapRealVector9.toArray();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.mapSubtract(10.049875621120895d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(2, 0);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        int int18 = openMapRealVector17.getMinIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        int int20 = openMapRealVector9.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector6.subtract(openMapRealVector9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 4 != 2");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector18.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector27.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor31 = openMapRealVector30.iterator();
        double double32 = openMapRealVector1.getDistance(openMapRealVector30);
        double double33 = openMapRealVector1.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector1.mapAddToSelf((double) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        double double50 = openMapRealVector41.dotProduct(openMapRealVector45);
        int int51 = openMapRealVector41.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean55 = openMapRealVector54.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector41.append((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        double double71 = openMapRealVector62.dotProduct(openMapRealVector66);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor72 = openMapRealVector66.iterator();
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray75, (double) (byte) 1);
        double[] doubleArray83 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix84 = openMapRealVector77.outerProduct(doubleArray83);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector66.add(doubleArray83);
        org.apache.commons.math.linear.RealVector realVector86 = openMapRealVector56.add(doubleArray83);
        boolean boolean87 = openMapRealVector56.isInfinite();
        org.apache.commons.math.linear.RealVector realVector89 = openMapRealVector56.mapSubtractToSelf((double) (byte) 100);
        double[] doubleArray90 = openMapRealVector56.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector35.append(doubleArray90);
        double double92 = openMapRealVector35.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(entryItor31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 99 + "'", int51 == 99);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(openMapRealVector56);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor72);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix84);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double[] doubleArray24 = openMapRealVector23.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        double double46 = openMapRealVector37.dotProduct(openMapRealVector41);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor47 = openMapRealVector41.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector30.append((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        double[] doubleArray49 = openMapRealVector48.getData();
        double double50 = openMapRealVector23.getL1Distance(doubleArray49);
        openMapRealVector23.set((double) (byte) 1);
        double double54 = openMapRealVector23.getEntry(0);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor47);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 0, 0.0d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor3 = openMapRealVector2.sparseIterator();
        org.junit.Assert.assertNotNull(entryItor3);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        double double47 = openMapRealVector26.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double double69 = openMapRealVector60.dotProduct(openMapRealVector64);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor70 = openMapRealVector64.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector53.append((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        double[] doubleArray72 = openMapRealVector71.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector26.append(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector26.mapDivide((double) 100);
        boolean boolean76 = openMapRealVector26.isNaN();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean3 = openMapRealVector2.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector7.projection((org.apache.commons.math.linear.RealVector) openMapRealVector10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        double double19 = openMapRealVector10.dotProduct(openMapRealVector14);
        int int20 = openMapRealVector10.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        int int45 = openMapRealVector40.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector40.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor55 = openMapRealVector53.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector47.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector26.add((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        double double58 = openMapRealVector47.getSparsity();
        double double59 = openMapRealVector47.getMaxValue();
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector10.add((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector71.projection((org.apache.commons.math.linear.RealVector) openMapRealVector74);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector82 = openMapRealVector78.projection((org.apache.commons.math.linear.RealVector) openMapRealVector81);
        double double83 = openMapRealVector74.dotProduct(openMapRealVector78);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor84 = openMapRealVector78.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector67.append((org.apache.commons.math.linear.RealVector) openMapRealVector78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector78.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector87.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean91 = openMapRealVector90.isNaN();
        double double92 = openMapRealVector90.getMinValue();
        org.apache.commons.math.linear.RealVector realVector94 = openMapRealVector90.mapDivideToSelf(301.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector95 = openMapRealVector2.add((org.apache.commons.math.linear.RealVector) openMapRealVector90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 1");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 99 + "'", int20 == 99);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 99 + "'", int45 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(entryItor55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor84);
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertNotNull(openMapRealVector90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(realVector94);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        int int2 = openMapRealVector1.getDimension();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.projection((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        double double30 = openMapRealVector21.dotProduct(openMapRealVector25);
        int int31 = openMapRealVector21.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean35 = openMapRealVector34.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector21.append((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double[] doubleArray41 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector36.setSubVector(99, doubleArray41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray41, (double) 'a');
        double double45 = openMapRealVector44.getNorm();
        double[] doubleArray46 = openMapRealVector44.getData();
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector13.combineToSelf((double) 1, (double) 10.0f, doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector1.combineToSelf((double) 1L, (double) 1L, doubleArray46);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 99 + "'", int31 == 99);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector47);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        double double22 = openMapRealVector13.dotProduct(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.projection((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector28.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector13.append(openMapRealVector28);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector28.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector28.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector35.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector3.append(openMapRealVector36);
        double double38 = openMapRealVector3.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector3);
        boolean boolean40 = openMapRealVector39.isInfinite();
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector39.mapDivide(0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.mapMultiply(100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector9.append(openMapRealVector23);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector23.mapSubtractToSelf(Double.NaN);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        double double45 = openMapRealVector36.dotProduct(openMapRealVector40);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor46 = openMapRealVector40.iterator();
        boolean boolean47 = openMapRealVector40.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double62 = openMapRealVector53.dotProduct(openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor70 = openMapRealVector68.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector53.append(openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector40.add(openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector23.subtract(openMapRealVector68);
        org.apache.commons.math.linear.RealVector realVector74 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double75 = openMapRealVector73.getDistance(realVector74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(entryItor70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(openMapRealVector73);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double38 = openMapRealVector5.getEntry((int) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector5.append((double) 'a');
        int int41 = openMapRealVector5.getMaxIndex();
        double[] doubleArray42 = openMapRealVector5.getData();
        double double43 = openMapRealVector5.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector5.mapMultiplyToSelf((double) 4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 99 + "'", int41 == 99);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(2, 98, 320.0d);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor39 = openMapRealVector33.iterator();
        boolean boolean40 = openMapRealVector33.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        double double55 = openMapRealVector46.dotProduct(openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor63 = openMapRealVector61.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector46.append(openMapRealVector61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector33.add(openMapRealVector61);
        double double66 = openMapRealVector5.getL1Distance(openMapRealVector61);
        double[] doubleArray67 = openMapRealVector5.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector70.projection((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector81 = openMapRealVector77.projection((org.apache.commons.math.linear.RealVector) openMapRealVector80);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector88 = openMapRealVector84.projection((org.apache.commons.math.linear.RealVector) openMapRealVector87);
        double double89 = openMapRealVector80.dotProduct(openMapRealVector84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor90 = openMapRealVector84.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector73.append((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        double double92 = openMapRealVector84.getL1Norm();
        double[] doubleArray93 = openMapRealVector84.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector94 = openMapRealVector5.ebeDivide(doubleArray93);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(entryItor63);
        org.junit.Assert.assertNotNull(openMapRealVector64);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor90);
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector94);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) '#');
        double[] doubleArray2 = openMapRealVector1.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector1);
        double double4 = openMapRealVector3.getSparsity();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector3.append((double) 0.0f);
        double double8 = openMapRealVector3.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector3.getSubVector(1, 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector11.getSubVector(0, (int) '#');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = openMapRealVector11.dotProduct(openMapRealVector15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector14);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.mapMultiply(100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector9.append(openMapRealVector23);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector23.mapSubtractToSelf(Double.NaN);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        double double45 = openMapRealVector36.dotProduct(openMapRealVector40);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor46 = openMapRealVector40.iterator();
        boolean boolean47 = openMapRealVector40.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double62 = openMapRealVector53.dotProduct(openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor70 = openMapRealVector68.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector53.append(openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector40.add(openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector23.subtract(openMapRealVector68);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector68.mapMultiplyToSelf((double) 0.0f);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor76 = openMapRealVector68.sparseIterator();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor77 = openMapRealVector68.iterator();
        double[] doubleArray78 = openMapRealVector68.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray78, 301.0d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(entryItor70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(entryItor76);
        org.junit.Assert.assertNotNull(entryItor77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) -1);
        int int2 = openMapRealVector1.getMinIndex();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        int int18 = openMapRealVector13.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector13.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor28 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = openMapRealVector10.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = openMapRealVector1.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: -1 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(entryItor28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realMatrix31);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector20.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector3.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        double double47 = openMapRealVector38.dotProduct(openMapRealVector42);
        int int48 = openMapRealVector38.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean52 = openMapRealVector51.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector38.append((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor62 = openMapRealVector60.sparseIterator();
        openMapRealVector51.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double65 = openMapRealVector51.getEntry(2);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = openMapRealVector32.getDistance(openMapRealVector51);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (101)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(entryItor62);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector4.mapAdd((-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        int int24 = openMapRealVector14.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean28 = openMapRealVector27.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector14.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        int int45 = openMapRealVector35.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor46 = openMapRealVector35.sparseIterator();
        double double47 = openMapRealVector14.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        int int55 = openMapRealVector50.getMaxIndex();
        double double56 = openMapRealVector35.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        int int57 = openMapRealVector50.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector50.mapDivide((double) 10.0f);
        double[] doubleArray60 = openMapRealVector50.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector50.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector65.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector65.append((double) 0.0f);
        double double70 = openMapRealVector65.getSparsity();
        int int71 = openMapRealVector65.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector74.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        double[] doubleArray79 = openMapRealVector77.getData();
        org.apache.commons.math.linear.RealVector realVector81 = openMapRealVector77.mapSubtract(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector77.mapMultiply((double) 0.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = openMapRealVector65.append(openMapRealVector77);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector65.unitVector();
        double double86 = openMapRealVector61.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector8.subtract(openMapRealVector61);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 2 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 99 + "'", int45 == 99);
        org.junit.Assert.assertNotNull(entryItor46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 99 + "'", int55 == 99);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 99 + "'", int57 == 99);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector61);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 99 + "'", int71 == 99);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(openMapRealVector84);
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.mapMultiply(100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean40 = openMapRealVector39.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector26.append((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        double double56 = openMapRealVector47.dotProduct(openMapRealVector51);
        int int57 = openMapRealVector47.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor58 = openMapRealVector47.sparseIterator();
        double double59 = openMapRealVector26.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector47.mapMultiply((double) 100);
        double[] doubleArray62 = openMapRealVector47.toArray();
        double double63 = openMapRealVector9.getL1Distance(doubleArray62);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray62, (double) 200);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 99 + "'", int57 == 99);
        org.junit.Assert.assertNotNull(entryItor58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor19 = openMapRealVector8.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        int int27 = openMapRealVector22.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector22.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector35.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector8.add((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        int int40 = openMapRealVector8.getDimension();
        double double41 = openMapRealVector8.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        double double56 = openMapRealVector47.dotProduct(openMapRealVector51);
        int int57 = openMapRealVector47.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean61 = openMapRealVector60.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector47.append((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double[] doubleArray67 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector62.setSubVector(99, doubleArray67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray67, (double) (-1.0f));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector8.append(doubleArray67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray67, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = openMapRealVector2.dotProduct(doubleArray67);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertNotNull(entryItor19);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 99 + "'", int57 == 99);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector71);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector15.projection((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor20 = openMapRealVector18.sparseIterator();
        boolean boolean21 = openMapRealVector18.isNaN();
        double[] doubleArray22 = openMapRealVector18.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector10.combine((double) (byte) 10, 0.1d, doubleArray22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 4 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(entryItor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(96, 0, (double) 1);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapSubtractToSelf(1.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector3.mapAddToSelf(0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean11 = openMapRealVector10.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector10.append(101.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = openMapRealVector7.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 96 != 101");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(openMapRealVector14);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        double[] doubleArray10 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = openMapRealVector4.outerProduct(doubleArray10);
        openMapRealVector4.set((double) (short) 10);
        int int14 = openMapRealVector4.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector31.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector20.append((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        double double39 = openMapRealVector4.getDistance(openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.getSubVector(99, 10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 14.142135623730951d + "'", double39 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(openMapRealVector42);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.unitVector();
        double double50 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector36.mapSubtractToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector36.append((double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double double69 = openMapRealVector60.dotProduct(openMapRealVector64);
        int int70 = openMapRealVector60.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean74 = openMapRealVector73.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector60.append((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = openMapRealVector60.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector54.append((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector77.getLInfNorm();
        double double79 = openMapRealVector77.getMinValue();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(openMapRealVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 99 + "'", int70 == 99);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(openMapRealVector76);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2.0d + "'", double78 == 2.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-2.0d) + "'", double79 == (-2.0d));
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 1.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        double double47 = openMapRealVector26.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        int int48 = openMapRealVector41.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector41.mapDivide((double) 10.0f);
        double[] doubleArray51 = openMapRealVector41.toArray();
        double double52 = openMapRealVector41.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector41.mapAddToSelf(Double.NaN);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector54.map(univariateRealFunction55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector54);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) ' ', 0.0d);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((-1), 199, (double) 10L);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector27.sparseIterator();
        openMapRealVector18.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double double31 = openMapRealVector18.getLInfNorm();
        double double32 = openMapRealVector18.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector18.append(113.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        double double38 = openMapRealVector18.getLInfDistance((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (int) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector41.mapAdd((double) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double44 = openMapRealVector37.cosine((org.apache.commons.math.linear.RealVector) openMapRealVector41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector43);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor19 = openMapRealVector8.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        int int27 = openMapRealVector22.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector22.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector35.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector8.add((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        int int40 = openMapRealVector8.getDimension();
        double double41 = openMapRealVector8.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector2.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector42.mapSubtract((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector42.append((double) (short) 100);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertNotNull(entryItor19);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(openMapRealVector46);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double38 = openMapRealVector5.getEntry((int) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector5.append((double) 'a');
        int int41 = openMapRealVector5.getMaxIndex();
        double[] doubleArray42 = openMapRealVector5.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector46.mapDivide((double) 100.0f);
        double[] doubleArray49 = openMapRealVector46.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        double double64 = openMapRealVector55.dotProduct(openMapRealVector59);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor65 = openMapRealVector59.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector59);
        double double67 = openMapRealVector59.getMinValue();
        double[] doubleArray68 = openMapRealVector59.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray68);
        double double70 = openMapRealVector46.getDistance(doubleArray68);
        double double71 = openMapRealVector5.dotProduct(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector5.mapDivide(9807.0d);
        double double74 = openMapRealVector5.getMaxValue();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 99 + "'", int41 == 99);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor65);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean3 = openMapRealVector2.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.mapDivideToSelf((double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector2.mapMultiply((double) 100);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        boolean boolean64 = openMapRealVector63.isNaN();
        org.apache.commons.math.linear.RealVector realVector66 = openMapRealVector63.mapSubtractToSelf((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector63.getSubVector(2, 197);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (198)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(realVector66);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        double[] doubleArray10 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = openMapRealVector4.outerProduct(doubleArray10);
        openMapRealVector4.set((double) (short) 10);
        int int14 = openMapRealVector4.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector31.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector20.append((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        double double39 = openMapRealVector4.getDistance(openMapRealVector38);
        double double40 = openMapRealVector4.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector4.append(100.51368066089312d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 14.142135623730951d + "'", double39 == 14.142135623730951d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 14.142135623730951d + "'", double40 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(openMapRealVector42);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector3.append((double) 0.0f);
        double double8 = openMapRealVector3.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector3.getSubVector(1, 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector11);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector11.copy();
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        int int39 = openMapRealVector29.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector29.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        int int48 = openMapRealVector43.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector43.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor58 = openMapRealVector56.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector29.add((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        double double61 = openMapRealVector50.getSparsity();
        double double62 = openMapRealVector5.dotProduct(openMapRealVector50);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector50.mapMultiplyToSelf((double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector50.append((double) (byte) 100);
        double double67 = openMapRealVector66.getMinValue();
        double double68 = openMapRealVector66.getMinValue();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(entryItor58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1.0d) + "'", double67 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.0d) + "'", double68 == (-1.0d));
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.unitVector();
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector49.mapMultiplyToSelf((double) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor59 = openMapRealVector57.sparseIterator();
        boolean boolean60 = openMapRealVector57.isNaN();
        double[] doubleArray61 = openMapRealVector57.toArray();
        double double62 = openMapRealVector49.getL1Distance(doubleArray61);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(entryItor59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 10, (int) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean22 = openMapRealVector21.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector8.append((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        int int39 = openMapRealVector29.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector29.sparseIterator();
        double double41 = openMapRealVector8.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        double double63 = openMapRealVector54.dotProduct(openMapRealVector58);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor64 = openMapRealVector58.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector47.append((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector29.add(openMapRealVector47);
        double double67 = openMapRealVector29.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector29.append((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector2.add((org.apache.commons.math.linear.RealVector) openMapRealVector69);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 10 != 101");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor64);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector69);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (int) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAdd((double) '4');
        openMapRealVector4.set((double) '#');
        double double7 = openMapRealVector4.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector18.iterator();
        boolean boolean25 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double double40 = openMapRealVector31.dotProduct(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor48 = openMapRealVector46.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector31.append(openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector18.add(openMapRealVector46);
        double[] doubleArray55 = new double[] { (short) 1, 100.0f, 99, (-1) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector50.append(doubleArray55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray55, (double) 96);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector4.setSubVector(0, doubleArray55);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (0)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(entryItor48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 100.0, 99.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector56);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, (int) (byte) -1, (double) 99);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapMultiplyToSelf((double) 10);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        double[] doubleArray10 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = openMapRealVector4.outerProduct(doubleArray10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector12.mapDivideToSelf((double) (byte) 10);
        double double15 = openMapRealVector12.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 11.3d + "'", double15 == 11.3d);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.unitVector();
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector49.mapMultiplyToSelf((double) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        double double66 = openMapRealVector57.dotProduct(openMapRealVector61);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor67 = openMapRealVector61.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector61);
        double double69 = openMapRealVector49.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        double double70 = openMapRealVector49.getMaxValue();
        int int71 = openMapRealVector49.getMinIndex();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-0.0d) + "'", double70 == (-0.0d));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 99 + "'", int71 == 99);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(99, 0);
        int int3 = openMapRealVector2.getDimension();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapSubtract((double) 'a');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 99 + "'", int3 == 99);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector84.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector69.append(openMapRealVector84);
        double double88 = openMapRealVector44.getL1Distance(openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean92 = openMapRealVector91.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector93 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector91);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector94 = openMapRealVector69.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector91);
        double[] doubleArray95 = openMapRealVector91.getData();
        openMapRealVector91.setEntry(99, (double) 9);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(entryItor86);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(openMapRealVector94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double[] doubleArray25 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector20.setSubVector(99, doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25, (double) 'a');
        int int29 = openMapRealVector28.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        int int45 = openMapRealVector35.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean49 = openMapRealVector48.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector35.append((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        double double65 = openMapRealVector56.dotProduct(openMapRealVector60);
        int int66 = openMapRealVector56.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor67 = openMapRealVector56.sparseIterator();
        double double68 = openMapRealVector35.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector56.mapMultiply((double) 100);
        double[] doubleArray71 = openMapRealVector56.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector28.append(doubleArray71);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(197, (int) (byte) -1, (double) 10);
        double[] doubleArray77 = openMapRealVector76.toArray();
        // The following exception was thrown during execution in test generation
        try {
            double double78 = openMapRealVector72.getL1Distance(doubleArray77);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 103 != 197");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 99 + "'", int45 == 99);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 99 + "'", int66 == 99);
        org.junit.Assert.assertNotNull(entryItor67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector25.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector28.iterator();
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector28.mapSubtractToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        double double46 = openMapRealVector37.dotProduct(openMapRealVector41);
        int int47 = openMapRealVector37.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean51 = openMapRealVector50.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector37.append((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector59.sparseIterator();
        openMapRealVector50.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector59);
        double double63 = openMapRealVector50.getLInfNorm();
        double double64 = openMapRealVector28.getDistance(openMapRealVector50);
        double[] doubleArray65 = openMapRealVector50.toArray();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 99 + "'", int47 == 99);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double[] doubleArray25 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector20.setSubVector(99, doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25, (double) 'a');
        int int29 = openMapRealVector28.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        boolean boolean34 = openMapRealVector33.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector33.mapAddToSelf((double) 197);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector33.mapMultiplyToSelf((double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector28.ebeDivide(realVector38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 1");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        boolean boolean16 = openMapRealVector9.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        double double31 = openMapRealVector22.dotProduct(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor39 = openMapRealVector37.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector22.append(openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector9.add(openMapRealVector37);
        org.apache.commons.math.linear.RealVector realVector43 = null;
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector37.setSubVector((int) 'a', realVector43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(entryItor39);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.unitVector();
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector49.mapMultiplyToSelf((double) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        double double55 = openMapRealVector49.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        int int56 = openMapRealVector54.getMinIndex();
        double double57 = openMapRealVector54.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector54.getSubVector(2, 2);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector60.mapToSelf(univariateRealFunction61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 99 + "'", int56 == 99);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector60);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(96, (double) (byte) 0);
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapMultiply((double) 0.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.append((double) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        double double32 = openMapRealVector23.dotProduct(openMapRealVector27);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor33 = openMapRealVector27.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector16.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector27.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector10.append((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        double double39 = openMapRealVector2.getL1Distance(openMapRealVector38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector2.getSubVector((int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (-1)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.append((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = openMapRealVector9.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        openMapRealVector13.set((double) 10L);
        double double21 = openMapRealVector13.getMinValue();
        double double23 = openMapRealVector13.getEntry((int) (byte) 0);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector9.mapAddToSelf((double) ' ');
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector9.mapDivide((double) 0.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector9.map(univariateRealFunction20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean3 = openMapRealVector2.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        int int14 = openMapRealVector9.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector9.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        double double31 = openMapRealVector22.dotProduct(openMapRealVector26);
        int int32 = openMapRealVector22.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor33 = openMapRealVector22.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        int int41 = openMapRealVector36.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector36.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector46.projection((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor51 = openMapRealVector49.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector22.add((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        double double54 = openMapRealVector43.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector16.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        double[] doubleArray56 = openMapRealVector55.getData();
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector2.combineToSelf((double) 1, (double) 10L, doubleArray56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56, 9807.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector60.sparseIterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 99 + "'", int14 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 99 + "'", int32 == 99);
        org.junit.Assert.assertNotNull(entryItor33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 99 + "'", int41 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(entryItor51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(entryItor61);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) -1, (int) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAddToSelf(0.0d);
        int int5 = openMapRealVector2.getMaxIndex();
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.setEntry((int) (byte) 100, (double) 101);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (100)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 197);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(96, (double) (byte) 0);
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapMultiply((double) 0.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.append((double) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector10.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector10.append((double) 0.0f);
        double double15 = openMapRealVector10.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector10.getSubVector(1, 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        double double33 = openMapRealVector24.dotProduct(openMapRealVector28);
        int int34 = openMapRealVector24.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean38 = openMapRealVector37.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector24.append((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        double double54 = openMapRealVector45.dotProduct(openMapRealVector49);
        int int55 = openMapRealVector45.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector45.sparseIterator();
        double double57 = openMapRealVector24.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        int int65 = openMapRealVector60.getMaxIndex();
        double double66 = openMapRealVector45.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector76.projection((org.apache.commons.math.linear.RealVector) openMapRealVector79);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector87 = openMapRealVector83.projection((org.apache.commons.math.linear.RealVector) openMapRealVector86);
        double double88 = openMapRealVector79.dotProduct(openMapRealVector83);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor89 = openMapRealVector83.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector72.append((org.apache.commons.math.linear.RealVector) openMapRealVector83);
        double[] doubleArray91 = openMapRealVector90.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = openMapRealVector45.append(doubleArray91);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector93 = openMapRealVector45.copy();
        double[] doubleArray94 = openMapRealVector93.getData();
        double double95 = openMapRealVector10.getLInfDistance(doubleArray94);
        org.apache.commons.math.linear.RealVector realVector96 = openMapRealVector2.add(doubleArray94);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 99 + "'", int55 == 99);
        org.junit.Assert.assertNotNull(entryItor56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 99 + "'", int65 == 99);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor89);
        org.junit.Assert.assertNotNull(openMapRealVector90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector92);
        org.junit.Assert.assertNotNull(openMapRealVector93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(realVector96);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        double[] doubleArray7 = openMapRealVector5.toArray();
        double[] doubleArray8 = openMapRealVector5.toArray();
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector5.mapSubtract((-1.0d));
        java.lang.Class<?> wildcardClass11 = realVector10.getClass();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAdd((double) 100.0f);
        openMapRealVector4.unitize();
        org.junit.Assert.assertNotNull(openMapRealVector4);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector20.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.mapAdd((double) 10L);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector20.mapDivide((double) 103);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector35.sparseIterator();
        boolean boolean38 = openMapRealVector35.isNaN();
        double[] doubleArray39 = openMapRealVector35.toArray();
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector20.add(doubleArray39);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.append((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = openMapRealVector9.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        double[] doubleArray19 = openMapRealVector13.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        int int29 = openMapRealVector24.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector47.projection((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor52 = openMapRealVector50.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector35.append(openMapRealVector50);
        org.apache.commons.math.linear.RealMatrix realMatrix54 = openMapRealVector24.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        boolean boolean55 = openMapRealVector50.isNaN();
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector13.combine((-1.0d), (-1.0E12d), (org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 99 + "'", int29 == 99);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(entryItor52);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector3.append((double) 0.0f);
        double double8 = openMapRealVector3.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector3.getSubVector(1, 99);
        int int12 = openMapRealVector11.getMaxIndex();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = openMapRealVector11.getEntry(196);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (196)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 98 + "'", int12 == 98);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector18.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector27.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor31 = openMapRealVector30.iterator();
        double double32 = openMapRealVector1.getDistance(openMapRealVector30);
        double double33 = openMapRealVector1.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector1.mapAddToSelf((double) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        int int43 = openMapRealVector38.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector38.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor53 = openMapRealVector51.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector35.append(realVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector35);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(entryItor31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(entryItor53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(openMapRealVector55);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector84.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector69.append(openMapRealVector84);
        double double88 = openMapRealVector44.getL1Distance(openMapRealVector69);
        double double89 = openMapRealVector69.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector69.mapAddToSelf((double) (short) 10);
        org.apache.commons.math.linear.RealVector realVector93 = openMapRealVector69.mapSubtract(0.0d);
        org.apache.commons.math.linear.RealVector realVector95 = openMapRealVector69.mapSubtractToSelf(1320.0d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(entryItor86);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertNotNull(realVector93);
        org.junit.Assert.assertNotNull(realVector95);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        boolean boolean16 = openMapRealVector9.isInfinite();
        int int17 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector9.mapMultiply((double) 0.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector9.map(univariateRealFunction20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector14.getSubVector((int) (short) 0, 99);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (98)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        boolean boolean8 = openMapRealVector7.isNaN();
        double[] doubleArray9 = openMapRealVector7.getData();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 0.0, 100.0]");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        double double31 = openMapRealVector22.dotProduct(openMapRealVector26);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor32 = openMapRealVector26.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector15.append((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        double double48 = openMapRealVector39.dotProduct(openMapRealVector43);
        int int49 = openMapRealVector39.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor50 = openMapRealVector39.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        int int58 = openMapRealVector53.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector53.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor68 = openMapRealVector66.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector39.add((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double71 = openMapRealVector60.getSparsity();
        double double72 = openMapRealVector15.dotProduct(openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector9.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(10);
        double double76 = openMapRealVector15.getL1Distance(openMapRealVector75);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean80 = openMapRealVector79.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector79.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector75.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector81);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 10 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor32);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 99 + "'", int49 == 99);
        org.junit.Assert.assertNotNull(entryItor50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(entryItor68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(openMapRealVector81);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(197, 97, (double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector3.getSubVector(97, 196);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (292)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector20.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double double40 = openMapRealVector31.dotProduct(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor48 = openMapRealVector46.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector31.append(openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector20.append((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector66 = openMapRealVector62.projection((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        double double74 = openMapRealVector65.dotProduct(openMapRealVector69);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor75 = openMapRealVector69.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = openMapRealVector58.append((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        double[] doubleArray77 = openMapRealVector76.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector76.copy();
        double[] doubleArray79 = openMapRealVector78.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector20.combineToSelf(100.00999950005d, 101.0d, doubleArray79);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 200");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(entryItor48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor75);
        org.junit.Assert.assertNotNull(openMapRealVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double18 = openMapRealVector9.dotProduct(openMapRealVector13);
        int int19 = openMapRealVector9.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean23 = openMapRealVector22.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        double double39 = openMapRealVector30.dotProduct(openMapRealVector34);
        int int40 = openMapRealVector30.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector30.sparseIterator();
        double double42 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        int int50 = openMapRealVector45.getMaxIndex();
        double double51 = openMapRealVector30.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        double double52 = openMapRealVector3.getDistance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector3.append(320.0d);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 99 + "'", int50 == 99);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector54);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector49.append(openMapRealVector51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) -1, (int) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector((int) '#');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector4.append(0.07071067811865475d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector2.add(openMapRealVector6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: -1 != 36");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector6);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector27.sparseIterator();
        openMapRealVector18.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double double32 = openMapRealVector18.getEntry(2);
        double double33 = openMapRealVector18.getSparsity();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector3.mapDivideToSelf((double) '#');
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector1.append((double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.mapAddToSelf((double) 0L);
        boolean boolean6 = openMapRealVector5.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector5);
        double[] doubleArray8 = openMapRealVector7.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = openMapRealVector7.append(9807.0d);
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector10);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 99);
        double double13 = openMapRealVector12.getSparsity();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.3333333333333333d + "'", double13 == 0.3333333333333333d);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean22 = openMapRealVector21.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector8.append((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        int int39 = openMapRealVector29.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector29.sparseIterator();
        double double41 = openMapRealVector8.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        double double63 = openMapRealVector54.dotProduct(openMapRealVector58);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor64 = openMapRealVector58.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector47.append((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector29.add(openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector76.projection((org.apache.commons.math.linear.RealVector) openMapRealVector79);
        double double81 = openMapRealVector72.dotProduct(openMapRealVector76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector88 = openMapRealVector84.projection((org.apache.commons.math.linear.RealVector) openMapRealVector87);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor89 = openMapRealVector87.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector72.append(openMapRealVector87);
        double double91 = openMapRealVector47.getL1Distance(openMapRealVector72);
        org.apache.commons.math.linear.RealMatrix realMatrix92 = openMapRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        org.apache.commons.math.linear.RealVector realVector94 = openMapRealVector72.mapSubtractToSelf((double) 0);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor64);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(entryItor89);
        org.junit.Assert.assertNotNull(openMapRealVector90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertNotNull(realVector94);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.mapMultiply(100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector9.append(openMapRealVector23);
        double double29 = openMapRealVector28.getSparsity();
        double double30 = openMapRealVector28.getMinValue();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector5.mapAdd((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        double double41 = openMapRealVector32.dotProduct(openMapRealVector36);
        int int42 = openMapRealVector32.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor43 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector46.projection((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        int int51 = openMapRealVector46.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector46.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector59.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector32.add((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        double double64 = openMapRealVector53.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector26.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        openMapRealVector53.setEntry((int) 'a', (double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector5.append(openMapRealVector53);
        java.lang.Class<?> wildcardClass70 = openMapRealVector5.getClass();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 99 + "'", int42 == 99);
        org.junit.Assert.assertNotNull(entryItor43);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 99 + "'", int51 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double3 = openMapRealVector1.getEntry((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (10)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        double double10 = openMapRealVector9.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        int int26 = openMapRealVector16.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean30 = openMapRealVector29.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector16.append((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        double[] doubleArray36 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector31.setSubVector(99, doubleArray36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36, (double) 'a');
        double double40 = openMapRealVector39.getNorm();
        double[] doubleArray41 = openMapRealVector39.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = openMapRealVector9.getLInfDistance((org.apache.commons.math.linear.RealVector) openMapRealVector42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 99 + "'", int26 == 99);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 0.0]");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.unitVector();
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector49.mapMultiplyToSelf((double) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        double double55 = openMapRealVector49.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        int int56 = openMapRealVector54.getMinIndex();
        double double57 = openMapRealVector54.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector54.getSubVector(2, 2);
        double[] doubleArray61 = openMapRealVector60.toArray();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 99 + "'", int56 == 99);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0]");
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.RealVector realVector15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector14.add(realVector15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector26.add(realVector70);
        int int72 = openMapRealVector26.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector26.append((double) 0L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector74);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector74.mapDivideToSelf(14.142135623730951d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(realVector77);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor10 = openMapRealVector2.sparseIterator();
        double double11 = openMapRealVector2.getLInfNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.append(1.0E-12d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double28 = openMapRealVector19.dotProduct(openMapRealVector23);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector23.iterator();
        boolean boolean30 = openMapRealVector23.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        double double45 = openMapRealVector36.dotProduct(openMapRealVector40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor53 = openMapRealVector51.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector36.append(openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector23.add(openMapRealVector51);
        double[] doubleArray60 = new double[] { (short) 1, 100.0f, 99, (-1) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector55.append(doubleArray60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray60, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector2.add(doubleArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(entryItor10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(entryItor53);
        org.junit.Assert.assertNotNull(openMapRealVector54);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 100.0, 99.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector61);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.unitVector();
        double double50 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector36.mapSubtractToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector36.append((double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double double69 = openMapRealVector60.dotProduct(openMapRealVector64);
        int int70 = openMapRealVector60.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean74 = openMapRealVector73.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector60.append((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = openMapRealVector60.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector54.append((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        boolean boolean78 = openMapRealVector76.isInfinite();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(openMapRealVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 99 + "'", int70 == 99);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(openMapRealVector76);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(3, 197, (double) ' ');
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.copy();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        int int8 = openMapRealVector7.getMinIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean29 = openMapRealVector28.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector15.append((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector33.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector33.mapDivide(0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector28.append(openMapRealVector33);
        openMapRealVector37.setEntry((int) (short) 10, (double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector9.add((org.apache.commons.math.linear.RealVector) openMapRealVector37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 4 != 197");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(openMapRealVector37);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        double double2 = openMapRealVector1.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector1.mapMultiply((double) 300);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(realVector4);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(96, (double) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean22 = openMapRealVector21.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector8.append((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        int int39 = openMapRealVector29.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector29.sparseIterator();
        double double41 = openMapRealVector8.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        double double63 = openMapRealVector54.dotProduct(openMapRealVector58);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor64 = openMapRealVector58.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector47.append((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector29.add(openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector76.projection((org.apache.commons.math.linear.RealVector) openMapRealVector79);
        double double81 = openMapRealVector72.dotProduct(openMapRealVector76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector88 = openMapRealVector84.projection((org.apache.commons.math.linear.RealVector) openMapRealVector87);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor89 = openMapRealVector87.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector72.append(openMapRealVector87);
        double double91 = openMapRealVector47.getL1Distance(openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = openMapRealVector72.copy();
        double[] doubleArray93 = openMapRealVector92.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix94 = openMapRealVector2.outerProduct(doubleArray93);
        boolean boolean95 = openMapRealVector2.isNaN();
        int int96 = openMapRealVector2.getMaxIndex();
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor64);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(entryItor89);
        org.junit.Assert.assertNotNull(openMapRealVector90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 95 + "'", int96 == 95);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        double double22 = openMapRealVector13.dotProduct(openMapRealVector17);
        int int23 = openMapRealVector13.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean27 = openMapRealVector26.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.append((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        double double43 = openMapRealVector34.dotProduct(openMapRealVector38);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector38.iterator();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray47, (double) (byte) 1);
        double[] doubleArray55 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = openMapRealVector49.outerProduct(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector38.add(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector28.add(doubleArray55);
        boolean boolean59 = openMapRealVector28.isInfinite();
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector28.mapSubtractToSelf((double) (byte) 100);
        double[] doubleArray62 = openMapRealVector28.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector7.ebeDivide(doubleArray62);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 197 != 200");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 99 + "'", int23 == 99);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double double29 = openMapRealVector20.dotProduct(openMapRealVector24);
        int int30 = openMapRealVector20.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean34 = openMapRealVector33.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector20.append((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        double double50 = openMapRealVector41.dotProduct(openMapRealVector45);
        int int51 = openMapRealVector41.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor52 = openMapRealVector41.sparseIterator();
        double double53 = openMapRealVector20.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector70.projection((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        double double75 = openMapRealVector66.dotProduct(openMapRealVector70);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor76 = openMapRealVector70.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector59.append((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector41.add(openMapRealVector59);
        double double79 = openMapRealVector5.getL1Distance(openMapRealVector59);
        double double80 = openMapRealVector5.getL1Norm();
        int int81 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector82.getSubVector((int) (short) 1, 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector82.iterator();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 99 + "'", int30 == 99);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 99 + "'", int51 == 99);
        org.junit.Assert.assertNotNull(entryItor52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor76);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 99 + "'", int81 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertNotNull(entryItor86);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector84.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector69.append(openMapRealVector84);
        double double88 = openMapRealVector44.getL1Distance(openMapRealVector69);
        int int89 = openMapRealVector69.getDimension();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(entryItor86);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor3 = openMapRealVector2.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        int int11 = openMapRealVector6.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector6.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double28 = openMapRealVector19.dotProduct(openMapRealVector23);
        int int29 = openMapRealVector19.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector19.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        int int38 = openMapRealVector33.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector33.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor48 = openMapRealVector46.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector19.add((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        double double51 = openMapRealVector40.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector13.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        openMapRealVector40.setEntry((int) 'a', (double) (byte) -1);
        double double56 = openMapRealVector40.getLInfNorm();
        int int57 = openMapRealVector40.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector58.copy();
        double double60 = openMapRealVector58.getSparsity();
        org.junit.Assert.assertNotNull(entryItor3);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 99 + "'", int29 == 99);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 99 + "'", int38 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(entryItor48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(openMapRealVector58);
        org.junit.Assert.assertNotNull(openMapRealVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.5076142131979695d + "'", double60 == 0.5076142131979695d);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.unitVector();
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector49.mapMultiplyToSelf((double) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        double double55 = openMapRealVector49.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        int int56 = openMapRealVector54.getMinIndex();
        double double57 = openMapRealVector54.getL1Norm();
        double double58 = openMapRealVector54.getLInfNorm();
        double double59 = openMapRealVector54.getMaxValue();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector54.unitVector();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 99 + "'", int56 == 99);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.append((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = openMapRealVector9.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        double[] doubleArray19 = openMapRealVector13.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector20.mapAdd(0.0d);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = openMapRealVector22.getLInfDistance((org.apache.commons.math.linear.RealVector) openMapRealVector30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector84.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector69.append(openMapRealVector84);
        double double88 = openMapRealVector44.getL1Distance(openMapRealVector69);
        double double89 = openMapRealVector69.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector69.mapAddToSelf((double) (short) 10);
        int int92 = openMapRealVector69.getDimension();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(entryItor86);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor39 = openMapRealVector33.iterator();
        boolean boolean40 = openMapRealVector33.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        double double55 = openMapRealVector46.dotProduct(openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor63 = openMapRealVector61.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector46.append(openMapRealVector61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector33.add(openMapRealVector61);
        double double66 = openMapRealVector5.getL1Distance(openMapRealVector61);
        double[] doubleArray67 = openMapRealVector5.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        boolean boolean72 = openMapRealVector5.equals((java.lang.Object) 'a');
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(entryItor63);
        org.junit.Assert.assertNotNull(openMapRealVector64);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.unitVector();
        double double50 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector36.mapSubtractToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector36.append((double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double double69 = openMapRealVector60.dotProduct(openMapRealVector64);
        int int70 = openMapRealVector60.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean74 = openMapRealVector73.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector60.append((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = openMapRealVector60.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector54.append((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor78 = openMapRealVector54.iterator();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(openMapRealVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 99 + "'", int70 == 99);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(openMapRealVector76);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(entryItor78);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(10, (double) '4');
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor3 = openMapRealVector2.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        int int11 = openMapRealVector6.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector6.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double28 = openMapRealVector19.dotProduct(openMapRealVector23);
        int int29 = openMapRealVector19.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector19.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        int int38 = openMapRealVector33.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector33.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor48 = openMapRealVector46.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector19.add((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        double double51 = openMapRealVector40.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector13.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        openMapRealVector40.setEntry((int) 'a', (double) (byte) -1);
        double double56 = openMapRealVector40.getLInfNorm();
        int int57 = openMapRealVector40.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector60.append((double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector62.mapAddToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector66 = openMapRealVector64.mapSubtract((double) 'a');
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.mapSubtract((double) ' ');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector64);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = openMapRealVector2.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 97 != 98");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(entryItor3);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 99 + "'", int29 == 99);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 99 + "'", int38 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(entryItor48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(openMapRealVector58);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector68);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        double double22 = openMapRealVector13.dotProduct(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.projection((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector28.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector13.append(openMapRealVector28);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector28.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector28.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector35.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector3.append(openMapRealVector36);
        double double38 = openMapRealVector3.getNorm();
        boolean boolean39 = openMapRealVector3.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector3.append((double) (byte) 10);
        double[] doubleArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double43 = openMapRealVector41.cosine(doubleArray42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(openMapRealVector41);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        openMapRealVector15.set(0.0d);
        int int21 = openMapRealVector15.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        int int29 = openMapRealVector24.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector24.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        double double46 = openMapRealVector37.dotProduct(openMapRealVector41);
        int int47 = openMapRealVector37.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor48 = openMapRealVector37.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        int int56 = openMapRealVector51.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = openMapRealVector51.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor66 = openMapRealVector64.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector37.add((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double69 = openMapRealVector58.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector31.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        openMapRealVector58.setEntry((int) 'a', (double) (byte) -1);
        double double75 = openMapRealVector58.getEntry((int) (byte) 10);
        double[] doubleArray76 = openMapRealVector58.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector15.ebeMultiply(doubleArray76);
        openMapRealVector15.setEntry(9, 2.0d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 99 + "'", int29 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 99 + "'", int47 == 99);
        org.junit.Assert.assertNotNull(entryItor48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 99 + "'", int56 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(entryItor66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-1.0d) + "'", double75 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector77);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector26.add(realVector70);
        int int72 = openMapRealVector26.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector26.mapAdd((double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector74.copy();
        int int76 = openMapRealVector75.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector75);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) '#');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector5.append((double) 1.0f);
        int int8 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector3.append(openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor32 = openMapRealVector30.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector15.append(openMapRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector30.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector30.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector37.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector5.append(openMapRealVector38);
        double double40 = openMapRealVector5.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        boolean boolean42 = openMapRealVector1.equals((java.lang.Object) openMapRealVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 96 + "'", int8 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(entryItor32);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector27.sparseIterator();
        openMapRealVector18.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double double31 = openMapRealVector18.getLInfNorm();
        double double32 = openMapRealVector18.getMinValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector36.append((double) 1.0f);
        int int39 = openMapRealVector36.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector34.append(openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        double double56 = openMapRealVector47.dotProduct(openMapRealVector51);
        int int57 = openMapRealVector47.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean61 = openMapRealVector60.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector47.append((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector72.projection((org.apache.commons.math.linear.RealVector) openMapRealVector75);
        double double77 = openMapRealVector68.dotProduct(openMapRealVector72);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor78 = openMapRealVector72.iterator();
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray81, (double) (byte) 1);
        double[] doubleArray89 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix90 = openMapRealVector83.outerProduct(doubleArray89);
        org.apache.commons.math.linear.RealVector realVector91 = openMapRealVector72.add(doubleArray89);
        org.apache.commons.math.linear.RealVector realVector92 = openMapRealVector62.add(doubleArray89);
        openMapRealVector40.setSubVector(0, doubleArray89);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector94 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        double double95 = openMapRealVector18.getL1Distance(openMapRealVector94);
        org.apache.commons.math.linear.RealVector realVector96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector97 = openMapRealVector18.ebeDivide(realVector96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 96 + "'", int39 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 99 + "'", int57 == 99);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realVector92);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 113.0d + "'", double95 == 113.0d);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector16.append((double) 99);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector5.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector31.iterator();
        boolean boolean38 = openMapRealVector31.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector59.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append(openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector31.add(openMapRealVector59);
        double[] doubleArray68 = new double[] { (short) 1, 100.0f, 99, (-1) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector63.append(doubleArray68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector5.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector84 = openMapRealVector80.projection((org.apache.commons.math.linear.RealVector) openMapRealVector83);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector91 = openMapRealVector87.projection((org.apache.commons.math.linear.RealVector) openMapRealVector90);
        double double92 = openMapRealVector83.dotProduct(openMapRealVector87);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor93 = openMapRealVector87.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector94 = openMapRealVector76.append((org.apache.commons.math.linear.RealVector) openMapRealVector87);
        double[] doubleArray95 = openMapRealVector94.getData();
        int int96 = openMapRealVector94.getMinIndex();
        // The following exception was thrown during execution in test generation
        try {
            double double97 = openMapRealVector63.getLInfDistance((org.apache.commons.math.linear.RealVector) openMapRealVector94);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 200");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 100.0, 99.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor93);
        org.junit.Assert.assertNotNull(openMapRealVector94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 199 + "'", int96 == 199);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = openMapRealVector10.getL1Distance(openMapRealVector12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (1)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        java.lang.Class<?> wildcardClass13 = openMapRealVector12.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, (double) (byte) 1);
        double[] doubleArray74 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix75 = openMapRealVector68.outerProduct(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector26.add(doubleArray74);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray74, (-1.0d));
        double[] doubleArray79 = openMapRealVector78.toArray();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, -1.0, -1.0, 100.0]");
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100, 0, (double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector7.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.append((double) 0.0f);
        double double12 = openMapRealVector7.getSparsity();
        double double13 = openMapRealVector3.getL1Distance(openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (double) (short) 0);
        int int17 = openMapRealVector16.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        double double32 = openMapRealVector23.dotProduct(openMapRealVector27);
        int int33 = openMapRealVector23.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean37 = openMapRealVector36.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector23.append((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        int int54 = openMapRealVector44.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor55 = openMapRealVector44.sparseIterator();
        double double56 = openMapRealVector23.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        int int64 = openMapRealVector59.getMaxIndex();
        double double65 = openMapRealVector44.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector75.projection((org.apache.commons.math.linear.RealVector) openMapRealVector78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector86 = openMapRealVector82.projection((org.apache.commons.math.linear.RealVector) openMapRealVector85);
        double double87 = openMapRealVector78.dotProduct(openMapRealVector82);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor88 = openMapRealVector82.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector71.append((org.apache.commons.math.linear.RealVector) openMapRealVector82);
        double[] doubleArray90 = openMapRealVector89.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector44.append(doubleArray90);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = openMapRealVector44.copy();
        double double93 = openMapRealVector16.getDistance(openMapRealVector44);
        double double94 = openMapRealVector16.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector95 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector97 = openMapRealVector95.append(openMapRealVector96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 99 + "'", int33 == 99);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
        org.junit.Assert.assertNotNull(entryItor55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 99 + "'", int64 == 99);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor88);
        org.junit.Assert.assertNotNull(openMapRealVector89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertNotNull(openMapRealVector92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector95);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        int int10 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector5.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector15.projection((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor20 = openMapRealVector18.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector12.mapMultiply(100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector12.append(openMapRealVector26);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector26.mapSubtractToSelf(Double.NaN);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector2.add(realVector33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 0 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 99 + "'", int10 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(entryItor20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector7.mapAddToSelf((double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector7.setEntry((int) (byte) -1, 0.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (-1)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(openMapRealVector9);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector26.add(realVector70);
        int int72 = openMapRealVector26.getDimension();
        double double73 = openMapRealVector26.getMinValue();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector27.sparseIterator();
        openMapRealVector18.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector27);
        double double31 = openMapRealVector18.getLInfNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        double double48 = openMapRealVector39.dotProduct(openMapRealVector43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector54.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector39.append(openMapRealVector54);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector54.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector54.mapAdd((double) 10L);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector18.combine((double) (-1.0f), (double) (-1.0f), (org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector72.projection((org.apache.commons.math.linear.RealVector) openMapRealVector75);
        double double77 = openMapRealVector68.dotProduct(openMapRealVector72);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor78 = openMapRealVector72.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector72);
        double double80 = openMapRealVector72.getMinValue();
        double[] doubleArray81 = openMapRealVector72.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray81);
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector18.add(doubleArray81);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(entryItor56);
        org.junit.Assert.assertNotNull(openMapRealVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(openMapRealVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor78);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector83);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector26.mapMultiply((double) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector26.mapAddToSelf((double) 200);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        double double57 = openMapRealVector48.dotProduct(openMapRealVector52);
        int int58 = openMapRealVector48.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean62 = openMapRealVector61.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector48.append((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        int int79 = openMapRealVector69.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor80 = openMapRealVector69.sparseIterator();
        double double81 = openMapRealVector48.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector69.mapMultiply((double) 100);
        double[] doubleArray84 = openMapRealVector69.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector42.ebeDivide(doubleArray84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector85.sparseIterator();
        boolean boolean87 = openMapRealVector85.isNaN();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor88 = openMapRealVector85.sparseIterator();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 99 + "'", int79 == 99);
        org.junit.Assert.assertNotNull(entryItor80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector85);
        org.junit.Assert.assertNotNull(entryItor86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(entryItor88);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor36 = openMapRealVector30.iterator();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray39, (double) (byte) 1);
        double[] doubleArray47 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix48 = openMapRealVector41.outerProduct(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector30.add(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector20.add(doubleArray47);
        boolean boolean51 = openMapRealVector20.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        double double66 = openMapRealVector57.dotProduct(openMapRealVector61);
        int int67 = openMapRealVector57.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean71 = openMapRealVector70.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector57.append((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector57.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector20.append(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        boolean boolean76 = openMapRealVector75.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector75.append((double) 95);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 99 + "'", int67 == 99);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(openMapRealVector78);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        int int9 = openMapRealVector4.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector4.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        double double26 = openMapRealVector17.dotProduct(openMapRealVector21);
        int int27 = openMapRealVector17.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor28 = openMapRealVector17.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        int int36 = openMapRealVector31.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector31.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor46 = openMapRealVector44.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector17.add((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double double49 = openMapRealVector38.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector11.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double[] doubleArray51 = openMapRealVector50.getData();
        double double52 = openMapRealVector1.getDistance(openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector66 = openMapRealVector62.projection((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        double double67 = openMapRealVector58.dotProduct(openMapRealVector62);
        int int68 = openMapRealVector58.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean72 = openMapRealVector71.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector58.append((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector58.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector50.append((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 99 + "'", int9 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertNotNull(entryItor28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(entryItor46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 99 + "'", int68 == 99);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(openMapRealVector75);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector18.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector27.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor31 = openMapRealVector30.iterator();
        double double32 = openMapRealVector1.getDistance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector1.mapAddToSelf(0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector1.append((double) (-1));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector36.mapToSelf(univariateRealFunction37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(entryItor31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) -1, 100.00999950005d);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector1.append((double) 1.0f);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector1.mapMultiply((double) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append((-1.0E12d));
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector4.mapAdd((-1.0d));
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector6.mapSubtract((double) 10.0f);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector13.mapAdd((-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.mapAdd((double) 100);
        openMapRealVector17.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector6.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        double double20 = openMapRealVector19.getNorm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 110.90761932797945d + "'", double20 == 110.90761932797945d);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector5.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector31.iterator();
        boolean boolean38 = openMapRealVector31.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector59.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append(openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector31.add(openMapRealVector59);
        double[] doubleArray68 = new double[] { (short) 1, 100.0f, 99, (-1) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector63.append(doubleArray68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector5.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector63.mapMultiply(0.0d);
        double double73 = openMapRealVector63.getMaxValue();
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector63.mapMultiplyToSelf((-0.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector63.mapAdd((double) 3);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 100.0, 99.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(openMapRealVector77);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        openMapRealVector36.setEntry((int) 'a', (double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        double double66 = openMapRealVector57.dotProduct(openMapRealVector61);
        int int67 = openMapRealVector57.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean71 = openMapRealVector70.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector57.append((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector76.projection((org.apache.commons.math.linear.RealVector) openMapRealVector79);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor81 = openMapRealVector79.sparseIterator();
        openMapRealVector70.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector79);
        org.apache.commons.math.linear.RealVector realVector84 = openMapRealVector70.mapSubtractToSelf(Double.NaN);
        org.apache.commons.math.linear.RealMatrix realMatrix85 = openMapRealVector36.outerProduct(realVector84);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 99 + "'", int67 == 99);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(entryItor81);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realMatrix85);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 10.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector18.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector27.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor31 = openMapRealVector30.iterator();
        double double32 = openMapRealVector1.getDistance(openMapRealVector30);
        double double33 = openMapRealVector1.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector1.mapAddToSelf((double) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        int int43 = openMapRealVector38.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector38.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor53 = openMapRealVector51.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector35.append(realVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        double double70 = openMapRealVector61.dotProduct(openMapRealVector65);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor71 = openMapRealVector65.iterator();
        boolean boolean72 = openMapRealVector65.isInfinite();
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector55.mapSubtractToSelf((double) (short) 1);
        int int76 = openMapRealVector55.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector55.append((double) 2);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(entryItor31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(entryItor53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(openMapRealVector78);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        double[] doubleArray10 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = openMapRealVector4.outerProduct(doubleArray10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector13.copy();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19, (double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19, (double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19, 0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19, (double) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = openMapRealVector13.getDistance(openMapRealVector30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (4)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray19);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector4.mapAdd((-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) 100);
        int int9 = openMapRealVector8.getMinIndex();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(10, (int) '4');
        double[] doubleArray17 = openMapRealVector16.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector13.append(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector18);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100, 0, (double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector7.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.append((double) 0.0f);
        double double12 = openMapRealVector7.getSparsity();
        double double13 = openMapRealVector3.getL1Distance(openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (double) (short) 0);
        int int17 = openMapRealVector16.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        double double32 = openMapRealVector23.dotProduct(openMapRealVector27);
        int int33 = openMapRealVector23.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean37 = openMapRealVector36.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector23.append((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        int int54 = openMapRealVector44.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor55 = openMapRealVector44.sparseIterator();
        double double56 = openMapRealVector23.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        int int64 = openMapRealVector59.getMaxIndex();
        double double65 = openMapRealVector44.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector75.projection((org.apache.commons.math.linear.RealVector) openMapRealVector78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector86 = openMapRealVector82.projection((org.apache.commons.math.linear.RealVector) openMapRealVector85);
        double double87 = openMapRealVector78.dotProduct(openMapRealVector82);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor88 = openMapRealVector82.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector71.append((org.apache.commons.math.linear.RealVector) openMapRealVector82);
        double[] doubleArray90 = openMapRealVector89.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector44.append(doubleArray90);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = openMapRealVector44.copy();
        double double93 = openMapRealVector16.getDistance(openMapRealVector44);
        double double94 = openMapRealVector16.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector95 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double97 = openMapRealVector95.getEntry((int) '4');
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 99 + "'", int33 == 99);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
        org.junit.Assert.assertNotNull(entryItor55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 99 + "'", int64 == 99);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor88);
        org.junit.Assert.assertNotNull(openMapRealVector89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertNotNull(openMapRealVector92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector95);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector7.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        double double26 = openMapRealVector17.dotProduct(openMapRealVector21);
        int int27 = openMapRealVector17.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean31 = openMapRealVector30.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector17.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        double[] doubleArray37 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector32.setSubVector(99, doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector7.combineToSelf((double) 103, (double) (-1L), doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(realVector39);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        boolean boolean15 = openMapRealVector9.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double[] doubleArray23 = openMapRealVector21.getData();
        double double24 = openMapRealVector9.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        int int25 = openMapRealVector21.getMinIndex();
        openMapRealVector21.setEntry((int) ' ', (double) 99);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        int int24 = openMapRealVector14.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean28 = openMapRealVector27.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector14.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor45 = openMapRealVector39.iterator();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48, (double) (byte) 1);
        double[] doubleArray56 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix57 = openMapRealVector50.outerProduct(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector39.add(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector29.add(doubleArray56);
        openMapRealVector7.setSubVector(0, doubleArray56);
        openMapRealVector7.set((double) 0L);
        double double64 = openMapRealVector7.getEntry((int) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector7.copy();
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector65);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double[] doubleArray25 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector20.setSubVector(99, doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        int int36 = openMapRealVector31.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector31.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        int int54 = openMapRealVector44.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor55 = openMapRealVector44.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        int int63 = openMapRealVector58.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector58.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor73 = openMapRealVector71.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector44.add((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        double double76 = openMapRealVector65.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector38.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        double[] doubleArray78 = openMapRealVector77.getData();
        double[] doubleArray79 = openMapRealVector77.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector88 = openMapRealVector84.projection((org.apache.commons.math.linear.RealVector) openMapRealVector87);
        int int89 = openMapRealVector84.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector84.mapAddToSelf((double) (byte) -1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor92 = openMapRealVector84.sparseIterator();
        double double93 = openMapRealVector84.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector94 = openMapRealVector77.combineToSelf((double) 100.0f, (double) 2, (org.apache.commons.math.linear.RealVector) openMapRealVector84);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector95 = openMapRealVector28.subtract(realVector94);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
        org.junit.Assert.assertNotNull(entryItor55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 99 + "'", int63 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(entryItor73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 99 + "'", int89 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertNotNull(entryItor92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
        org.junit.Assert.assertNotNull(realVector94);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 10, (int) (short) 1);
        int int3 = openMapRealVector2.getDimension();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(99, 103, 0.009900990099009901d);
        int int4 = openMapRealVector3.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector7.projection((org.apache.commons.math.linear.RealVector) openMapRealVector10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        double double26 = openMapRealVector17.dotProduct(openMapRealVector21);
        int int27 = openMapRealVector17.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor28 = openMapRealVector17.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        int int36 = openMapRealVector31.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector31.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor46 = openMapRealVector44.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector17.add((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double double49 = openMapRealVector38.getSparsity();
        double double50 = openMapRealVector38.getMaxValue();
        int int51 = openMapRealVector38.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector7.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector3.add((org.apache.commons.math.linear.RealVector) openMapRealVector53);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 99 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 99 + "'", int4 == 99);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertNotNull(entryItor28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(entryItor46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 99 + "'", int51 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector52);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        boolean boolean16 = openMapRealVector5.isNaN();
        double double17 = openMapRealVector5.getL1Norm();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor18 = openMapRealVector5.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector21.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        int int26 = openMapRealVector21.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector21.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        double double43 = openMapRealVector34.dotProduct(openMapRealVector38);
        int int44 = openMapRealVector34.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor45 = openMapRealVector34.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        int int53 = openMapRealVector48.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector48.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor63 = openMapRealVector61.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector34.add((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        double double66 = openMapRealVector55.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector28.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector55.unitVector();
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector68.mapMultiplyToSelf((double) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        double double74 = openMapRealVector68.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        int int75 = openMapRealVector73.getMinIndex();
        double double76 = openMapRealVector73.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = openMapRealVector73.getSubVector(2, 2);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor18);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 99 + "'", int26 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
        org.junit.Assert.assertNotNull(entryItor45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 99 + "'", int53 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(entryItor63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector67);
        org.junit.Assert.assertNotNull(openMapRealVector68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 99 + "'", int75 == 99);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector79);
        org.junit.Assert.assertNotNull(realVector80);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        boolean boolean24 = openMapRealVector23.isNaN();
        openMapRealVector23.set((double) 97);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, (int) (byte) -1, (double) 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double18 = openMapRealVector9.dotProduct(openMapRealVector13);
        int int19 = openMapRealVector9.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean23 = openMapRealVector22.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        double double39 = openMapRealVector30.dotProduct(openMapRealVector34);
        int int40 = openMapRealVector30.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector30.sparseIterator();
        double double42 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector30.mapMultiply((double) 100);
        double[] doubleArray45 = openMapRealVector30.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector3.projection(doubleArray45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45, (double) 200);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector48);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector5.copy();
        double double22 = openMapRealVector5.getLInfNorm();
        double double23 = openMapRealVector5.getMaxValue();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        double double31 = openMapRealVector22.dotProduct(openMapRealVector26);
        int int32 = openMapRealVector22.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean36 = openMapRealVector35.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector22.append((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector47.projection((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        double double52 = openMapRealVector43.dotProduct(openMapRealVector47);
        int int53 = openMapRealVector43.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor54 = openMapRealVector43.sparseIterator();
        double double55 = openMapRealVector22.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        int int63 = openMapRealVector58.getMaxIndex();
        double double64 = openMapRealVector43.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        int int65 = openMapRealVector58.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector58.mapDivide((double) 10.0f);
        double[] doubleArray68 = openMapRealVector58.toArray();
        org.apache.commons.math.linear.RealMatrix realMatrix69 = openMapRealVector5.outerProduct(doubleArray68);
        double double70 = openMapRealVector5.getMaxValue();
        double double71 = openMapRealVector5.getNorm();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 99 + "'", int32 == 99);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 99 + "'", int53 == 99);
        org.junit.Assert.assertNotNull(entryItor54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 99 + "'", int63 == 99);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 99 + "'", int65 == 99);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        double double10 = openMapRealVector9.getL1Norm();
        double double11 = openMapRealVector9.getMinValue();
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.mapMultiply(0.0d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double78 = openMapRealVector69.dotProduct(openMapRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector81.projection((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = openMapRealVector84.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector69.append(openMapRealVector84);
        double double88 = openMapRealVector44.getL1Distance(openMapRealVector69);
        double double89 = openMapRealVector69.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector91 = openMapRealVector69.mapAddToSelf((double) (short) 10);
        double double92 = openMapRealVector69.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector93 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector69);
        double[] doubleArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector95 = openMapRealVector69.append(doubleArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(entryItor86);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 10.0d + "'", double92 == 10.0d);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(95, 10.0d);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        int int4 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector7.projection((org.apache.commons.math.linear.RealVector) openMapRealVector10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        double double19 = openMapRealVector10.dotProduct(openMapRealVector14);
        int int20 = openMapRealVector10.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        int int45 = openMapRealVector40.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector40.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor55 = openMapRealVector53.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector47.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector26.add((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        double double58 = openMapRealVector47.getSparsity();
        double double59 = openMapRealVector47.getMaxValue();
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector10.add((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        double[] doubleArray68 = openMapRealVector66.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector10.ebeDivide(doubleArray68);
        double double71 = openMapRealVector3.getDistance(openMapRealVector70);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 99 + "'", int4 == 99);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 99 + "'", int20 == 99);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 99 + "'", int45 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(entryItor55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, (double) 1.0f);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 197);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 0.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean40 = openMapRealVector39.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector26.append((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        double double56 = openMapRealVector47.dotProduct(openMapRealVector51);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor57 = openMapRealVector51.iterator();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray60, (double) (byte) 1);
        double[] doubleArray68 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix69 = openMapRealVector62.outerProduct(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector51.add(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector41.add(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = openMapRealVector20.getDistance(doubleArray68);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 200 != 5");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        int int18 = openMapRealVector8.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean22 = openMapRealVector21.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector8.append((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        int int39 = openMapRealVector29.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector29.sparseIterator();
        double double41 = openMapRealVector8.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector44.projection((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector51.projection((org.apache.commons.math.linear.RealVector) openMapRealVector54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector58.projection((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        double double63 = openMapRealVector54.dotProduct(openMapRealVector58);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor64 = openMapRealVector58.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector47.append((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector29.add(openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector76.projection((org.apache.commons.math.linear.RealVector) openMapRealVector79);
        double double81 = openMapRealVector72.dotProduct(openMapRealVector76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector88 = openMapRealVector84.projection((org.apache.commons.math.linear.RealVector) openMapRealVector87);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor89 = openMapRealVector87.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector72.append(openMapRealVector87);
        double double91 = openMapRealVector47.getL1Distance(openMapRealVector72);
        org.apache.commons.math.linear.RealMatrix realMatrix92 = openMapRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector94 = openMapRealVector2.mapAddToSelf((double) 1);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor64);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(entryItor89);
        org.junit.Assert.assertNotNull(openMapRealVector90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertNotNull(openMapRealVector94);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double37 = openMapRealVector5.getL1Norm();
        double[] doubleArray38 = openMapRealVector5.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        double double53 = openMapRealVector44.dotProduct(openMapRealVector48);
        int int54 = openMapRealVector44.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean58 = openMapRealVector57.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        boolean boolean60 = openMapRealVector5.equals((java.lang.Object) openMapRealVector57);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector57.mapSubtractToSelf((double) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector57.mapAdd(1000.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) 10);
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector67.mapDivide((double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix70 = openMapRealVector64.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        int int71 = openMapRealVector67.getMaxIndex();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(openMapRealVector59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(openMapRealVector64);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 96 + "'", int71 == 96);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAddToSelf((double) (-1.0f));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector7.projection((org.apache.commons.math.linear.RealVector) openMapRealVector10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        double double19 = openMapRealVector10.dotProduct(openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor27 = openMapRealVector25.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector10.append(openMapRealVector25);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector25.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        int int38 = openMapRealVector33.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector33.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector25.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double42 = openMapRealVector41.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector46.projection((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        int int51 = openMapRealVector46.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector46.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector59.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        double double64 = openMapRealVector59.getLInfNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector41.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector65);
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(entryItor27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 99 + "'", int38 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 99 + "'", int51 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector65);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        boolean boolean16 = openMapRealVector9.isInfinite();
        double[] doubleArray22 = new double[] { 10, (-1.0d), 2, (short) 100, (byte) 10 };
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector9.add(doubleArray22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double38 = openMapRealVector29.dotProduct(openMapRealVector33);
        int int39 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean43 = openMapRealVector42.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector29.append((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector29.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        boolean boolean62 = openMapRealVector55.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector72.projection((org.apache.commons.math.linear.RealVector) openMapRealVector75);
        double double77 = openMapRealVector68.dotProduct(openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector84 = openMapRealVector80.projection((org.apache.commons.math.linear.RealVector) openMapRealVector83);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor85 = openMapRealVector83.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = openMapRealVector68.append(openMapRealVector83);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector55.add(openMapRealVector83);
        double[] doubleArray92 = new double[] { (short) 1, 100.0f, 99, (-1) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector93 = openMapRealVector87.append(doubleArray92);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector94 = openMapRealVector29.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector87);
        double double95 = openMapRealVector9.getDistance(openMapRealVector29);
        double double96 = openMapRealVector29.getSparsity();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 2.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(openMapRealVector44);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(entryItor85);
        org.junit.Assert.assertNotNull(openMapRealVector86);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, 100.0, 99.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector93);
        org.junit.Assert.assertNotNull(openMapRealVector94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector4.projection((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor24 = openMapRealVector18.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector7.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector18.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector27.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean31 = openMapRealVector30.isNaN();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = openMapRealVector1.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(10, (int) '4');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector46.projection((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        double double51 = openMapRealVector42.dotProduct(openMapRealVector46);
        int int52 = openMapRealVector42.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean56 = openMapRealVector55.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector42.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        double[] doubleArray65 = openMapRealVector63.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix66 = openMapRealVector57.outerProduct(doubleArray65);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector36.append(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = openMapRealVector1.cosine(doubleArray65);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 99 + "'", int52 == 99);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(openMapRealVector57);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(openMapRealVector67);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector26.append((double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector38.projection((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        double double43 = openMapRealVector34.dotProduct(openMapRealVector38);
        int int44 = openMapRealVector34.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean48 = openMapRealVector47.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector34.append((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        double[] doubleArray54 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector49.setSubVector(99, doubleArray54);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = openMapRealVector26.outerProduct(doubleArray54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(96, 0);
        openMapRealVector26.setSubVector(0, (org.apache.commons.math.linear.RealVector) openMapRealVector60);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor62 = openMapRealVector26.sparseIterator();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(entryItor62);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector3.append((double) 0.0f);
        double double8 = openMapRealVector3.getSparsity();
        int int9 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double[] doubleArray17 = openMapRealVector15.getData();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector15.mapSubtract(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector15.mapMultiply((double) 0.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector3.append(openMapRealVector15);
        openMapRealVector15.setEntry((int) (short) 0, 101.0d);
        boolean boolean26 = openMapRealVector15.isNaN();
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 99 + "'", int9 == 99);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector20.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append(openMapRealVector20);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector20.mapMultiplyToSelf((double) (-1L));
        boolean boolean26 = openMapRealVector20.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        double[] doubleArray34 = openMapRealVector32.getData();
        double double35 = openMapRealVector20.dotProduct(doubleArray34);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        double double22 = openMapRealVector13.dotProduct(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.projection((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector28.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector13.append(openMapRealVector28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = openMapRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector2.mapAdd((double) 10.0f);
        double double35 = openMapRealVector34.getSparsity();
        double double36 = openMapRealVector34.getL1Norm();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1000.0d + "'", double36 == 1000.0d);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector20.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector3.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        double double32 = openMapRealVector3.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        double double47 = openMapRealVector38.dotProduct(openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor48 = openMapRealVector42.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector42.mapAddToSelf((double) ' ');
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector42.mapDivide((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector3.subtract(openMapRealVector42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor48);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector52);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.unitVector();
        double double50 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector36.mapSubtractToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(99, 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector55.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix57 = openMapRealVector36.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector36.mapAddToSelf((double) (byte) -1);
        double[] doubleArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double61 = openMapRealVector36.dotProduct(doubleArray60);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(openMapRealVector56);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(openMapRealVector59);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector4.mapAdd((-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) 100);
        java.lang.Class<?> wildcardClass9 = openMapRealVector4.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(99, 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        boolean boolean4 = openMapRealVector2.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector7.projection((org.apache.commons.math.linear.RealVector) openMapRealVector10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        double double19 = openMapRealVector10.dotProduct(openMapRealVector14);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor20 = openMapRealVector14.iterator();
        boolean boolean21 = openMapRealVector14.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector31.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        double double36 = openMapRealVector27.dotProduct(openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector27.append(openMapRealVector42);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector14.add(openMapRealVector42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector2.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 99 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(openMapRealVector46);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector7.mapAddToSelf((double) (-1L));
        int int10 = openMapRealVector9.getDimension();
        int int11 = openMapRealVector9.getDimension();
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 197 + "'", int10 == 197);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 197 + "'", int11 == 197);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        double double47 = openMapRealVector26.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        int int48 = openMapRealVector41.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector41.mapDivide((double) 10.0f);
        double[] doubleArray51 = openMapRealVector41.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector41.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector56.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector56.append((double) 0.0f);
        double double61 = openMapRealVector56.getSparsity();
        int int62 = openMapRealVector56.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        double[] doubleArray70 = openMapRealVector68.getData();
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.mapSubtract(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector68.mapMultiply((double) 0.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector56.append(openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = openMapRealVector56.unitVector();
        double double77 = openMapRealVector52.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double[] doubleArray78 = openMapRealVector52.toArray();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 99 + "'", int62 == 99);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(openMapRealVector76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector25.getSubVector((int) 'a', (int) (byte) 1);
        boolean boolean29 = openMapRealVector28.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor45 = openMapRealVector39.iterator();
        boolean boolean46 = openMapRealVector39.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        double double61 = openMapRealVector52.dotProduct(openMapRealVector56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor69 = openMapRealVector67.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector52.append(openMapRealVector67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector39.add(openMapRealVector67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector71);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector28.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector72);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(entryItor69);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector1.append(0.0d);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapSubtractToSelf((double) 99);
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector9.mapAddToSelf((double) ' ');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector9.mapAddToSelf((double) (short) 100);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor20 = openMapRealVector9.sparseIterator();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(entryItor20);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (double) (short) 0);
        int int3 = openMapRealVector2.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double18 = openMapRealVector9.dotProduct(openMapRealVector13);
        int int19 = openMapRealVector9.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean23 = openMapRealVector22.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        double double39 = openMapRealVector30.dotProduct(openMapRealVector34);
        int int40 = openMapRealVector30.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector30.sparseIterator();
        double double42 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        int int50 = openMapRealVector45.getMaxIndex();
        double double51 = openMapRealVector30.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        double double73 = openMapRealVector64.dotProduct(openMapRealVector68);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor74 = openMapRealVector68.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector57.append((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        double[] doubleArray76 = openMapRealVector75.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector30.append(doubleArray76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector30.copy();
        double double79 = openMapRealVector2.getDistance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector30.mapAdd((double) '4');
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector81.mapMultiply((double) 197);
        org.apache.commons.math.linear.RealVector realVector84 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double85 = openMapRealVector81.dotProduct(realVector84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 99 + "'", int50 == 99);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor74);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector81);
        org.junit.Assert.assertNotNull(realVector83);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        double[] doubleArray7 = openMapRealVector5.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) -1, (int) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector11.mapAddToSelf(0.0d);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.mapDivideToSelf(10.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = openMapRealVector8.getLInfDistance((org.apache.commons.math.linear.RealVector) openMapRealVector11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != -1");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapDivide((double) 100.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector3.append((double) 0.0f);
        double double8 = openMapRealVector3.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector3.getSubVector(1, 99);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector11);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor13 = openMapRealVector12.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double28 = openMapRealVector19.dotProduct(openMapRealVector23);
        int int29 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean33 = openMapRealVector32.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector19.append((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        double[] doubleArray39 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector34.setSubVector(99, doubleArray39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray39, (double) 'a');
        int int43 = openMapRealVector42.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector46.projection((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        double double58 = openMapRealVector49.dotProduct(openMapRealVector53);
        int int59 = openMapRealVector49.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean63 = openMapRealVector62.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector49.append((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector67.projection((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector74.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        double double79 = openMapRealVector70.dotProduct(openMapRealVector74);
        int int80 = openMapRealVector70.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor81 = openMapRealVector70.sparseIterator();
        double double82 = openMapRealVector49.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.RealVector realVector84 = openMapRealVector70.mapMultiply((double) 100);
        double[] doubleArray85 = openMapRealVector70.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = openMapRealVector42.append(doubleArray85);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = openMapRealVector42.mapAdd(0.009900990099009901d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector12.append((org.apache.commons.math.linear.RealVector) openMapRealVector88);
        org.apache.commons.math.linear.RealVector realVector91 = openMapRealVector88.mapDivideToSelf(107.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(entryItor13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 99 + "'", int29 == 99);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 99 + "'", int59 == 99);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(openMapRealVector64);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 99 + "'", int80 == 99);
        org.junit.Assert.assertNotNull(entryItor81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector86);
        org.junit.Assert.assertNotNull(openMapRealVector88);
        org.junit.Assert.assertNotNull(openMapRealVector89);
        org.junit.Assert.assertNotNull(realVector91);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        double double17 = openMapRealVector9.getMinValue();
        double[] doubleArray18 = openMapRealVector9.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18, (double) (short) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor21 = openMapRealVector20.sparseIterator();
        openMapRealVector20.set((double) 197);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector20.mapDivideToSelf(100.0d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(entryItor21);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 10);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector4.mapAdd((-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = openMapRealVector4.getEntry(300);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (300)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(openMapRealVector8);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        openMapRealVector36.setEntry((int) 'a', (double) (byte) -1);
        double double53 = openMapRealVector36.getEntry((int) (byte) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector36.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double[] doubleArray62 = openMapRealVector60.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray62);
        double double64 = openMapRealVector54.getLInfDistance(doubleArray62);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector54.copy();
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray70, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray70, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(99, 0);
        int int79 = openMapRealVector78.getDimension();
        double double80 = openMapRealVector75.getDistance(openMapRealVector78);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = openMapRealVector54.getDistance(openMapRealVector75);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (4)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(openMapRealVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.1d + "'", double64 == 0.1d);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 99 + "'", int79 == 99);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 14.177446878757825d + "'", double80 == 14.177446878757825d);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        int int24 = openMapRealVector14.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean28 = openMapRealVector27.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector14.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor45 = openMapRealVector39.iterator();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48, (double) (byte) 1);
        double[] doubleArray56 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix57 = openMapRealVector50.outerProduct(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector39.add(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector29.add(doubleArray56);
        openMapRealVector7.setSubVector(0, doubleArray56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector65.mapDivide((double) 100.0f);
        double[] doubleArray68 = openMapRealVector65.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector71.projection((org.apache.commons.math.linear.RealVector) openMapRealVector74);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector82 = openMapRealVector78.projection((org.apache.commons.math.linear.RealVector) openMapRealVector81);
        double double83 = openMapRealVector74.dotProduct(openMapRealVector78);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor84 = openMapRealVector78.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector78);
        double double86 = openMapRealVector78.getMinValue();
        double[] doubleArray87 = openMapRealVector78.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray87);
        double double89 = openMapRealVector65.getDistance(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = openMapRealVector7.ebeDivide(doubleArray87);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 197 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor84);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, 10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 10.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector15.projection((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        double double27 = openMapRealVector18.dotProduct(openMapRealVector22);
        int int28 = openMapRealVector18.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector18.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        int int37 = openMapRealVector32.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector32.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor47 = openMapRealVector45.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector18.add((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(1, (int) (byte) 1);
        openMapRealVector39.setSubVector((int) (byte) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector53);
        double double55 = openMapRealVector39.getMaxValue();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector39.append((double) (short) 0);
        double[] doubleArray58 = openMapRealVector57.toArray();
        // The following exception was thrown during execution in test generation
        try {
            double double59 = openMapRealVector12.getL1Distance(doubleArray58);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 101");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 99 + "'", int28 == 99);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 99 + "'", int37 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(entryItor47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0]");
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = openMapRealVector5.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        int int24 = openMapRealVector19.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector19.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double37 = openMapRealVector5.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        int int45 = openMapRealVector40.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor68 = openMapRealVector66.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector51.append(openMapRealVector66);
        org.apache.commons.math.linear.RealMatrix realMatrix70 = openMapRealVector40.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        double double71 = openMapRealVector5.dotProduct(openMapRealVector66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) -1, (int) (short) -1, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = openMapRealVector66.add(openMapRealVector75);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != -1");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 99 + "'", int45 == 99);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(entryItor68);
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        java.lang.Class<?> wildcardClass5 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) '4', (int) ' ');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) openMapRealVector8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        double double17 = openMapRealVector8.dotProduct(openMapRealVector12);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor18 = openMapRealVector12.iterator();
        boolean boolean19 = openMapRealVector12.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        double double34 = openMapRealVector25.dotProduct(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector37.projection((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor42 = openMapRealVector40.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector25.append(openMapRealVector40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector12.add(openMapRealVector40);
        double[] doubleArray49 = new double[] { (short) 1, 100.0f, 99, (-1) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector44.append(doubleArray49);
        openMapRealVector50.set((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = openMapRealVector2.dotProduct(openMapRealVector50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 52 != 104");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(entryItor42);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertNotNull(openMapRealVector44);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0, 99.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector50);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append((double) 1.0f);
        int int6 = openMapRealVector3.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector1.append(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        int int24 = openMapRealVector14.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean28 = openMapRealVector27.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector14.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector32.projection((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        double double44 = openMapRealVector35.dotProduct(openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor45 = openMapRealVector39.iterator();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48, (double) (byte) 1);
        double[] doubleArray56 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix57 = openMapRealVector50.outerProduct(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector39.add(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector29.add(doubleArray56);
        openMapRealVector7.setSubVector(0, doubleArray56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double[] doubleArray69 = openMapRealVector67.toArray();
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector61.add(doubleArray69);
        double double71 = openMapRealVector61.getMinValue();
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1.0d) + "'", double71 == (-1.0d));
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1000.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 0L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean3 = openMapRealVector2.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 1);
        openMapRealVector2.setSubVector((int) ' ', (org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        int int24 = openMapRealVector14.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean28 = openMapRealVector27.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector14.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector2.append(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector2.mapAddToSelf((-1.0d));
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor33 = openMapRealVector2.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean37 = openMapRealVector36.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor38 = openMapRealVector36.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 1);
        openMapRealVector36.setSubVector((int) ' ', (org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        double double57 = openMapRealVector48.dotProduct(openMapRealVector52);
        int int58 = openMapRealVector48.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean62 = openMapRealVector61.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector48.append((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector36.append(openMapRealVector63);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector36.mapAddToSelf((-1.0d));
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(entryItor33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(entryItor38);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(openMapRealVector64);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(realVector67);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean3 = openMapRealVector2.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 1);
        openMapRealVector2.setSubVector((int) ' ', (org.apache.commons.math.linear.RealVector) openMapRealVector7);
        boolean boolean9 = openMapRealVector7.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        int int17 = openMapRealVector12.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector12.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector22.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor27 = openMapRealVector25.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector19.mapMultiply(100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector19.append(openMapRealVector33);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector33.mapSubtractToSelf(Double.NaN);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        double double55 = openMapRealVector46.dotProduct(openMapRealVector50);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector50.iterator();
        boolean boolean57 = openMapRealVector50.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector63);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector67.projection((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        double double72 = openMapRealVector63.dotProduct(openMapRealVector67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector75.projection((org.apache.commons.math.linear.RealVector) openMapRealVector78);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor80 = openMapRealVector78.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector63.append(openMapRealVector78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector50.add(openMapRealVector78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = openMapRealVector33.subtract(openMapRealVector78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector83);
        double[] doubleArray85 = openMapRealVector84.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = openMapRealVector7.subtract(doubleArray85);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 99 + "'", int17 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(entryItor27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(entryItor80);
        org.junit.Assert.assertNotNull(openMapRealVector81);
        org.junit.Assert.assertNotNull(openMapRealVector82);
        org.junit.Assert.assertNotNull(openMapRealVector83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]");
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector36.unitVector();
        double double50 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector36.mapSubtractToSelf((double) (short) 1);
        double[] doubleArray53 = openMapRealVector36.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector56.projection((org.apache.commons.math.linear.RealVector) openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        double double68 = openMapRealVector59.dotProduct(openMapRealVector63);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector59.mapAdd((double) (short) 1);
        boolean boolean71 = openMapRealVector70.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector36.subtract(openMapRealVector70);
        openMapRealVector72.set((double) 300);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0]");
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(openMapRealVector72);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double[] doubleArray25 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector20.setSubVector(99, doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector20);
        openMapRealVector27.set((double) 0);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]");
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(200, (int) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector4.append((double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector6.mapAddToSelf((double) 0L);
        double double10 = openMapRealVector8.getEntry((int) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor33 = openMapRealVector31.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector16.append(openMapRealVector31);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector31.mapMultiplyToSelf((double) (-1L));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector31.mapAdd((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector38.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector42.projection((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        int int47 = openMapRealVector42.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector42.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector52.projection((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector59.projection((org.apache.commons.math.linear.RealVector) openMapRealVector62);
        double double64 = openMapRealVector55.dotProduct(openMapRealVector59);
        int int65 = openMapRealVector55.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor66 = openMapRealVector55.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) openMapRealVector72);
        int int74 = openMapRealVector69.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = openMapRealVector69.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector79.projection((org.apache.commons.math.linear.RealVector) openMapRealVector82);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor84 = openMapRealVector82.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector76.projection((org.apache.commons.math.linear.RealVector) openMapRealVector82);
        org.apache.commons.math.linear.RealVector realVector86 = openMapRealVector55.add((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double double87 = openMapRealVector76.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = openMapRealVector49.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        double[] doubleArray89 = openMapRealVector88.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector90 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray89);
        org.apache.commons.math.linear.RealVector realVector91 = openMapRealVector38.add(doubleArray89);
        org.apache.commons.math.linear.RealVector realVector92 = openMapRealVector8.add(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = openMapRealVector2.getLInfDistance(realVector92);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 200 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(entryItor33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 99 + "'", int47 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 99 + "'", int65 == 99);
        org.junit.Assert.assertNotNull(entryItor66);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 99 + "'", int74 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector76);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(entryItor84);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realVector92);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        openMapRealVector36.setEntry((int) 'a', (double) (byte) -1);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray54, (double) (byte) 1);
        double[] doubleArray62 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix63 = openMapRealVector56.outerProduct(doubleArray62);
        openMapRealVector56.set((double) (short) 10);
        int int66 = openMapRealVector56.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector36.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector56);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 2");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        boolean boolean15 = openMapRealVector9.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double[] doubleArray23 = openMapRealVector21.getData();
        double double24 = openMapRealVector9.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(200);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = openMapRealVector21.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor28 = openMapRealVector21.iterator();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(entryItor28);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(99, 0);
        int int13 = openMapRealVector12.getDimension();
        double double14 = openMapRealVector9.getDistance(openMapRealVector12);
        double double15 = openMapRealVector12.getMinValue();
        double double16 = openMapRealVector12.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean20 = openMapRealVector19.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        int int31 = openMapRealVector26.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector26.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector43.projection((org.apache.commons.math.linear.RealVector) openMapRealVector46);
        double double48 = openMapRealVector39.dotProduct(openMapRealVector43);
        int int49 = openMapRealVector39.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor50 = openMapRealVector39.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector53.projection((org.apache.commons.math.linear.RealVector) openMapRealVector56);
        int int58 = openMapRealVector53.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector53.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector63.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor68 = openMapRealVector66.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector60.projection((org.apache.commons.math.linear.RealVector) openMapRealVector66);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector39.add((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double71 = openMapRealVector60.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector33.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double[] doubleArray73 = openMapRealVector72.getData();
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector19.combineToSelf((double) 1, (double) 10L, doubleArray73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray73, 9807.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = openMapRealVector12.getL1Distance(doubleArray73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 99 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 14.177446878757825d + "'", double14 == 14.177446878757825d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 99 + "'", int31 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 99 + "'", int49 == 99);
        org.junit.Assert.assertNotNull(entryItor50);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(entryItor68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector74);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        double[] doubleArray25 = new double[] { 100.0d, (-1.0d), (-1.0f) };
        openMapRealVector20.setSubVector(99, doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25, (double) 'a');
        double double29 = openMapRealVector28.getNorm();
        double[] doubleArray30 = openMapRealVector28.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector40.projection((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        double double45 = openMapRealVector36.dotProduct(openMapRealVector40);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor46 = openMapRealVector40.iterator();
        boolean boolean47 = openMapRealVector40.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double62 = openMapRealVector53.dotProduct(openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector65.projection((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor70 = openMapRealVector68.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector53.append(openMapRealVector68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector40.add(openMapRealVector68);
        double[] doubleArray77 = new double[] { (short) 1, 100.0f, 99, (-1) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector72.append(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = openMapRealVector28.getDistance(doubleArray77);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 4");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(entryItor70);
        org.junit.Assert.assertNotNull(openMapRealVector71);
        org.junit.Assert.assertNotNull(openMapRealVector72);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 100.0, 99.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector78);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) (byte) 1);
        double[] doubleArray10 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = openMapRealVector4.outerProduct(doubleArray10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector13.copy();
        openMapRealVector13.set((double) 2);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(openMapRealVector14);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.mapMultiply(100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector9.append(openMapRealVector23);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector9.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector9.mapSubtractToSelf(0.5d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        double double26 = openMapRealVector16.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector16.mapAddToSelf(0.75d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector28);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector20.projection((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        double double25 = openMapRealVector16.dotProduct(openMapRealVector20);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector20.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector3.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        double double32 = openMapRealVector31.getNorm();
        double double33 = openMapRealVector31.getMaxValue();
        double[] doubleArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double35 = openMapRealVector31.getLInfDistance(doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean3 = openMapRealVector2.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 1);
        openMapRealVector2.setSubVector((int) ' ', (org.apache.commons.math.linear.RealVector) openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.projection((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector18.projection((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        double double23 = openMapRealVector14.dotProduct(openMapRealVector18);
        int int24 = openMapRealVector14.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean28 = openMapRealVector27.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector14.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector2.append(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector2.mapAddToSelf((double) 199);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double[] doubleArray40 = openMapRealVector38.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector32.projection(doubleArray40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector32.mapAdd((double) 10);
        openMapRealVector32.set((double) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(openMapRealVector43);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        int int22 = openMapRealVector17.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector17.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor32 = openMapRealVector30.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector24.mapMultiply(100.0d);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector9.projection(realVector35);
        double double37 = openMapRealVector9.getMinValue();
        int int38 = openMapRealVector9.getMinIndex();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 99 + "'", int22 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(entryItor32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 99 + "'", int38 == 99);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        int int22 = openMapRealVector17.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector17.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor32 = openMapRealVector30.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector24.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector24.mapMultiply(100.0d);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector9.projection(realVector35);
        boolean boolean37 = openMapRealVector9.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        boolean boolean39 = openMapRealVector38.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100, 0, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = openMapRealVector38.cosine((org.apache.commons.math.linear.RealVector) openMapRealVector43);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: zero norm");
        } catch (org.apache.commons.math.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 99 + "'", int22 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(entryItor32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) '#', (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double18 = openMapRealVector9.dotProduct(openMapRealVector13);
        int int19 = openMapRealVector9.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean23 = openMapRealVector22.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        double double39 = openMapRealVector30.dotProduct(openMapRealVector34);
        int int40 = openMapRealVector30.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector30.sparseIterator();
        double double42 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        int int50 = openMapRealVector45.getMaxIndex();
        double double51 = openMapRealVector30.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        double double52 = openMapRealVector3.getDistance(openMapRealVector30);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector30.mapMultiplyToSelf((double) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector64.projection((org.apache.commons.math.linear.RealVector) openMapRealVector67);
        double double69 = openMapRealVector60.dotProduct(openMapRealVector64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector72.projection((org.apache.commons.math.linear.RealVector) openMapRealVector75);
        int int77 = openMapRealVector72.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = openMapRealVector72.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector86 = openMapRealVector82.projection((org.apache.commons.math.linear.RealVector) openMapRealVector85);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor87 = openMapRealVector85.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector88 = openMapRealVector79.projection((org.apache.commons.math.linear.RealVector) openMapRealVector85);
        org.apache.commons.math.linear.RealVector realVector90 = openMapRealVector79.mapMultiply(100.0d);
        org.apache.commons.math.linear.RealVector realVector91 = openMapRealVector64.projection(realVector90);
        org.apache.commons.math.linear.RealVector realVector92 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        boolean boolean94 = openMapRealVector30.equals((java.lang.Object) 1.0E-12d);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 99 + "'", int50 == 99);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 99 + "'", int77 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector79);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertNotNull(entryItor87);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realVector92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector9.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector16.append(301.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector37.projection((org.apache.commons.math.linear.RealVector) openMapRealVector40);
        double double42 = openMapRealVector33.dotProduct(openMapRealVector37);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor43 = openMapRealVector37.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector26.append((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector37.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector46.getSubVector((int) 'a', (int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector18.combine(10100.0d, (double) 4, (org.apache.commons.math.linear.RealVector) openMapRealVector46);
        double double51 = openMapRealVector18.getL1Norm();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor43);
        org.junit.Assert.assertNotNull(openMapRealVector44);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 301.0d + "'", double51 == 301.0d);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        int int22 = openMapRealVector12.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor23 = openMapRealVector12.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) openMapRealVector29);
        int int31 = openMapRealVector26.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector26.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector39.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector33.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector12.add((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double44 = openMapRealVector33.getSparsity();
        double double45 = openMapRealVector33.getMaxValue();
        int int46 = openMapRealVector33.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector2.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean53 = openMapRealVector52.isInfinite();
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector33.combine((double) 100, (double) 10, (org.apache.commons.math.linear.RealVector) openMapRealVector52);
        double double55 = openMapRealVector52.getNorm();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = openMapRealVector52.iterator();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 99 + "'", int22 == 99);
        org.junit.Assert.assertNotNull(entryItor23);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 99 + "'", int31 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor56);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (double) (short) 0);
        int int3 = openMapRealVector2.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.projection((org.apache.commons.math.linear.RealVector) openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double double18 = openMapRealVector9.dotProduct(openMapRealVector13);
        int int19 = openMapRealVector9.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean23 = openMapRealVector22.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector9.append((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.projection((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        double double39 = openMapRealVector30.dotProduct(openMapRealVector34);
        int int40 = openMapRealVector30.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector30.sparseIterator();
        double double42 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector45.projection((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        int int50 = openMapRealVector45.getMaxIndex();
        double double51 = openMapRealVector30.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector54.projection((org.apache.commons.math.linear.RealVector) openMapRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector61.projection((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector68.projection((org.apache.commons.math.linear.RealVector) openMapRealVector71);
        double double73 = openMapRealVector64.dotProduct(openMapRealVector68);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor74 = openMapRealVector68.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector57.append((org.apache.commons.math.linear.RealVector) openMapRealVector68);
        double[] doubleArray76 = openMapRealVector75.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector30.append(doubleArray76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector30.copy();
        double double79 = openMapRealVector2.getDistance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector30.mapAdd((double) '4');
        double[] doubleArray82 = openMapRealVector81.getData();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 99 + "'", int50 == 99);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor74);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0]");
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        int int46 = openMapRealVector41.getMaxIndex();
        double double47 = openMapRealVector26.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector50.projection((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector57.projection((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        double double62 = openMapRealVector53.dotProduct(openMapRealVector57);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor63 = openMapRealVector57.iterator();
        boolean boolean64 = openMapRealVector57.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector67.projection((org.apache.commons.math.linear.RealVector) openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector74.projection((org.apache.commons.math.linear.RealVector) openMapRealVector77);
        double double79 = openMapRealVector70.dotProduct(openMapRealVector74);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector86 = openMapRealVector82.projection((org.apache.commons.math.linear.RealVector) openMapRealVector85);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor87 = openMapRealVector85.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = openMapRealVector70.append(openMapRealVector85);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector57.add(openMapRealVector85);
        double[] doubleArray94 = new double[] { (short) 1, 100.0f, 99, (-1) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector95 = openMapRealVector89.append(doubleArray94);
        double double96 = openMapRealVector26.getL1Distance(openMapRealVector95);
        openMapRealVector95.unitize();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertNotNull(entryItor87);
        org.junit.Assert.assertNotNull(openMapRealVector88);
        org.junit.Assert.assertNotNull(openMapRealVector89);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0, 100.0, 99.0, -1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 201.0d + "'", double96 == 201.0d);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 14.142135623730951d, 0.0d, 1.0E-12d, (-1.0d) };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 3);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (int) (byte) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 10, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        double double28 = openMapRealVector19.dotProduct(openMapRealVector23);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector23.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector12.append((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector23.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector6.append((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector6.mapAdd(14.142135623730951d);
        double[] doubleArray37 = openMapRealVector6.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37, (double) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector2.projection(doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 0 != 1");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean3 = openMapRealVector2.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector7.projection((org.apache.commons.math.linear.RealVector) openMapRealVector10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) openMapRealVector17);
        double double19 = openMapRealVector10.dotProduct(openMapRealVector14);
        int int20 = openMapRealVector10.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean24 = openMapRealVector23.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector10.append((org.apache.commons.math.linear.RealVector) openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector28.projection((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.projection((org.apache.commons.math.linear.RealVector) openMapRealVector38);
        double double40 = openMapRealVector31.dotProduct(openMapRealVector35);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor41 = openMapRealVector35.iterator();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 100.0d, 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44, (double) (byte) 1);
        double[] doubleArray52 = new double[] { 10L, (-1.0f), (-1.0f), (-1), 100 };
        org.apache.commons.math.linear.RealMatrix realMatrix53 = openMapRealVector46.outerProduct(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector35.add(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector25.add(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = openMapRealVector4.getDistance(doubleArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 100 != 5");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 99 + "'", int20 == 99);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector25.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector25.mapAdd(99.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(10, (int) '4');
        double[] doubleArray32 = openMapRealVector31.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector25.ebeMultiply(doubleArray32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 101 != 10");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.projection((org.apache.commons.math.linear.RealVector) openMapRealVector20);
        double double22 = openMapRealVector13.dotProduct(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.projection((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector28.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector13.append(openMapRealVector28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = openMapRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector28);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor33 = openMapRealVector28.iterator();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(entryItor33);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector25.getSubVector((int) 'a', (int) (byte) 1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector28.iterator();
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector28.mapSubtractToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        double double46 = openMapRealVector37.dotProduct(openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector52);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor54 = openMapRealVector52.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector37.append(openMapRealVector52);
        double double56 = openMapRealVector28.getL1Distance(openMapRealVector55);
        int int57 = openMapRealVector55.getMinIndex();
        java.lang.Class<?> wildcardClass58 = openMapRealVector55.getClass();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(entryItor54);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 199 + "'", int57 == 199);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.mapMultiply(100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector9.append(openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector28.unitVector();
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector29.mapDivide(Double.NaN);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector34.projection((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        double double46 = openMapRealVector37.dotProduct(openMapRealVector41);
        int int47 = openMapRealVector37.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean51 = openMapRealVector50.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector37.append((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector66 = openMapRealVector62.projection((org.apache.commons.math.linear.RealVector) openMapRealVector65);
        double double67 = openMapRealVector58.dotProduct(openMapRealVector62);
        int int68 = openMapRealVector58.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor69 = openMapRealVector58.sparseIterator();
        double double70 = openMapRealVector37.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector73.projection((org.apache.commons.math.linear.RealVector) openMapRealVector76);
        int int78 = openMapRealVector73.getMaxIndex();
        double double79 = openMapRealVector58.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector73);
        int int80 = openMapRealVector73.getMaxIndex();
        org.apache.commons.math.linear.RealVector realVector82 = openMapRealVector73.mapDivide((double) 10.0f);
        double[] doubleArray83 = openMapRealVector73.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector29.projection(doubleArray83);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 200 != 100");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 99 + "'", int47 == 99);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 99 + "'", int68 == 99);
        org.junit.Assert.assertNotNull(entryItor69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 99 + "'", int78 == 99);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 99 + "'", int80 == 99);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        int int7 = openMapRealVector2.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector12.projection((org.apache.commons.math.linear.RealVector) openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        double double24 = openMapRealVector15.dotProduct(openMapRealVector19);
        int int25 = openMapRealVector15.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector15.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector29.projection((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        int int34 = openMapRealVector29.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.mapAddToSelf((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector42.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.projection((org.apache.commons.math.linear.RealVector) openMapRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector15.add((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double double47 = openMapRealVector36.getSparsity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        double[] doubleArray49 = openMapRealVector48.getData();
        double[] doubleArray50 = openMapRealVector48.toArray();
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.mapSubtractToSelf((double) 0);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 0.0d, (-1.0d), 100.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56, (double) (byte) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56, (double) (short) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = openMapRealVector48.getL1Distance(openMapRealVector62);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: index (3)");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(95);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector16.append((double) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector25.iterator();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector25.map(univariateRealFunction27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(entryItor26);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        double double14 = openMapRealVector5.dotProduct(openMapRealVector9);
        int int15 = openMapRealVector5.getMaxIndex();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        boolean boolean19 = openMapRealVector18.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector23.projection((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) openMapRealVector33);
        double double35 = openMapRealVector26.dotProduct(openMapRealVector30);
        int int36 = openMapRealVector26.getMaxIndex();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector26.sparseIterator();
        double double38 = openMapRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector41.projection((org.apache.commons.math.linear.RealVector) openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector48.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector55.projection((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        double double60 = openMapRealVector51.dotProduct(openMapRealVector55);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = openMapRealVector55.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector44.append((org.apache.commons.math.linear.RealVector) openMapRealVector55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector66.projection((org.apache.commons.math.linear.RealVector) openMapRealVector69);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector26.add(realVector70);
        int int72 = openMapRealVector26.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector26.mapAdd((double) 1.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector74.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector75.getSubVector((int) ' ', (int) (short) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector78);
        boolean boolean80 = openMapRealVector78.isNaN();
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(entryItor37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(openMapRealVector78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector16.projection((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        double double21 = openMapRealVector12.dotProduct(openMapRealVector16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor22 = openMapRealVector16.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double[] doubleArray24 = openMapRealVector23.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector23.copy();
        openMapRealVector23.setEntry((int) (byte) 100, (double) (short) 10);
        openMapRealVector23.setEntry(197, 301.0d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(entryItor22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(openMapRealVector25);
    }
}


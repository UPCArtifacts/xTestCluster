import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl10.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl10.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl12.getVT();
        double double18 = eigenDecompositionImpl12.getDeterminant();
        double double19 = eigenDecompositionImpl12.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealVector realVector11 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double12 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl14.getSolver();
        java.lang.Class<?> wildcardClass20 = eigenDecompositionImpl14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        double[] doubleArray19 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getVT();
        double double26 = eigenDecompositionImpl24.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector28 = eigenDecompositionImpl24.getEigenvector(0);
        double double29 = eigenDecompositionImpl24.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl24.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix30, (double) 10L);
        double[] doubleArray33 = eigenDecompositionImpl32.getImagEigenvalues();
        double[] doubleArray34 = eigenDecompositionImpl32.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray34, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl16.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double17 = eigenDecompositionImpl11.getRealEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        java.lang.Class<?> wildcardClass8 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        double[] doubleArray18 = eigenDecompositionImpl17.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl17.getImagEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        double[] doubleArray11 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getVT();
        java.lang.Class<?> wildcardClass13 = realMatrix12.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getVT();
        double double26 = eigenDecompositionImpl24.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector28 = eigenDecompositionImpl24.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl24.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl24.getD();
        double double31 = eigenDecompositionImpl24.getDeterminant();
        double[] doubleArray32 = eigenDecompositionImpl24.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray32, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray12 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl7.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl7.getRealEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = eigenDecompositionImpl11.getEigenvector((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix21, (double) 0L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl33.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix34, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector38 = eigenDecompositionImpl36.getEigenvector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix34);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = new double[] { (short) 0 };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray12, 100.0d);
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray17, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl21.getSolver();
        double[] doubleArray24 = eigenDecompositionImpl21.getRealEigenvalues();
        double[] doubleArray25 = eigenDecompositionImpl21.getRealEigenvalues();
        double[] doubleArray26 = eigenDecompositionImpl21.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray26, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl12.getRealEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double double13 = eigenDecompositionImpl11.getRealEigenvalue(0);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl11.getRealEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double double12 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix21, (double) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver24 = eigenDecompositionImpl23.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = eigenDecompositionImpl23.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver24);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl7.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray12 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray12 = new double[] { (short) 0 };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray13, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getV();
        double[] doubleArray17 = eigenDecompositionImpl15.getImagEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl15.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl15.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) '4');
        double[] doubleArray22 = eigenDecompositionImpl21.getRealEigenvalues();
        double double23 = eigenDecompositionImpl21.getDeterminant();
        double[] doubleArray24 = eigenDecompositionImpl21.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray24, (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl11.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector((int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector14 = eigenDecompositionImpl4.getEigenvector((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl4.getRealEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl30.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        double double32 = eigenDecompositionImpl30.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl30.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = eigenDecompositionImpl30.getImagEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix33);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix21, (double) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver24 = eigenDecompositionImpl23.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = eigenDecompositionImpl23.getImagEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver24);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 10.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl9.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, 0.0d);
        double[] doubleArray14 = eigenDecompositionImpl13.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl13.getEigenvector((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double double11 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getD();
        double double22 = eigenDecompositionImpl20.getDeterminant();
        double[] doubleArray23 = eigenDecompositionImpl20.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) (short) 0);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl11.getEigenvector((int) (short) 0);
        java.lang.Class<?> wildcardClass20 = realVector19.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        double[] doubleArray14 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl11.getImagEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) (short) 1);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl21.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector24 = eigenDecompositionImpl21.getEigenvector((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(decompositionSolver22);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl11.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl4.getV();
        double double17 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl4.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getRealEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        double double13 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver14);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        double[] doubleArray9 = eigenDecompositionImpl7.getImagEigenvalues();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl7.getRealEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        double[] doubleArray32 = new double[] { (short) 0 };
        double[] doubleArray33 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray32, doubleArray33, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = eigenDecompositionImpl35.getVT();
        double double38 = eigenDecompositionImpl35.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = eigenDecompositionImpl35.getVT();
        double[] doubleArray40 = eigenDecompositionImpl35.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl42 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray40, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0]");
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        double double18 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray19 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray12 = new double[] { (short) 0 };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray13, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getVT();
        double[] doubleArray17 = eigenDecompositionImpl15.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray17, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100L);
        double double20 = eigenDecompositionImpl19.getDeterminant();
        double double22 = eigenDecompositionImpl19.getRealEigenvalue((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector24 = eigenDecompositionImpl19.getEigenvector((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector11 = eigenDecompositionImpl4.getEigenvector((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl17.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, 0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getRealEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl11.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 0.0d);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl10.getImagEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl11.getImagEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) ' ');
        double[] doubleArray13 = eigenDecompositionImpl12.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl12.getVT();
        double[] doubleArray16 = eigenDecompositionImpl12.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl16.getV();
        double[] doubleArray23 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray31, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver36 = eigenDecompositionImpl35.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = eigenDecompositionImpl35.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver38 = eigenDecompositionImpl35.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = eigenDecompositionImpl35.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl41 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix39, (double) 1);
        double double42 = eigenDecompositionImpl41.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix43 = eigenDecompositionImpl41.getV();
        double[] doubleArray44 = eigenDecompositionImpl41.getRealEigenvalues();
        double[] doubleArray45 = eigenDecompositionImpl41.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl47 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray45, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(decompositionSolver38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0]");
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector14 = eigenDecompositionImpl4.getEigenvector(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double double17 = eigenDecompositionImpl11.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl16.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl16.getSolver();
        double double25 = eigenDecompositionImpl16.getRealEigenvalue(0);
        double double27 = eigenDecompositionImpl16.getRealEigenvalue(0);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = eigenDecompositionImpl16.getImagEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl21.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        double double14 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 0);
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double17 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        java.lang.Class<?> wildcardClass19 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, 0.0d);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getD();
        java.lang.Class<?> wildcardClass17 = realMatrix16.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        double double18 = eigenDecompositionImpl11.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl11.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        java.lang.Class<?> wildcardClass18 = realMatrix17.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        double[] doubleArray14 = eigenDecompositionImpl13.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl13.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl4.getEigenvector((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) 1L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        double[] doubleArray24 = new double[] { (short) 0 };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray25, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray25, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver30 = eigenDecompositionImpl29.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = eigenDecompositionImpl29.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver32 = eigenDecompositionImpl29.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl29.getD();
        double[] doubleArray34 = eigenDecompositionImpl29.getImagEigenvalues();
        double[] doubleArray36 = new double[] { (short) 0 };
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray36, doubleArray37, 100.0d);
        double[] doubleArray41 = new double[] { (short) 0 };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl44 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray41, doubleArray42, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl46 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray36, doubleArray42, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl48 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray34, doubleArray42, (double) (short) 0);
        double[] doubleArray49 = eigenDecompositionImpl48.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl51 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray49, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(decompositionSolver32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0]");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl19.getRealEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver19);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 0);
        java.lang.Class<?> wildcardClass14 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getRealEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        double double11 = eigenDecompositionImpl10.getDeterminant();
        double double12 = eigenDecompositionImpl10.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl10.getSolver();
        java.lang.Class<?> wildcardClass14 = decompositionSolver13.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl17.getSolver();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getVT();
        double double26 = eigenDecompositionImpl24.getDeterminant();
        double double27 = eigenDecompositionImpl24.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver28 = eigenDecompositionImpl24.getSolver();
        double[] doubleArray29 = eigenDecompositionImpl24.getRealEigenvalues();
        double[] doubleArray30 = eigenDecompositionImpl24.getImagEigenvalues();
        double[] doubleArray31 = eigenDecompositionImpl24.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray31, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl7.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl7.getRealEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector11 = eigenDecompositionImpl9.getEigenvector((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        java.lang.Class<?> wildcardClass11 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        double double18 = eigenDecompositionImpl14.getRealEigenvalue((int) (short) 0);
        double[] doubleArray19 = eigenDecompositionImpl14.getRealEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        double[] doubleArray25 = eigenDecompositionImpl24.getRealEigenvalues();
        double double26 = eigenDecompositionImpl24.getDeterminant();
        double double28 = eigenDecompositionImpl24.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl24.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix29, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix29, (double) (short) -1);
        double[] doubleArray34 = eigenDecompositionImpl33.getRealEigenvalues();
        double[] doubleArray35 = eigenDecompositionImpl33.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver36 = eigenDecompositionImpl33.getSolver();
        double[] doubleArray37 = eigenDecompositionImpl33.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray37, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl9.getV();
        double double12 = eigenDecompositionImpl9.getDeterminant();
        double double13 = eigenDecompositionImpl9.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) ' ');
        double[] doubleArray13 = eigenDecompositionImpl12.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray22, (double) 100.0f);
        double[] doubleArray27 = eigenDecompositionImpl26.getImagEigenvalues();
        double[] doubleArray28 = eigenDecompositionImpl26.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray28, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, (double) ' ');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl18.getSolver();
        double double20 = eigenDecompositionImpl18.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl18.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl17.getSolver();
        java.lang.Class<?> wildcardClass20 = decompositionSolver19.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        double[] doubleArray12 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 0.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector26 = eigenDecompositionImpl24.getEigenvector((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 0);
        double double14 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl9.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, (double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl25.getVT();
        double double27 = eigenDecompositionImpl25.getDeterminant();
        double[] doubleArray28 = eigenDecompositionImpl25.getImagEigenvalues();
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        double[] doubleArray35 = new double[] { (short) 0 };
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray35, doubleArray36, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray36, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver41 = eigenDecompositionImpl40.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = eigenDecompositionImpl40.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver43 = eigenDecompositionImpl40.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = eigenDecompositionImpl40.getD();
        double[] doubleArray45 = eigenDecompositionImpl40.getImagEigenvalues();
        double[] doubleArray47 = new double[] { (short) 0 };
        double[] doubleArray48 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl50 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray47, doubleArray48, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl52 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray45, doubleArray48, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl54 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray48, (double) 100.0f);
        double[] doubleArray56 = new double[] { (short) 0 };
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl59 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray56, doubleArray57, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = eigenDecompositionImpl59.getVT();
        double double61 = eigenDecompositionImpl59.getDeterminant();
        double[] doubleArray62 = eigenDecompositionImpl59.getImagEigenvalues();
        double[] doubleArray64 = new double[] { (short) 0 };
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl67 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray64, doubleArray65, 100.0d);
        double[] doubleArray69 = new double[] { (short) 0 };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl72 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray69, doubleArray70, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl74 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray64, doubleArray70, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver75 = eigenDecompositionImpl74.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix76 = eigenDecompositionImpl74.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver77 = eigenDecompositionImpl74.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix78 = eigenDecompositionImpl74.getD();
        double[] doubleArray79 = eigenDecompositionImpl74.getImagEigenvalues();
        double[] doubleArray81 = new double[] { (short) 0 };
        double[] doubleArray82 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl84 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray81, doubleArray82, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl86 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray79, doubleArray82, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl88 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray62, doubleArray82, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl90 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray82, (-1.0d));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl92 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray82, (double) (short) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = eigenDecompositionImpl92.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl95 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix93, (double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix96 = eigenDecompositionImpl95.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(decompositionSolver43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(decompositionSolver77);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(realMatrix93);
        org.junit.Assert.assertNotNull(realMatrix96);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl15.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl15.getD();
        double double20 = eigenDecompositionImpl15.getImagEigenvalue((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl15.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getVT();
        double double26 = eigenDecompositionImpl24.getDeterminant();
        double[] doubleArray27 = eigenDecompositionImpl24.getImagEigenvalues();
        double[] doubleArray29 = new double[] { (short) 0 };
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray29, doubleArray30, 100.0d);
        double[] doubleArray34 = new double[] { (short) 0 };
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl37 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray34, doubleArray35, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray29, doubleArray35, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver40 = eigenDecompositionImpl39.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix41 = eigenDecompositionImpl39.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver42 = eigenDecompositionImpl39.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix43 = eigenDecompositionImpl39.getD();
        double[] doubleArray44 = eigenDecompositionImpl39.getImagEigenvalues();
        double[] doubleArray46 = new double[] { (short) 0 };
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl49 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray46, doubleArray47, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl51 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray44, doubleArray47, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl53 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray27, doubleArray47, (double) 100.0f);
        double[] doubleArray55 = new double[] { (short) 0 };
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl58 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray55, doubleArray56, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = eigenDecompositionImpl58.getVT();
        double double60 = eigenDecompositionImpl58.getDeterminant();
        double[] doubleArray61 = eigenDecompositionImpl58.getImagEigenvalues();
        double[] doubleArray63 = new double[] { (short) 0 };
        double[] doubleArray64 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl66 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray63, doubleArray64, 100.0d);
        double[] doubleArray68 = new double[] { (short) 0 };
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl71 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray68, doubleArray69, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl73 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray63, doubleArray69, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver74 = eigenDecompositionImpl73.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix75 = eigenDecompositionImpl73.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver76 = eigenDecompositionImpl73.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix77 = eigenDecompositionImpl73.getD();
        double[] doubleArray78 = eigenDecompositionImpl73.getImagEigenvalues();
        double[] doubleArray80 = new double[] { (short) 0 };
        double[] doubleArray81 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl83 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray80, doubleArray81, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl85 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray78, doubleArray81, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl87 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray61, doubleArray81, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl89 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray27, doubleArray81, (-1.0d));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl91 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray81, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector93 = eigenDecompositionImpl91.getEigenvector(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(decompositionSolver42);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver74);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(decompositionSolver76);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        double double22 = eigenDecompositionImpl21.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl21.getV();
        java.lang.Class<?> wildcardClass24 = eigenDecompositionImpl21.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector11 = eigenDecompositionImpl7.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl12.getD();
        org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl12.getEigenvector(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray26, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector32 = eigenDecompositionImpl30.getEigenvector((int) (byte) 0);
        double[] doubleArray33 = eigenDecompositionImpl30.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl30.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = eigenDecompositionImpl30.getV();
        double double36 = eigenDecompositionImpl30.getDeterminant();
        double[] doubleArray37 = eigenDecompositionImpl30.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray37, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getRealEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        double[] doubleArray14 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver29 = eigenDecompositionImpl28.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl28.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl28.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl28.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix32, (double) 1);
        double[] doubleArray35 = eigenDecompositionImpl34.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl37 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray35, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10L);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl10.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = eigenDecompositionImpl15.getEigenvector((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl13.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        double[] doubleArray18 = eigenDecompositionImpl16.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        double double21 = eigenDecompositionImpl17.getImagEigenvalue((int) (short) 0);
        double[] doubleArray22 = eigenDecompositionImpl17.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl12.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl12.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl12.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        double[] doubleArray17 = eigenDecompositionImpl15.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl15.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray18, 100.0d);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl22.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl22.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        java.lang.Class<?> wildcardClass14 = doubleArray13.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl4.getRealEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 10L);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray22, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = eigenDecompositionImpl26.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver28 = eigenDecompositionImpl26.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl26.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix29, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl31.getV();
        double double34 = eigenDecompositionImpl31.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = eigenDecompositionImpl31.getD();
        double[] doubleArray36 = eigenDecompositionImpl31.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver37 = eigenDecompositionImpl31.getSolver();
        double[] doubleArray38 = eigenDecompositionImpl31.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray38, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(decompositionSolver28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        double[] doubleArray22 = eigenDecompositionImpl17.getImagEigenvalues();
        double double24 = eigenDecompositionImpl17.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl17.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, 0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl13.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl13.getVT();
        double double16 = eigenDecompositionImpl13.getDeterminant();
        java.lang.Class<?> wildcardClass17 = eigenDecompositionImpl13.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double12 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double[] doubleArray13 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray21, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl25.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver27 = eigenDecompositionImpl25.getSolver();
        double[] doubleArray28 = eigenDecompositionImpl25.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl25.getD();
        double[] doubleArray30 = eigenDecompositionImpl25.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray30, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(decompositionSolver27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        double[] doubleArray16 = eigenDecompositionImpl14.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver17);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl17.getImagEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) (-1));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double double12 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10L);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double[] doubleArray12 = eigenDecompositionImpl10.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl10.getImagEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl11.getEigenvector(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl17.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl17.getImagEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver19);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getRealEigenvalues();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        double[] doubleArray14 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl11.getEigenvector(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.apache.commons.math.linear.RealMatrix realMatrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl2 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix0, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getRealEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl10.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        java.lang.Class<?> wildcardClass13 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray12 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl7.getV();
        double double15 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl7.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1L);
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl16.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        java.lang.Class<?> wildcardClass13 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        double[] doubleArray14 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl13.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl13.getSolver();
        double double17 = eigenDecompositionImpl13.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl10.getSolver();
        double double13 = eigenDecompositionImpl10.getImagEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray22, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = eigenDecompositionImpl26.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl26.getD();
        double[] doubleArray29 = eigenDecompositionImpl26.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray29, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getV();
        java.lang.Class<?> wildcardClass17 = eigenDecompositionImpl14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl4.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 100.0f);
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray23, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver28 = eigenDecompositionImpl27.getSolver();
        double double29 = eigenDecompositionImpl27.getDeterminant();
        double double30 = eigenDecompositionImpl27.getDeterminant();
        double[] doubleArray31 = eigenDecompositionImpl27.getImagEigenvalues();
        double[] doubleArray33 = new double[] { (short) 0 };
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray33, doubleArray34, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = eigenDecompositionImpl36.getVT();
        double double38 = eigenDecompositionImpl36.getDeterminant();
        double[] doubleArray39 = eigenDecompositionImpl36.getRealEigenvalues();
        double[] doubleArray41 = new double[] { (short) 0 };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl44 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray41, doubleArray42, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl46 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray39, doubleArray42, (double) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl48 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray31, doubleArray42, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl50 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray31, (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) '4');
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double double12 = eigenDecompositionImpl10.getDeterminant();
        double[] doubleArray13 = eigenDecompositionImpl10.getRealEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray21, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl25.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = eigenDecompositionImpl25.getD();
        double double28 = eigenDecompositionImpl25.getDeterminant();
        double[] doubleArray29 = eigenDecompositionImpl25.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray29, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl16.getSolver();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl16.getImagEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.RealVector realVector21 = eigenDecompositionImpl17.getEigenvector(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl17.getEigenvector((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray12 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl7.getV();
        double[] doubleArray16 = eigenDecompositionImpl7.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        double[] doubleArray16 = eigenDecompositionImpl15.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl15.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl15.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100L);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealVector realVector21 = eigenDecompositionImpl11.getEigenvector(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        java.lang.Class<?> wildcardClass14 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, 0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl13.getD();
        double[] doubleArray15 = eigenDecompositionImpl13.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix21, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver24 = eigenDecompositionImpl23.getSolver();
        double[] doubleArray25 = eigenDecompositionImpl23.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl23.getD();
        double[] doubleArray27 = eigenDecompositionImpl23.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray27, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getV();
        double double18 = eigenDecompositionImpl14.getRealEigenvalue(0);
        double[] doubleArray19 = eigenDecompositionImpl14.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double17 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        double double11 = eigenDecompositionImpl10.getDeterminant();
        double double12 = eigenDecompositionImpl10.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl10.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl10.getRealEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getV();
        double double22 = eigenDecompositionImpl16.getRealEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl14.getSolver();
        double double16 = eigenDecompositionImpl14.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl14.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getD();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getVT();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl7.getEigenvector((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getD();
        double double13 = eigenDecompositionImpl7.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl7.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl16.getV();
        java.lang.Class<?> wildcardClass22 = eigenDecompositionImpl16.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, 0.0d);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl13.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver14);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getD();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl7.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl22.getD();
        double[] doubleArray24 = eigenDecompositionImpl22.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl22.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl22.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl12.getImagEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getD();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl7.getEigenvector((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = new double[] { (short) 0 };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray9, 100.0d);
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray14, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl18.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl18.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl18.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl18.getD();
        double[] doubleArray23 = eigenDecompositionImpl18.getImagEigenvalues();
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray31, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl37 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray31, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray31, (double) 100L);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver40 = eigenDecompositionImpl39.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix41 = eigenDecompositionImpl39.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double43 = eigenDecompositionImpl39.getImagEigenvalue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver40);
        org.junit.Assert.assertNotNull(realMatrix41);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray19, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl23.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl23.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl23.getD();
        double[] doubleArray27 = eigenDecompositionImpl23.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray27, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getVT();
        double double21 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) ' ');
        double double8 = eigenDecompositionImpl7.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double double15 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl14.getRealEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getV();
        double[] doubleArray22 = eigenDecompositionImpl20.getImagEigenvalues();
        double[] doubleArray23 = eigenDecompositionImpl20.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl20.getVT();
        double[] doubleArray25 = eigenDecompositionImpl20.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl20.getVT();
        double double28 = eigenDecompositionImpl20.getImagEigenvalue((int) (short) 0);
        double[] doubleArray29 = eigenDecompositionImpl20.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray29, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double[] doubleArray20 = eigenDecompositionImpl17.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl17.getRealEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100L);
        double double20 = eigenDecompositionImpl19.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl19.getImagEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl4.getEigenvector((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector14 = eigenDecompositionImpl4.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getD();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl7.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 0.0d);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl10.getVT();
        double[] doubleArray14 = eigenDecompositionImpl10.getRealEigenvalues();
        double double15 = eigenDecompositionImpl10.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) ' ');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl19.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double double12 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100L);
        double[] doubleArray20 = eigenDecompositionImpl19.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (byte) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, (double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 100);
        java.lang.Class<?> wildcardClass16 = eigenDecompositionImpl15.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        double double16 = eigenDecompositionImpl15.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl15.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl17.getRealEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix20, (double) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl22.getSolver();
        double[] doubleArray24 = eigenDecompositionImpl22.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray24, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl17.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl17.getImagEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver19);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        double double31 = eigenDecompositionImpl30.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double33 = eigenDecompositionImpl30.getRealEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        double[] doubleArray22 = eigenDecompositionImpl17.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = eigenDecompositionImpl17.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, 0.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        java.lang.Class<?> wildcardClass11 = decompositionSolver10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl8 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix6, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix6);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl12.getV();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl12.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl12.getImagEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl17.getRealEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        java.lang.Class<?> wildcardClass19 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl11.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        double[] doubleArray17 = eigenDecompositionImpl15.getRealEigenvalues();
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        double[] doubleArray24 = new double[] { (short) 0 };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray25, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray25, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl29.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = eigenDecompositionImpl29.getD();
        double[] doubleArray32 = eigenDecompositionImpl29.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray32, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) 10L);
        double[] doubleArray22 = eigenDecompositionImpl21.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getV();
        double[] doubleArray17 = eigenDecompositionImpl11.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl7.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getV();
        java.lang.Class<?> wildcardClass12 = eigenDecompositionImpl7.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0L);
        double[] doubleArray11 = eigenDecompositionImpl10.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl10.getRealEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        double[] doubleArray17 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        double[] doubleArray23 = eigenDecompositionImpl22.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver24 = eigenDecompositionImpl22.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver25 = eigenDecompositionImpl22.getSolver();
        double double26 = eigenDecompositionImpl22.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver27 = eigenDecompositionImpl22.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver28 = eigenDecompositionImpl22.getSolver();
        double double29 = eigenDecompositionImpl22.getDeterminant();
        double[] doubleArray30 = eigenDecompositionImpl22.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray30, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver24);
        org.junit.Assert.assertNotNull(decompositionSolver25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver27);
        org.junit.Assert.assertNotNull(decompositionSolver28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl18.getVT();
        double double20 = eigenDecompositionImpl18.getDeterminant();
        double[] doubleArray21 = eigenDecompositionImpl18.getImagEigenvalues();
        double[] doubleArray22 = eigenDecompositionImpl18.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray22, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl16.getImagEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        double[] doubleArray14 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl11.getEigenvector((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl17.getSolver();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl17.getImagEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl11.getEigenvector(0);
        org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray21 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl11.getRealEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl11.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getVT();
        double double9 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector11 = eigenDecompositionImpl4.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl11.getEigenvector((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        double[] doubleArray22 = eigenDecompositionImpl17.getImagEigenvalues();
        double double23 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl17.getD();
        double double25 = eigenDecompositionImpl17.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        double[] doubleArray22 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl17.getD();
        double[] doubleArray24 = eigenDecompositionImpl17.getRealEigenvalues();
        double double25 = eigenDecompositionImpl17.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getVT();
        double double22 = eigenDecompositionImpl20.getDeterminant();
        double[] doubleArray23 = eigenDecompositionImpl20.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray23, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, (double) ' ');
        double double19 = eigenDecompositionImpl18.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl18.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl11.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl12.getRealEigenvalues();
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        double[] doubleArray24 = new double[] { (short) 0 };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray25, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray25, (double) 100.0f);
        double[] doubleArray30 = eigenDecompositionImpl29.getImagEigenvalues();
        double double31 = eigenDecompositionImpl29.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl29.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix32, 10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = eigenDecompositionImpl34.getVT();
        double[] doubleArray36 = eigenDecompositionImpl34.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray36, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getRealEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl11.getSolver();
        java.lang.Class<?> wildcardClass16 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        double double18 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray12 = new double[] { (short) 0 };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray13, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getV();
        double[] doubleArray17 = eigenDecompositionImpl15.getImagEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl15.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl15.getVT();
        double[] doubleArray20 = eigenDecompositionImpl15.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl15.getVT();
        double[] doubleArray22 = eigenDecompositionImpl15.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray22, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        java.lang.Class<?> wildcardClass13 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray12 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl33.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix34, (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix34);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getV();
        double double20 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix21, 1.0d);
        double double25 = eigenDecompositionImpl23.getImagEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray21, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver26 = eigenDecompositionImpl25.getSolver();
        double[] doubleArray27 = eigenDecompositionImpl25.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl25.getD();
        double[] doubleArray29 = eigenDecompositionImpl25.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray29, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl11.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        java.lang.Class<?> wildcardClass11 = realMatrix10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix20, (double) (-1));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double double17 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray19 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealVector realVector21 = eigenDecompositionImpl11.getEigenvector(0);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl16.getImagEigenvalue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) '4');
        java.lang.Class<?> wildcardClass11 = eigenDecompositionImpl10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 100);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, 10.0d);
        org.apache.commons.math.linear.RealVector realVector14 = eigenDecompositionImpl12.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl12.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl22.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double25 = eigenDecompositionImpl22.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0L);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getD();
        double[] doubleArray22 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray24 = new double[] { (short) 0 };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray25, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl27.getVT();
        double double29 = eigenDecompositionImpl27.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector31 = eigenDecompositionImpl27.getEigenvector(0);
        double double32 = eigenDecompositionImpl27.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl27.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix33, (double) 10L);
        double double36 = eigenDecompositionImpl35.getDeterminant();
        double[] doubleArray37 = eigenDecompositionImpl35.getImagEigenvalues();
        double double38 = eigenDecompositionImpl35.getDeterminant();
        double[] doubleArray39 = eigenDecompositionImpl35.getImagEigenvalues();
        double[] doubleArray40 = eigenDecompositionImpl35.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl42 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray40, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0]");
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getVT();
        double[] doubleArray21 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl11.getEigenvector((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        double[] doubleArray16 = eigenDecompositionImpl15.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl15.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = new double[] { (short) 0 };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray9, 100.0d);
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray14, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl18.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl18.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl18.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl18.getD();
        double[] doubleArray23 = eigenDecompositionImpl18.getImagEigenvalues();
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray31, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl37 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray31, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray31, (double) 100L);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver40 = eigenDecompositionImpl39.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double42 = eigenDecompositionImpl39.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver40);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        double[] doubleArray31 = eigenDecompositionImpl30.getImagEigenvalues();
        double[] doubleArray32 = eigenDecompositionImpl30.getImagEigenvalues();
        double[] doubleArray33 = eigenDecompositionImpl30.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl30.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) '4');
        java.lang.Class<?> wildcardClass20 = realMatrix17.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl7.getEigenvector((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        double[] doubleArray19 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getVT();
        double double26 = eigenDecompositionImpl24.getDeterminant();
        double[] doubleArray27 = eigenDecompositionImpl24.getImagEigenvalues();
        double[] doubleArray28 = eigenDecompositionImpl24.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray28, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        double[] doubleArray16 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (-1));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        java.lang.Class<?> wildcardClass11 = eigenDecompositionImpl10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getVT();
        double[] doubleArray21 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray12 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray20, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix25, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl27.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl27.getD();
        double double31 = eigenDecompositionImpl27.getRealEigenvalue((int) (short) 0);
        double[] doubleArray32 = eigenDecompositionImpl27.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray32, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        double double23 = eigenDecompositionImpl17.getRealEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.apache.commons.math.linear.RealMatrix realMatrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl2 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix0, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = new double[] { (short) 0 };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray12, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) (short) -1);
        double[] doubleArray20 = eigenDecompositionImpl19.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray20, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray21, (double) 100.0f);
        double[] doubleArray26 = eigenDecompositionImpl25.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray26, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getV();
        double[] doubleArray17 = eigenDecompositionImpl15.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getD();
        double double13 = eigenDecompositionImpl7.getRealEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) (short) 1);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl21.getSolver();
        double double24 = eigenDecompositionImpl21.getRealEigenvalue((int) (short) 0);
        java.lang.Class<?> wildcardClass25 = eigenDecompositionImpl21.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        java.lang.Class<?> wildcardClass11 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl12.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl12.getRealEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getVT();
        double[] doubleArray11 = eigenDecompositionImpl9.getImagEigenvalues();
        double[] doubleArray12 = eigenDecompositionImpl9.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl9.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1.0f);
        double[] doubleArray19 = eigenDecompositionImpl18.getImagEigenvalues();
        double double20 = eigenDecompositionImpl18.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray12 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray19 = eigenDecompositionImpl11.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray12 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl7.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl7.getImagEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver29 = eigenDecompositionImpl28.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl28.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl28.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl28.getVT();
        double double33 = eigenDecompositionImpl28.getDeterminant();
        double[] doubleArray34 = eigenDecompositionImpl28.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray34, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double double17 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray19 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getVT();
        double[] doubleArray15 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl4.getImagEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray15 = eigenDecompositionImpl7.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray23, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl27.getVT();
        double[] doubleArray29 = eigenDecompositionImpl27.getImagEigenvalues();
        double[] doubleArray30 = eigenDecompositionImpl27.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray30, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) '#');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = new double[] { (short) 0 };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray9, 100.0d);
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray14, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl18.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl18.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl18.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl18.getD();
        double[] doubleArray23 = eigenDecompositionImpl18.getImagEigenvalues();
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray31, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl37 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray31, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray31, (double) 100L);
        org.apache.commons.math.linear.RealVector realVector41 = eigenDecompositionImpl39.getEigenvector(0);
        double double42 = eigenDecompositionImpl39.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl7.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getV();
        double double20 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl16.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl16.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        double double16 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl4.getEigenvector((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double double12 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        java.lang.Class<?> wildcardClass14 = realMatrix13.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 1L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl12.getSolver();
        double[] doubleArray16 = eigenDecompositionImpl12.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl12.getEigenvector((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl4.getV();
        double double17 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) ' ');
        double[] doubleArray22 = eigenDecompositionImpl21.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl21.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        double double14 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 0);
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl15.getSolver();
        double double18 = eigenDecompositionImpl15.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl18.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl11.getSolver();
        java.lang.Class<?> wildcardClass18 = decompositionSolver17.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl30.getD();
        double[] doubleArray33 = eigenDecompositionImpl30.getImagEigenvalues();
        double[] doubleArray35 = new double[] { (short) 0 };
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray35, doubleArray36, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = eigenDecompositionImpl38.getV();
        double[] doubleArray40 = eigenDecompositionImpl38.getImagEigenvalues();
        double[] doubleArray41 = eigenDecompositionImpl38.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = eigenDecompositionImpl38.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl44 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix42, (double) 10L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl46 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix42, (double) ' ');
        double[] doubleArray47 = eigenDecompositionImpl46.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl49 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray33, doubleArray47, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        double[] doubleArray18 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix25, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl27.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver29 = eigenDecompositionImpl27.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl27.getVT();
        double[] doubleArray31 = eigenDecompositionImpl27.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray31, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(decompositionSolver29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) ' ');
        double[] doubleArray13 = eigenDecompositionImpl12.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray22, (double) 100.0f);
        double[] doubleArray27 = eigenDecompositionImpl26.getImagEigenvalues();
        double double28 = eigenDecompositionImpl26.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl26.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix29, 10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl31.getVT();
        double[] doubleArray33 = eigenDecompositionImpl31.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray33, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        double[] doubleArray9 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getD();
        double double11 = eigenDecompositionImpl7.getDeterminant();
        java.lang.Class<?> wildcardClass12 = eigenDecompositionImpl7.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl33.getVT();
        double[] doubleArray35 = eigenDecompositionImpl33.getRealEigenvalues();
        double[] doubleArray36 = eigenDecompositionImpl33.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl14.getSolver();
        double double16 = eigenDecompositionImpl14.getDeterminant();
        double[] doubleArray17 = eigenDecompositionImpl14.getRealEigenvalues();
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl22.getVT();
        double double25 = eigenDecompositionImpl22.getImagEigenvalue(0);
        double[] doubleArray26 = eigenDecompositionImpl22.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray26, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl11.getEigenvector((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix21, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl23.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl23.getD();
        double double26 = eigenDecompositionImpl23.getDeterminant();
        double double27 = eigenDecompositionImpl23.getDeterminant();
        double[] doubleArray28 = eigenDecompositionImpl23.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray28, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl33.getVT();
        double[] doubleArray35 = eigenDecompositionImpl33.getRealEigenvalues();
        double double36 = eigenDecompositionImpl33.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getVT();
        double double19 = eigenDecompositionImpl17.getDeterminant();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getD();
        double double22 = eigenDecompositionImpl17.getDeterminant();
        double[] doubleArray23 = eigenDecompositionImpl17.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray23, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getV();
        double double21 = eigenDecompositionImpl16.getDeterminant();
        double double22 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray23 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl16.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl16.getSolver();
        double double23 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix24, (double) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl17.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl16.getSolver();
        double[] doubleArray19 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getV();
        double[] doubleArray26 = eigenDecompositionImpl24.getImagEigenvalues();
        double double27 = eigenDecompositionImpl24.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector29 = eigenDecompositionImpl24.getEigenvector((int) (byte) 0);
        double[] doubleArray30 = eigenDecompositionImpl24.getImagEigenvalues();
        double[] doubleArray31 = eigenDecompositionImpl24.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray31, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = new double[] { (short) 0 };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray9, 100.0d);
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray14, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl18.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl18.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl18.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl18.getD();
        double[] doubleArray23 = eigenDecompositionImpl18.getImagEigenvalues();
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray31, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl37 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray31, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray31, (double) 100L);
        org.apache.commons.math.linear.RealVector realVector41 = eigenDecompositionImpl39.getEigenvector(0);
        java.lang.Class<?> wildcardClass42 = realVector41.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray12 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        double double21 = eigenDecompositionImpl17.getImagEigenvalue((int) (short) 0);
        double double22 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver24 = eigenDecompositionImpl17.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = eigenDecompositionImpl17.getRealEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(decompositionSolver24);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = eigenDecompositionImpl4.getRealEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.apache.commons.math.linear.RealMatrix realMatrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl2 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix0, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        double[] doubleArray14 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl13.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double15 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double double18 = eigenDecompositionImpl11.getImagEigenvalue((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl14.getSolver();
        double double18 = eigenDecompositionImpl14.getRealEigenvalue(0);
        double[] doubleArray19 = eigenDecompositionImpl14.getImagEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getVT();
        double[] doubleArray26 = eigenDecompositionImpl24.getImagEigenvalues();
        double[] doubleArray27 = eigenDecompositionImpl24.getRealEigenvalues();
        double[] doubleArray28 = eigenDecompositionImpl24.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray28, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl11.getImagEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray19 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray19 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray20 = eigenDecompositionImpl11.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double12 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray21, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver26 = eigenDecompositionImpl25.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = eigenDecompositionImpl25.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver28 = eigenDecompositionImpl25.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl25.getD();
        double[] doubleArray30 = eigenDecompositionImpl25.getImagEigenvalues();
        double[] doubleArray32 = new double[] { (short) 0 };
        double[] doubleArray33 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray32, doubleArray33, 100.0d);
        double[] doubleArray37 = new double[] { (short) 0 };
        double[] doubleArray38 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray37, doubleArray38, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl42 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray32, doubleArray38, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl44 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray38, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl46 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray38, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver47 = eigenDecompositionImpl46.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix48 = eigenDecompositionImpl46.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(decompositionSolver28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver47);
        org.junit.Assert.assertNotNull(realMatrix48);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl25.getVT();
        double double27 = eigenDecompositionImpl25.getDeterminant();
        double[] doubleArray28 = eigenDecompositionImpl25.getImagEigenvalues();
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        double[] doubleArray35 = new double[] { (short) 0 };
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray35, doubleArray36, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray36, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver41 = eigenDecompositionImpl40.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = eigenDecompositionImpl40.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver43 = eigenDecompositionImpl40.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = eigenDecompositionImpl40.getD();
        double[] doubleArray45 = eigenDecompositionImpl40.getImagEigenvalues();
        double[] doubleArray47 = new double[] { (short) 0 };
        double[] doubleArray48 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl50 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray47, doubleArray48, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl52 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray45, doubleArray48, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl54 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray48, (double) 100.0f);
        double[] doubleArray56 = new double[] { (short) 0 };
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl59 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray56, doubleArray57, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = eigenDecompositionImpl59.getVT();
        double double61 = eigenDecompositionImpl59.getDeterminant();
        double[] doubleArray62 = eigenDecompositionImpl59.getImagEigenvalues();
        double[] doubleArray64 = new double[] { (short) 0 };
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl67 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray64, doubleArray65, 100.0d);
        double[] doubleArray69 = new double[] { (short) 0 };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl72 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray69, doubleArray70, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl74 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray64, doubleArray70, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver75 = eigenDecompositionImpl74.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix76 = eigenDecompositionImpl74.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver77 = eigenDecompositionImpl74.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix78 = eigenDecompositionImpl74.getD();
        double[] doubleArray79 = eigenDecompositionImpl74.getImagEigenvalues();
        double[] doubleArray81 = new double[] { (short) 0 };
        double[] doubleArray82 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl84 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray81, doubleArray82, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl86 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray79, doubleArray82, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl88 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray62, doubleArray82, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl90 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray82, (-1.0d));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl92 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray82, (double) (short) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = eigenDecompositionImpl92.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl95 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix93, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = eigenDecompositionImpl95.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(decompositionSolver43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(decompositionSolver77);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(realMatrix93);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl9.getImagEigenvalue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] { (short) 0 };
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl5 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray2, doubleArray3, 100.0d);
        double[] doubleArray7 = new double[] { (short) 0 };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray8, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray2, doubleArray8, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl12.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl12.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl12.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl12.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, (double) 1);
        double double19 = eigenDecompositionImpl18.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl18.getV();
        double[] doubleArray21 = eigenDecompositionImpl18.getRealEigenvalues();
        double[] doubleArray22 = eigenDecompositionImpl18.getImagEigenvalues();
        double[] doubleArray23 = eigenDecompositionImpl18.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray0, doubleArray23, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.apache.commons.math.linear.RealMatrix realMatrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl2 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix0, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getVT();
        double double22 = eigenDecompositionImpl20.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector24 = eigenDecompositionImpl20.getEigenvector(0);
        double double25 = eigenDecompositionImpl20.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl20.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix26, (double) 10L);
        double[] doubleArray29 = eigenDecompositionImpl28.getImagEigenvalues();
        double[] doubleArray31 = new double[] { (short) 0 };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray31, doubleArray32, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray29, doubleArray32, (double) 'a');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver37 = eigenDecompositionImpl36.getSolver();
        double[] doubleArray38 = eigenDecompositionImpl36.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray38, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0]");
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        java.lang.Class<?> wildcardClass11 = realMatrix10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double15 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 0);
        double double15 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double double16 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver17);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getV();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver19);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl14.getImagEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray19, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl23.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver25 = eigenDecompositionImpl23.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl23.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix26, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl28.getV();
        double[] doubleArray30 = eigenDecompositionImpl28.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray30, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(decompositionSolver25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        double double22 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl17.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) 'a');
        double double12 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, 0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        double[] doubleArray13 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl33.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double36 = eigenDecompositionImpl33.getImagEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix34);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) -1);
        double[] doubleArray22 = eigenDecompositionImpl21.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl21.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl21.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1L);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getD();
        java.lang.Class<?> wildcardClass9 = eigenDecompositionImpl7.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl16.getImagEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl10.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getV();
        java.lang.Class<?> wildcardClass13 = eigenDecompositionImpl10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        double[] doubleArray14 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray23, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl27.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix28, (double) ' ');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        double[] doubleArray32 = eigenDecompositionImpl30.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray32, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getV();
        double[] doubleArray10 = eigenDecompositionImpl7.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = new double[] { (short) 0 };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray9, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl11.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getV();
        double double18 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 0);
        double[] doubleArray19 = eigenDecompositionImpl11.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray19, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl9.getEigenvector((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray12 = new double[] { (short) 0 };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray13, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getVT();
        double double18 = eigenDecompositionImpl15.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl15.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, 0.0d);
        double[] doubleArray22 = eigenDecompositionImpl21.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray22, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getVT();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector10 = eigenDecompositionImpl4.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        java.lang.Class<?> wildcardClass12 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl4.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl12.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl12.getEigenvector((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl17.getImagEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray22 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray23 = eigenDecompositionImpl17.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        double double19 = eigenDecompositionImpl14.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealVector realVector22 = eigenDecompositionImpl14.getEigenvector(0);
        double[] doubleArray23 = eigenDecompositionImpl14.getRealEigenvalues();
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl28.getVT();
        double double30 = eigenDecompositionImpl28.getDeterminant();
        double[] doubleArray31 = eigenDecompositionImpl28.getRealEigenvalues();
        double[] doubleArray33 = new double[] { (short) 0 };
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray33, doubleArray34, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray31, doubleArray34, (double) 0);
        double[] doubleArray39 = eigenDecompositionImpl38.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = eigenDecompositionImpl38.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver41 = eigenDecompositionImpl38.getSolver();
        double double43 = eigenDecompositionImpl38.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = eigenDecompositionImpl38.getV();
        org.apache.commons.math.linear.RealVector realVector46 = eigenDecompositionImpl38.getEigenvector(0);
        double[] doubleArray47 = eigenDecompositionImpl38.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl49 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray47, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(decompositionSolver41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0]");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getV();
        double[] doubleArray22 = eigenDecompositionImpl20.getImagEigenvalues();
        double[] doubleArray23 = eigenDecompositionImpl20.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl20.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix24, (double) 10L);
        double[] doubleArray27 = eigenDecompositionImpl26.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray27, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 1.0f);
        double[] doubleArray11 = eigenDecompositionImpl10.getImagEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        double double18 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray19 = eigenDecompositionImpl16.getImagEigenvalues();
        double[] doubleArray20 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl16.getSolver();
        double[] doubleArray22 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray23 = eigenDecompositionImpl16.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray23, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, 1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl18.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector21 = eigenDecompositionImpl18.getEigenvector((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl12.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100.0f);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl17.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        double double32 = eigenDecompositionImpl30.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector34 = eigenDecompositionImpl30.getEigenvector((int) (short) 0);
        double[] doubleArray35 = eigenDecompositionImpl30.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1L);
        java.lang.Class<?> wildcardClass17 = eigenDecompositionImpl16.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getImagEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getVT();
        double double21 = eigenDecompositionImpl19.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl19.getEigenvector(0);
        double double24 = eigenDecompositionImpl19.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl19.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix25, (double) 10L);
        double[] doubleArray28 = eigenDecompositionImpl27.getImagEigenvalues();
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray31, (double) 'a');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver36 = eigenDecompositionImpl35.getSolver();
        double[] doubleArray37 = eigenDecompositionImpl35.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray37, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        double double18 = eigenDecompositionImpl11.getDeterminant();
        java.lang.Class<?> wildcardClass19 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix20, (double) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl22.getSolver();
        double[] doubleArray24 = eigenDecompositionImpl22.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray24, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        double[] doubleArray35 = new double[] { (short) 0 };
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray35, doubleArray36, 100.0d);
        double[] doubleArray40 = new double[] { (short) 0 };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl43 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray40, doubleArray41, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl45 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray35, doubleArray41, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = eigenDecompositionImpl45.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver47 = eigenDecompositionImpl45.getSolver();
        double[] doubleArray48 = eigenDecompositionImpl45.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl50 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray48, (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(decompositionSolver47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0]");
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, 0.0d);
        double[] doubleArray14 = eigenDecompositionImpl13.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl13.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl13.getVT();
        double[] doubleArray17 = eigenDecompositionImpl13.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        double double21 = eigenDecompositionImpl17.getImagEigenvalue((int) (short) 0);
        double double22 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl17.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver23);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray19 = eigenDecompositionImpl11.getRealEigenvalues();
        double double21 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, 10.0d);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double[] doubleArray13 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl12.getD();
        double double16 = eigenDecompositionImpl12.getImagEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (-1.0d));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, 1.0d);
        java.lang.Class<?> wildcardClass20 = realMatrix15.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) '4');
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double double12 = eigenDecompositionImpl10.getDeterminant();
        double[] doubleArray13 = eigenDecompositionImpl10.getRealEigenvalues();
        java.lang.Class<?> wildcardClass14 = eigenDecompositionImpl10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) (-1));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double[] doubleArray13 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl12.getRealEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix21, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver24 = eigenDecompositionImpl23.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver25 = eigenDecompositionImpl23.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl23.getVT();
        double[] doubleArray27 = eigenDecompositionImpl23.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl23.getV();
        double[] doubleArray29 = eigenDecompositionImpl23.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver30 = eigenDecompositionImpl23.getSolver();
        double[] doubleArray31 = eigenDecompositionImpl23.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray31, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver24);
        org.junit.Assert.assertNotNull(decompositionSolver25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, 0.0d);
        double[] doubleArray14 = eigenDecompositionImpl13.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl13.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl14.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl16.getSolver();
        double[] doubleArray23 = eigenDecompositionImpl16.getRealEigenvalues();
        double double24 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = eigenDecompositionImpl16.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix27);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = eigenDecompositionImpl4.getRealEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray17 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        double[] doubleArray24 = new double[] { (short) 0 };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray25, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray25, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver30 = eigenDecompositionImpl29.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = eigenDecompositionImpl29.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver32 = eigenDecompositionImpl29.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl29.getVT();
        double double34 = eigenDecompositionImpl29.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = eigenDecompositionImpl29.getD();
        double double36 = eigenDecompositionImpl29.getDeterminant();
        double double37 = eigenDecompositionImpl29.getDeterminant();
        double[] doubleArray38 = eigenDecompositionImpl29.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray38, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(decompositionSolver32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0]");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getRealEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 1.0f);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double[] doubleArray12 = eigenDecompositionImpl10.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl12.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100.0f);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl17.getEigenvector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl25.getVT();
        double double27 = eigenDecompositionImpl25.getDeterminant();
        double[] doubleArray28 = eigenDecompositionImpl25.getImagEigenvalues();
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        double[] doubleArray35 = new double[] { (short) 0 };
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray35, doubleArray36, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray36, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver41 = eigenDecompositionImpl40.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = eigenDecompositionImpl40.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver43 = eigenDecompositionImpl40.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = eigenDecompositionImpl40.getD();
        double[] doubleArray45 = eigenDecompositionImpl40.getImagEigenvalues();
        double[] doubleArray47 = new double[] { (short) 0 };
        double[] doubleArray48 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl50 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray47, doubleArray48, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl52 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray45, doubleArray48, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl54 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray48, (double) 100.0f);
        double[] doubleArray56 = new double[] { (short) 0 };
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl59 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray56, doubleArray57, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = eigenDecompositionImpl59.getVT();
        double double61 = eigenDecompositionImpl59.getDeterminant();
        double[] doubleArray62 = eigenDecompositionImpl59.getImagEigenvalues();
        double[] doubleArray64 = new double[] { (short) 0 };
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl67 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray64, doubleArray65, 100.0d);
        double[] doubleArray69 = new double[] { (short) 0 };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl72 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray69, doubleArray70, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl74 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray64, doubleArray70, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver75 = eigenDecompositionImpl74.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix76 = eigenDecompositionImpl74.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver77 = eigenDecompositionImpl74.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix78 = eigenDecompositionImpl74.getD();
        double[] doubleArray79 = eigenDecompositionImpl74.getImagEigenvalues();
        double[] doubleArray81 = new double[] { (short) 0 };
        double[] doubleArray82 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl84 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray81, doubleArray82, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl86 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray79, doubleArray82, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl88 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray62, doubleArray82, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl90 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray82, (-1.0d));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl92 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray82, (double) (short) 10);
        org.apache.commons.math.linear.RealVector realVector94 = eigenDecompositionImpl92.getEigenvector(0);
        double double95 = eigenDecompositionImpl92.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector97 = eigenDecompositionImpl92.getEigenvector((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(decompositionSolver43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(decompositionSolver77);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(realVector94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        double[] doubleArray31 = eigenDecompositionImpl30.getImagEigenvalues();
        double[] doubleArray32 = eigenDecompositionImpl30.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl30.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl30.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = eigenDecompositionImpl30.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrix35);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix20, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix20, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector26 = eigenDecompositionImpl24.getEigenvector((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double double13 = eigenDecompositionImpl11.getRealEigenvalue(0);
        java.lang.Class<?> wildcardClass14 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) (short) 100);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (byte) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getRealEigenvalues();
        double double17 = eigenDecompositionImpl14.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl14.getV();
        double[] doubleArray21 = eigenDecompositionImpl14.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl14.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100.0f);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl17.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double17 = eigenDecompositionImpl11.getImagEigenvalue(0);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl11.getRealEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getD();
        double[] doubleArray19 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector33 = eigenDecompositionImpl31.getEigenvector((int) (byte) 0);
        double[] doubleArray34 = eigenDecompositionImpl31.getRealEigenvalues();
        double[] doubleArray35 = eigenDecompositionImpl31.getImagEigenvalues();
        double[] doubleArray36 = eigenDecompositionImpl31.getImagEigenvalues();
        double[] doubleArray37 = eigenDecompositionImpl31.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray37, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl22.getD();
        double[] doubleArray24 = eigenDecompositionImpl22.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        double[] doubleArray31 = new double[] { (short) 0 };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray31, doubleArray32, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray32, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver37 = eigenDecompositionImpl36.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = eigenDecompositionImpl36.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver39 = eigenDecompositionImpl36.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = eigenDecompositionImpl36.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl42 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix40, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = eigenDecompositionImpl42.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = eigenDecompositionImpl42.getD();
        double double45 = eigenDecompositionImpl42.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = eigenDecompositionImpl42.getV();
        double[] doubleArray47 = eigenDecompositionImpl42.getImagEigenvalues();
        double double49 = eigenDecompositionImpl42.getRealEigenvalue((int) (short) 0);
        double[] doubleArray50 = eigenDecompositionImpl42.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl52 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray50, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(decompositionSolver39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getVT();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl17.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) 100L);
        java.lang.Class<?> wildcardClass12 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray10 = new double[] { (short) 0 };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray11, 100.0d);
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray16, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl20.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl20.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl20.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl20.getVT();
        double double25 = eigenDecompositionImpl20.getDeterminant();
        double[] doubleArray26 = eigenDecompositionImpl20.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray26, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) ' ');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl19.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector24 = eigenDecompositionImpl19.getEigenvector((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (byte) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getRealEigenvalues();
        double double17 = eigenDecompositionImpl14.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl14.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl14.getRealEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        double[] doubleArray17 = eigenDecompositionImpl15.getRealEigenvalues();
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        double[] doubleArray24 = new double[] { (short) 0 };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray25, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray25, (double) 100.0f);
        double[] doubleArray30 = eigenDecompositionImpl29.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = eigenDecompositionImpl29.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl29.getV();
        double[] doubleArray33 = eigenDecompositionImpl29.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray33, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) ' ');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) '#');
        double[] doubleArray10 = eigenDecompositionImpl9.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl9.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray12 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getVT();
        double double19 = eigenDecompositionImpl17.getDeterminant();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        double double22 = eigenDecompositionImpl17.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray23 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray24 = eigenDecompositionImpl17.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray24, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl7.getD();
        double[] doubleArray16 = eigenDecompositionImpl7.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl7.getImagEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl7.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getD();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        double double17 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        double[] doubleArray22 = eigenDecompositionImpl17.getImagEigenvalues();
        double double24 = eigenDecompositionImpl17.getRealEigenvalue((int) (short) 0);
        double double25 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver26 = eigenDecompositionImpl17.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver26);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        java.lang.Class<?> wildcardClass15 = realMatrix14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 0);
        double double17 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl16.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getV();
        java.lang.Class<?> wildcardClass21 = realMatrix20.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] { (short) 0 };
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl5 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray2, doubleArray3, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl5.getVT();
        double double7 = eigenDecompositionImpl5.getDeterminant();
        double double8 = eigenDecompositionImpl5.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl5.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl5.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray0, doubleArray10, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, 0.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = eigenDecompositionImpl4.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl7.getD();
        double[] doubleArray16 = eigenDecompositionImpl7.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl7.getEigenvector(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) -1);
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) (byte) 100);
        double[] doubleArray21 = eigenDecompositionImpl20.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl20.getEigenvector((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl11.getEigenvector(0);
        double[] doubleArray17 = eigenDecompositionImpl11.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray12, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl15.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl15.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl15.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getD();
        double[] doubleArray15 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        double[] doubleArray11 = eigenDecompositionImpl9.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl9.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl7.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl16.getSolver();
        double[] doubleArray23 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl28.getVT();
        double double30 = eigenDecompositionImpl28.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector32 = eigenDecompositionImpl28.getEigenvector(0);
        double double33 = eigenDecompositionImpl28.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl28.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix34, (double) 10L);
        double[] doubleArray37 = eigenDecompositionImpl36.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray37, 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl33.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector36 = eigenDecompositionImpl33.getEigenvector((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix34);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl4.getD();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray8, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray12 = eigenDecompositionImpl7.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl7.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = eigenDecompositionImpl4.getRealEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        double[] doubleArray14 = eigenDecompositionImpl13.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl13.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = eigenDecompositionImpl13.getEigenvector((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl14.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl14.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl4.getImagEigenvalues();
        java.lang.Class<?> wildcardClass16 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        double double14 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 0);
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl11.getEigenvector((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        double[] doubleArray14 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl13.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getVT();
        double[] doubleArray21 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray12 = eigenDecompositionImpl7.getImagEigenvalues();
        double double13 = eigenDecompositionImpl7.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100L);
        double double20 = eigenDecompositionImpl19.getDeterminant();
        double double21 = eigenDecompositionImpl19.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        double double14 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 0);
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl11.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getImagEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray12 = new double[] { (short) 0 };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray13, 100.0d);
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray18, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl22.getD();
        double double25 = eigenDecompositionImpl22.getImagEigenvalue((int) (short) 0);
        double[] doubleArray26 = eigenDecompositionImpl22.getImagEigenvalues();
        double[] doubleArray27 = eigenDecompositionImpl22.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray27, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        java.lang.Class<?> wildcardClass20 = eigenDecompositionImpl16.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double[] doubleArray13 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray16, (double) 'a');
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl25.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix26, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl28.getVT();
        double[] doubleArray30 = eigenDecompositionImpl28.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray30, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        java.lang.Class<?> wildcardClass11 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, (double) (-1));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        java.lang.Class<?> wildcardClass8 = decompositionSolver7.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) -1);
        double[] doubleArray22 = eigenDecompositionImpl21.getRealEigenvalues();
        java.lang.Class<?> wildcardClass23 = eigenDecompositionImpl21.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] { (short) 0 };
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl5 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray2, doubleArray3, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl5.getVT();
        double double7 = eigenDecompositionImpl5.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl5.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl5.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl5.getD();
        double double12 = eigenDecompositionImpl5.getDeterminant();
        double[] doubleArray13 = eigenDecompositionImpl5.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray0, doubleArray13, (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        double[] doubleArray14 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl13.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl13.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl13.getRealEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, 1.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector22 = eigenDecompositionImpl16.getEigenvector(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getD();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        java.lang.Class<?> wildcardClass8 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getVT();
        double double22 = eigenDecompositionImpl20.getDeterminant();
        double[] doubleArray23 = eigenDecompositionImpl20.getImagEigenvalues();
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray31, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver36 = eigenDecompositionImpl35.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = eigenDecompositionImpl35.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver38 = eigenDecompositionImpl35.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = eigenDecompositionImpl35.getD();
        double[] doubleArray40 = eigenDecompositionImpl35.getImagEigenvalues();
        double[] doubleArray42 = new double[] { (short) 0 };
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl45 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray42, doubleArray43, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl47 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray40, doubleArray43, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl49 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray43, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl51 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray23, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(decompositionSolver38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getD();
        java.lang.Class<?> wildcardClass22 = realMatrix21.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = new double[] { (short) 0 };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray12, 100.0d);
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray17, (double) 100.0f);
        double double23 = eigenDecompositionImpl21.getRealEigenvalue(0);
        double[] doubleArray24 = eigenDecompositionImpl21.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray24, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double12 = eigenDecompositionImpl4.getImagEigenvalue(0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        java.lang.Class<?> wildcardClass13 = realMatrix12.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl12.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl12.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.RealVector realVector21 = eigenDecompositionImpl17.getEigenvector(0);
        double[] doubleArray22 = eigenDecompositionImpl17.getRealEigenvalues();
        java.lang.Class<?> wildcardClass23 = eigenDecompositionImpl17.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        double[] doubleArray16 = eigenDecompositionImpl14.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl14.getRealEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl21.getImagEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        java.lang.Class<?> wildcardClass14 = doubleArray13.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl30.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector34 = eigenDecompositionImpl30.getEigenvector((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(decompositionSolver8);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl12.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl12.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl12.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getRealEigenvalues();
        java.lang.Class<?> wildcardClass17 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 'a');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl10.getSolver();
        java.lang.Class<?> wildcardClass12 = decompositionSolver11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl11.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl7.getRealEigenvalues();
        double[] doubleArray11 = new double[] { (short) 0 };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray12, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        double double16 = eigenDecompositionImpl14.getDeterminant();
        double[] doubleArray17 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl14.getSolver();
        double[] doubleArray20 = eigenDecompositionImpl14.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray20, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        java.lang.Class<?> wildcardClass11 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = new double[] { (short) 0 };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray12, 100.0d);
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray17, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl21.getSolver();
        double[] doubleArray23 = eigenDecompositionImpl21.getImagEigenvalues();
        double double24 = eigenDecompositionImpl21.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl21.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl21.getD();
        double[] doubleArray27 = eigenDecompositionImpl21.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray27, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl7.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl7.getRealEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) ' ');
        double[] doubleArray13 = eigenDecompositionImpl12.getRealEigenvalues();
        java.lang.Class<?> wildcardClass14 = doubleArray13.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray13 = eigenDecompositionImpl12.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl12.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl12.getSolver();
        double double16 = eigenDecompositionImpl12.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl12.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl12.getSolver();
        double double19 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray20 = eigenDecompositionImpl12.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray20, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver20);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getVT();
        org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl9.getEigenvector((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl11.getEigenvector(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, (double) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray10 = new double[] { (short) 0 };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray11, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl13.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1);
        org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl16.getEigenvector(0);
        double[] doubleArray19 = eigenDecompositionImpl16.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray19, (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        double[] doubleArray14 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getVT();
        double double21 = eigenDecompositionImpl19.getDeterminant();
        double[] doubleArray22 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray24 = new double[] { (short) 0 };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray25, 100.0d);
        double[] doubleArray29 = new double[] { (short) 0 };
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray29, doubleArray30, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray30, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver35 = eigenDecompositionImpl34.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = eigenDecompositionImpl34.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver37 = eigenDecompositionImpl34.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = eigenDecompositionImpl34.getD();
        double[] doubleArray39 = eigenDecompositionImpl34.getImagEigenvalues();
        double[] doubleArray41 = new double[] { (short) 0 };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl44 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray41, doubleArray42, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl46 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray39, doubleArray42, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl48 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray42, (double) 100.0f);
        double[] doubleArray50 = new double[] { (short) 0 };
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl53 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray50, doubleArray51, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix54 = eigenDecompositionImpl53.getVT();
        double double55 = eigenDecompositionImpl53.getDeterminant();
        double[] doubleArray56 = eigenDecompositionImpl53.getImagEigenvalues();
        double[] doubleArray58 = new double[] { (short) 0 };
        double[] doubleArray59 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl61 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray58, doubleArray59, 100.0d);
        double[] doubleArray63 = new double[] { (short) 0 };
        double[] doubleArray64 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl66 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray63, doubleArray64, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl68 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray58, doubleArray64, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver69 = eigenDecompositionImpl68.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix70 = eigenDecompositionImpl68.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver71 = eigenDecompositionImpl68.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix72 = eigenDecompositionImpl68.getD();
        double[] doubleArray73 = eigenDecompositionImpl68.getImagEigenvalues();
        double[] doubleArray75 = new double[] { (short) 0 };
        double[] doubleArray76 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl78 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray75, doubleArray76, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl80 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray73, doubleArray76, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl82 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray56, doubleArray76, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl84 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray76, (-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl86 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray22, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(decompositionSolver37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver69);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(decompositionSolver71);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        double[] doubleArray9 = eigenDecompositionImpl7.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector11 = eigenDecompositionImpl7.getEigenvector((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl11.getRealEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) '4');
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        java.lang.Class<?> wildcardClass12 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix20, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = eigenDecompositionImpl22.getRealEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl21.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl21.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        java.lang.Class<?> wildcardClass17 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        java.lang.Class<?> wildcardClass8 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = eigenDecompositionImpl11.getEigenvector((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = new double[] { (short) 0 };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray12, 100.0d);
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray17, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix22, (double) (byte) 0);
        double[] doubleArray25 = eigenDecompositionImpl24.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray25, 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        double double11 = eigenDecompositionImpl10.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl10.getEigenvector((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getVT();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl11.getRealEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        java.lang.Class<?> wildcardClass10 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl18.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl17.getEigenvector((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl11.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl7.getImagEigenvalues();
        java.lang.Class<?> wildcardClass11 = eigenDecompositionImpl7.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        java.lang.Class<?> wildcardClass14 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl10.getRealEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl17.getEigenvector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        double double16 = eigenDecompositionImpl15.getDeterminant();
        double[] doubleArray17 = eigenDecompositionImpl15.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl11.getRealEigenvalue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        double double22 = eigenDecompositionImpl16.getImagEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getVT();
        double[] doubleArray21 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl11.getEigenvector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        double[] doubleArray12 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getVT();
        double double19 = eigenDecompositionImpl17.getDeterminant();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        double double21 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl17.getSolver();
        double double23 = eigenDecompositionImpl17.getDeterminant();
        double double25 = eigenDecompositionImpl17.getRealEigenvalue(0);
        double[] doubleArray26 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray28 = new double[] { (short) 0 };
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray29, 100.0d);
        double[] doubleArray33 = new double[] { (short) 0 };
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray33, doubleArray34, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray34, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver39 = eigenDecompositionImpl38.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = eigenDecompositionImpl38.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver41 = eigenDecompositionImpl38.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = eigenDecompositionImpl38.getD();
        double[] doubleArray43 = eigenDecompositionImpl38.getImagEigenvalues();
        double[] doubleArray45 = new double[] { (short) 0 };
        double[] doubleArray46 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl48 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray45, doubleArray46, 100.0d);
        double[] doubleArray50 = new double[] { (short) 0 };
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl53 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray50, doubleArray51, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl55 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray45, doubleArray51, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl57 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray43, doubleArray51, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl59 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray51, (double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl61 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray26, (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(decompositionSolver41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl20.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl4.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        java.lang.Class<?> wildcardClass13 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        java.lang.Class<?> wildcardClass10 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] { (short) 0 };
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl5 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray2, doubleArray3, 100.0d);
        double[] doubleArray7 = new double[] { (short) 0 };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray8, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray2, doubleArray8, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector14 = eigenDecompositionImpl12.getEigenvector((int) (byte) 0);
        double[] doubleArray15 = eigenDecompositionImpl12.getRealEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl12.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray0, doubleArray17, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) '#');
        double double15 = eigenDecompositionImpl14.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl14.getRealEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl14.getD();
        java.lang.Class<?> wildcardClass19 = eigenDecompositionImpl14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray19, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl23.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix24, (double) ' ');
        double[] doubleArray27 = eigenDecompositionImpl26.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray27, (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getV();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl22.getVT();
        double double24 = eigenDecompositionImpl22.getDeterminant();
        double[] doubleArray25 = eigenDecompositionImpl22.getRealEigenvalues();
        double[] doubleArray27 = new double[] { (short) 0 };
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray27, doubleArray28, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray28, (double) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray25, (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) '4');
        double double11 = eigenDecompositionImpl10.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl11.getRealEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        double[] doubleArray18 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray27, (double) 100.0f);
        double[] doubleArray32 = eigenDecompositionImpl31.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray32, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 1);
        double double16 = eigenDecompositionImpl14.getRealEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double12 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getRealEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        java.lang.Class<?> wildcardClass13 = decompositionSolver12.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl30.getD();
        double[] doubleArray33 = eigenDecompositionImpl30.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = eigenDecompositionImpl30.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(decompositionSolver15);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = eigenDecompositionImpl21.getRealEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl16.getImagEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 1.0d);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl10.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl10.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        double double15 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl15.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl15.getRealEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl30.getD();
        double[] doubleArray33 = eigenDecompositionImpl30.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = eigenDecompositionImpl30.getRealEigenvalue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        double[] doubleArray12 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double12 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getD();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        java.lang.Class<?> wildcardClass14 = eigenDecompositionImpl7.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl18.getVT();
        double double20 = eigenDecompositionImpl18.getDeterminant();
        double[] doubleArray21 = eigenDecompositionImpl18.getRealEigenvalues();
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray24, (double) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray24, (double) 1.0f);
        double[] doubleArray32 = new double[] { (short) 0 };
        double[] doubleArray33 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray32, doubleArray33, 100.0d);
        double[] doubleArray37 = new double[] { (short) 0 };
        double[] doubleArray38 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray37, doubleArray38, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl42 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray32, doubleArray38, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver43 = eigenDecompositionImpl42.getSolver();
        double[] doubleArray44 = eigenDecompositionImpl42.getImagEigenvalues();
        double double45 = eigenDecompositionImpl42.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = eigenDecompositionImpl42.getVT();
        double[] doubleArray47 = eigenDecompositionImpl42.getRealEigenvalues();
        org.apache.commons.math.linear.RealVector realVector49 = eigenDecompositionImpl42.getEigenvector(0);
        org.apache.commons.math.linear.RealVector realVector51 = eigenDecompositionImpl42.getEigenvector((int) (byte) 0);
        double[] doubleArray52 = eigenDecompositionImpl42.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl54 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray52, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0]");
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0]");
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl11.getImagEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl25.getVT();
        double[] doubleArray27 = eigenDecompositionImpl25.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray27, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getVT();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray26, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl30.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl30.getD();
        double[] doubleArray34 = eigenDecompositionImpl30.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray34, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getVT();
        double double21 = eigenDecompositionImpl19.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl19.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl19.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl19.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver26 = eigenDecompositionImpl19.getSolver();
        double double28 = eigenDecompositionImpl19.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray29 = eigenDecompositionImpl19.getRealEigenvalues();
        double[] doubleArray30 = eigenDecompositionImpl19.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray30, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(decompositionSolver26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double double12 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getRealEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl7.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl30.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl30.getVT();
        double double35 = eigenDecompositionImpl30.getRealEigenvalue(0);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = eigenDecompositionImpl30.getImagEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl14.getSolver();
        double double18 = eigenDecompositionImpl14.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl14.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = new double[] { (short) 0 };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray12, 100.0d);
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray17, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl21.getEigenvector((int) (byte) 0);
        double[] doubleArray24 = eigenDecompositionImpl21.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl21.getVT();
        double[] doubleArray26 = eigenDecompositionImpl21.getRealEigenvalues();
        double double27 = eigenDecompositionImpl21.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver28 = eigenDecompositionImpl21.getSolver();
        double[] doubleArray29 = eigenDecompositionImpl21.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray29, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getD();
        double[] doubleArray12 = eigenDecompositionImpl7.getImagEigenvalues();
        java.lang.Class<?> wildcardClass13 = doubleArray12.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector((int) (byte) 0);
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        double[] doubleArray22 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl17.getD();
        double[] doubleArray24 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl29.getV();
        double[] doubleArray31 = eigenDecompositionImpl29.getImagEigenvalues();
        double[] doubleArray32 = eigenDecompositionImpl29.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl29.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix33, (double) 10L);
        double[] doubleArray36 = eigenDecompositionImpl35.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray36, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getD();
        java.lang.Class<?> wildcardClass12 = realMatrix11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl14.getEigenvector((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.apache.commons.math.linear.RealMatrix realMatrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl2 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix0, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, 0.0d);
        double double18 = eigenDecompositionImpl16.getImagEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getRealEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl16.getSolver();
        double[] doubleArray23 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray31, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = eigenDecompositionImpl35.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver37 = eigenDecompositionImpl35.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = eigenDecompositionImpl35.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = eigenDecompositionImpl35.getVT();
        double[] doubleArray40 = eigenDecompositionImpl35.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl42 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray40, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(decompositionSolver37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0]");
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) '4');
        java.lang.Class<?> wildcardClass21 = eigenDecompositionImpl20.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix20, 0.0d);
        double[] doubleArray23 = eigenDecompositionImpl22.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray23, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        java.lang.Class<?> wildcardClass12 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        double double32 = eigenDecompositionImpl30.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl30.getVT();
        double double34 = eigenDecompositionImpl30.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = eigenDecompositionImpl30.getVT();
        java.lang.Class<?> wildcardClass36 = realMatrix35.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 0.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix25);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray12 = new double[] { (short) 0 };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray13, 100.0d);
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray18, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl22.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix23, (double) (byte) 0);
        double[] doubleArray26 = eigenDecompositionImpl25.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray26, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) 10L);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getD();
        java.lang.Class<?> wildcardClass23 = eigenDecompositionImpl21.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl17.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl17.getD();
        double double23 = eigenDecompositionImpl17.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 0);
        java.lang.Class<?> wildcardClass17 = realMatrix14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) 100L);
        java.lang.Class<?> wildcardClass12 = realMatrix9.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (byte) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getRealEigenvalues();
        double double17 = eigenDecompositionImpl14.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl14.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl14.getRealEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl11.getEigenvector(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealVector realVector21 = eigenDecompositionImpl11.getEigenvector(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        double double32 = eigenDecompositionImpl30.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double34 = eigenDecompositionImpl30.getImagEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        double double9 = eigenDecompositionImpl7.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl14.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getVT();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl7.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector22 = eigenDecompositionImpl17.getEigenvector(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl12.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl12.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl12.getEigenvector((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver18);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double double12 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        java.lang.Class<?> wildcardClass18 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double double17 = eigenDecompositionImpl11.getDeterminant();
        double double18 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl12.getVT();
        double double14 = eigenDecompositionImpl12.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl12.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl12.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl12.getD();
        double double19 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray20 = eigenDecompositionImpl12.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray20, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        java.lang.Class<?> wildcardClass12 = decompositionSolver11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, 0.0d);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getVT();
        double double26 = eigenDecompositionImpl24.getDeterminant();
        double[] doubleArray27 = eigenDecompositionImpl24.getRealEigenvalues();
        double[] doubleArray28 = eigenDecompositionImpl24.getImagEigenvalues();
        double[] doubleArray29 = eigenDecompositionImpl24.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray29, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (byte) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl18.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getD();
        double[] doubleArray16 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl16.getImagEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        double[] doubleArray14 = eigenDecompositionImpl11.getImagEigenvalues();
        java.lang.Class<?> wildcardClass15 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        java.lang.Class<?> wildcardClass14 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getRealEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        java.lang.Class<?> wildcardClass19 = realMatrix18.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (byte) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getRealEigenvalues();
        double double17 = eigenDecompositionImpl14.getRealEigenvalue((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl14.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        java.lang.Class<?> wildcardClass12 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        double[] doubleArray35 = new double[] { (short) 0 };
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray35, doubleArray36, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = eigenDecompositionImpl38.getVT();
        double double40 = eigenDecompositionImpl38.getDeterminant();
        double[] doubleArray41 = eigenDecompositionImpl38.getImagEigenvalues();
        double[] doubleArray43 = new double[] { (short) 0 };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl46 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray43, doubleArray44, 100.0d);
        double[] doubleArray48 = new double[] { (short) 0 };
        double[] doubleArray49 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl51 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray48, doubleArray49, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl53 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray43, doubleArray49, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver54 = eigenDecompositionImpl53.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix55 = eigenDecompositionImpl53.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver56 = eigenDecompositionImpl53.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix57 = eigenDecompositionImpl53.getD();
        double[] doubleArray58 = eigenDecompositionImpl53.getImagEigenvalues();
        double[] doubleArray60 = new double[] { (short) 0 };
        double[] doubleArray61 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl63 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray60, doubleArray61, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl65 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray58, doubleArray61, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl67 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray41, doubleArray61, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl69 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray61, (-1.0d));
        double[] doubleArray71 = new double[] { (short) 0 };
        double[] doubleArray72 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl74 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray71, doubleArray72, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = eigenDecompositionImpl74.getVT();
        double[] doubleArray76 = eigenDecompositionImpl74.getImagEigenvalues();
        double[] doubleArray77 = eigenDecompositionImpl74.getRealEigenvalues();
        double[] doubleArray78 = eigenDecompositionImpl74.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl80 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray78, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver54);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(decompositionSolver56);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0]");
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl12.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100.0f);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        double[] doubleArray17 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector21 = eigenDecompositionImpl11.getEigenvector(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl4.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl15.getRealEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl11.getRealEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, (double) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] { (short) 0 };
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl5 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray2, doubleArray3, 100.0d);
        double[] doubleArray7 = new double[] { (short) 0 };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray8, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray2, doubleArray8, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl12.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl12.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl12.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl12.getD();
        double[] doubleArray17 = eigenDecompositionImpl12.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray0, doubleArray17, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getV();
        double double17 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray18 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl14.getEigenvector((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 'a');
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getVT();
        java.lang.Class<?> wildcardClass12 = realMatrix11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray18, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = eigenDecompositionImpl22.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, (double) 100.0f);
        double[] doubleArray14 = eigenDecompositionImpl13.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl13.getRealEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        java.lang.Class<?> wildcardClass20 = realMatrix19.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = eigenDecompositionImpl4.getRealEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl7.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = eigenDecompositionImpl7.getEigenvector((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = eigenDecompositionImpl11.getEigenvector(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getV();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl11.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl17.getSolver();
        double[] doubleArray23 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl17.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray21, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver26 = eigenDecompositionImpl25.getSolver();
        double[] doubleArray27 = eigenDecompositionImpl25.getImagEigenvalues();
        double double28 = eigenDecompositionImpl25.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl25.getVT();
        double[] doubleArray30 = eigenDecompositionImpl25.getRealEigenvalues();
        double[] doubleArray31 = eigenDecompositionImpl25.getRealEigenvalues();
        double double32 = eigenDecompositionImpl25.getDeterminant();
        double[] doubleArray33 = eigenDecompositionImpl25.getImagEigenvalues();
        double[] doubleArray34 = eigenDecompositionImpl25.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray34, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        java.lang.Class<?> wildcardClass20 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (short) 1);
        java.lang.Class<?> wildcardClass20 = eigenDecompositionImpl19.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        java.lang.Class<?> wildcardClass10 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getVT();
        double double21 = eigenDecompositionImpl19.getDeterminant();
        double double22 = eigenDecompositionImpl19.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl19.getSolver();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray24, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 10L);
        double double21 = eigenDecompositionImpl20.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl20.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl20.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double double9 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        java.lang.Class<?> wildcardClass34 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray12 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl7.getEigenvector(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl7.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl17.getRealEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        double double22 = eigenDecompositionImpl21.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl21.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver23);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        java.lang.Class<?> wildcardClass10 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray22, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver27 = eigenDecompositionImpl26.getSolver();
        double double28 = eigenDecompositionImpl26.getDeterminant();
        double[] doubleArray29 = eigenDecompositionImpl26.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray29, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 1L);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10L);
        java.lang.Class<?> wildcardClass11 = eigenDecompositionImpl10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        java.lang.Class<?> wildcardClass16 = realMatrix15.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getV();
        java.lang.Class<?> wildcardClass14 = eigenDecompositionImpl7.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1L);
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10L);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getV();
        double double13 = eigenDecompositionImpl10.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl10.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl17.getImagEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector21 = eigenDecompositionImpl17.getEigenvector(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = new double[] { (short) 0 };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray12, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        double double17 = eigenDecompositionImpl14.getImagEigenvalue(0);
        double[] doubleArray18 = eigenDecompositionImpl14.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray18, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = eigenDecompositionImpl7.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = eigenDecompositionImpl4.getImagEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl21.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double25 = eigenDecompositionImpl21.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = new double[] { (short) 0 };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray12, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        double[] doubleArray16 = eigenDecompositionImpl14.getImagEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl14.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray17, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getV();
        double double20 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl16.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = eigenDecompositionImpl16.getRealEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getD();
        double[] doubleArray22 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl11.getEigenvector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray22, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = eigenDecompositionImpl26.getVT();
        double[] doubleArray28 = eigenDecompositionImpl26.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray28, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (byte) -1);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl20.getImagEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl15.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl15.getImagEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getRealEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        double[] doubleArray0 = null;
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl3 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray0, doubleArray1, (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        double[] doubleArray14 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl16.getSolver();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl16.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver20);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl4.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl14.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl14.getRealEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double double17 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        double double19 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl25.getVT();
        double double27 = eigenDecompositionImpl25.getDeterminant();
        double[] doubleArray28 = eigenDecompositionImpl25.getImagEigenvalues();
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        double[] doubleArray35 = new double[] { (short) 0 };
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray35, doubleArray36, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray36, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver41 = eigenDecompositionImpl40.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = eigenDecompositionImpl40.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver43 = eigenDecompositionImpl40.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = eigenDecompositionImpl40.getD();
        double[] doubleArray45 = eigenDecompositionImpl40.getImagEigenvalues();
        double[] doubleArray47 = new double[] { (short) 0 };
        double[] doubleArray48 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl50 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray47, doubleArray48, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl52 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray45, doubleArray48, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl54 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray48, (double) 100.0f);
        double[] doubleArray56 = new double[] { (short) 0 };
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl59 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray56, doubleArray57, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = eigenDecompositionImpl59.getVT();
        double double61 = eigenDecompositionImpl59.getDeterminant();
        double[] doubleArray62 = eigenDecompositionImpl59.getImagEigenvalues();
        double[] doubleArray64 = new double[] { (short) 0 };
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl67 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray64, doubleArray65, 100.0d);
        double[] doubleArray69 = new double[] { (short) 0 };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl72 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray69, doubleArray70, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl74 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray64, doubleArray70, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver75 = eigenDecompositionImpl74.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix76 = eigenDecompositionImpl74.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver77 = eigenDecompositionImpl74.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix78 = eigenDecompositionImpl74.getD();
        double[] doubleArray79 = eigenDecompositionImpl74.getImagEigenvalues();
        double[] doubleArray81 = new double[] { (short) 0 };
        double[] doubleArray82 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl84 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray81, doubleArray82, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl86 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray79, doubleArray82, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl88 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray62, doubleArray82, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl90 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray82, (-1.0d));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl92 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray82, (double) (short) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = eigenDecompositionImpl92.getV();
        double[] doubleArray94 = eigenDecompositionImpl92.getImagEigenvalues();
        java.lang.Class<?> wildcardClass95 = eigenDecompositionImpl92.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(decompositionSolver43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(decompositionSolver77);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(realMatrix93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl11.getRealEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl13.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        double[] doubleArray18 = eigenDecompositionImpl14.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        double[] doubleArray14 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver29 = eigenDecompositionImpl28.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl28.getVT();
        double[] doubleArray31 = eigenDecompositionImpl28.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray31, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) (byte) 1);
        double double19 = eigenDecompositionImpl17.getImagEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getRealEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) (short) 100);
        java.lang.Class<?> wildcardClass13 = realMatrix8.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl17.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix21, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector25 = eigenDecompositionImpl23.getEigenvector((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getVT();
        org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl20.getEigenvector(0);
        double[] doubleArray24 = eigenDecompositionImpl20.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl21.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix23, (double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl4.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray10 = new double[] { (short) 0 };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray11, 100.0d);
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray16, (double) 100.0f);
        double[] doubleArray21 = eigenDecompositionImpl20.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl20.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl20.getD();
        double[] doubleArray24 = eigenDecompositionImpl20.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray24, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        double[] doubleArray31 = eigenDecompositionImpl30.getImagEigenvalues();
        double[] doubleArray32 = eigenDecompositionImpl30.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl30.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix33);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getRealEigenvalue((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl17.getImagEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double double18 = eigenDecompositionImpl16.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl16.getEigenvector((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl12.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl12.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl12.getRealEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver18);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl4.getEigenvector(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver29 = eigenDecompositionImpl28.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl28.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl28.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl28.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix32, (double) 1);
        double[] doubleArray35 = eigenDecompositionImpl34.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl37 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray35, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector11 = eigenDecompositionImpl4.getEigenvector((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double[] doubleArray13 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray16, (double) 'a');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl20.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl20.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl20.getV();
        double double24 = eigenDecompositionImpl20.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = eigenDecompositionImpl20.getRealEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        java.lang.Class<?> wildcardClass11 = eigenDecompositionImpl9.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        double[] doubleArray14 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl13.getRealEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl13.getRealEigenvalues();
        java.lang.Class<?> wildcardClass17 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.apache.commons.math.linear.RealMatrix realMatrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl2 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix0, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1.0f);
        double[] doubleArray19 = eigenDecompositionImpl18.getImagEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        double[] doubleArray25 = eigenDecompositionImpl24.getRealEigenvalues();
        double double26 = eigenDecompositionImpl24.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver27 = eigenDecompositionImpl24.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl24.getVT();
        double[] doubleArray29 = eigenDecompositionImpl24.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray29, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        java.lang.Class<?> wildcardClass21 = eigenDecompositionImpl17.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) '#');
        java.lang.Class<?> wildcardClass18 = realMatrix15.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getV();
        double[] doubleArray11 = eigenDecompositionImpl7.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl4.getImagEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        java.lang.Class<?> wildcardClass18 = realMatrix17.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(decompositionSolver8);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        double double19 = eigenDecompositionImpl14.getRealEigenvalue(0);
        double[] doubleArray20 = eigenDecompositionImpl14.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        java.lang.Class<?> wildcardClass15 = realMatrix14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray19, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector25 = eigenDecompositionImpl23.getEigenvector((int) (byte) 0);
        double[] doubleArray26 = eigenDecompositionImpl23.getRealEigenvalues();
        double[] doubleArray27 = eigenDecompositionImpl23.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray27, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double double17 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl16.getImagEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (byte) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getRealEigenvalues();
        double double17 = eigenDecompositionImpl14.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl14.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl14.getRealEigenvalue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray23, (double) 100.0f);
        double[] doubleArray28 = eigenDecompositionImpl27.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray28, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector10 = eigenDecompositionImpl4.getEigenvector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(decompositionSolver8);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl16.getV();
        double[] doubleArray23 = eigenDecompositionImpl16.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector25 = eigenDecompositionImpl16.getEigenvector((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        double double14 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 0);
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double17 = eigenDecompositionImpl11.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl11.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        double[] doubleArray12 = eigenDecompositionImpl4.getRealEigenvalues();
        java.lang.Class<?> wildcardClass13 = doubleArray12.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl11.getSolver();
        java.lang.Class<?> wildcardClass16 = decompositionSolver15.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl17.getSolver();
        org.apache.commons.math.linear.RealVector realVector21 = eigenDecompositionImpl17.getEigenvector((int) (short) 0);
        java.lang.Class<?> wildcardClass22 = realVector21.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        java.lang.Class<?> wildcardClass11 = realMatrix10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getVT();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        java.lang.Class<?> wildcardClass18 = doubleArray17.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl17.getRealEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        double double18 = eigenDecompositionImpl16.getDeterminant();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        double double20 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl16.getSolver();
        double double22 = eigenDecompositionImpl16.getDeterminant();
        double double23 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray24 = eigenDecompositionImpl16.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray24, 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl17.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl16.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl16.getImagEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl15.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl15.getD();
        double double20 = eigenDecompositionImpl15.getImagEigenvalue((int) (short) 0);
        double double21 = eigenDecompositionImpl15.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl15.getEigenvector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl4.getEigenvector(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double double12 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 0);
        double double15 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double double16 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl4.getEigenvector((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) 0L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 'a');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl10.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        java.lang.Class<?> wildcardClass16 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl11.getRealEigenvalue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl30.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix32, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix32, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        double[] doubleArray11 = eigenDecompositionImpl9.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl9.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl9.getVT();
        double double13 = eigenDecompositionImpl9.getImagEigenvalue((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl20.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl20.getSolver();
        double double23 = eigenDecompositionImpl20.getDeterminant();
        double[] doubleArray24 = eigenDecompositionImpl20.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray24, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        java.lang.Class<?> wildcardClass20 = realMatrix19.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        java.lang.Class<?> wildcardClass9 = realMatrix8.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        java.lang.Class<?> wildcardClass13 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10L);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray19, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver24 = eigenDecompositionImpl23.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl23.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix25, (double) (byte) 0);
        double[] doubleArray28 = eigenDecompositionImpl27.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray28, (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) '4');
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double double12 = eigenDecompositionImpl10.getDeterminant();
        double[] doubleArray13 = eigenDecompositionImpl10.getRealEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray21, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl25.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver27 = eigenDecompositionImpl25.getSolver();
        double[] doubleArray28 = eigenDecompositionImpl25.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl25.getD();
        double[] doubleArray30 = eigenDecompositionImpl25.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl25.getSolver();
        double[] doubleArray32 = eigenDecompositionImpl25.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray32, (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(decompositionSolver27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl9.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl13.getEigenvector((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl11.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl19.getRealEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray19, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl23.getD();
        double double26 = eigenDecompositionImpl23.getImagEigenvalue((int) (short) 0);
        double[] doubleArray27 = eigenDecompositionImpl23.getImagEigenvalues();
        double[] doubleArray28 = eigenDecompositionImpl23.getImagEigenvalues();
        double double29 = eigenDecompositionImpl23.getDeterminant();
        double[] doubleArray30 = eigenDecompositionImpl23.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray30, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl33.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector36 = eigenDecompositionImpl33.getEigenvector((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix34);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl16.getRealEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl10.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 0.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl14.getSolver();
        java.lang.Class<?> wildcardClass16 = eigenDecompositionImpl14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl18.getVT();
        double double20 = eigenDecompositionImpl18.getDeterminant();
        double double21 = eigenDecompositionImpl18.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl18.getSolver();
        double[] doubleArray23 = eigenDecompositionImpl18.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray23, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        double double14 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, (double) 100L);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl13.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl7.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl7.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getV();
        double[] doubleArray12 = eigenDecompositionImpl10.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray19, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver24 = eigenDecompositionImpl23.getSolver();
        double[] doubleArray25 = eigenDecompositionImpl23.getImagEigenvalues();
        double double26 = eigenDecompositionImpl23.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = eigenDecompositionImpl23.getVT();
        double[] doubleArray28 = eigenDecompositionImpl23.getRealEigenvalues();
        org.apache.commons.math.linear.RealVector realVector30 = eigenDecompositionImpl23.getEigenvector(0);
        org.apache.commons.math.linear.RealVector realVector32 = eigenDecompositionImpl23.getEigenvector((int) (byte) 0);
        double[] doubleArray33 = eigenDecompositionImpl23.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray33, (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 1.0d);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double[] doubleArray12 = eigenDecompositionImpl10.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl10.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver13);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl7.getSolver();
        double double11 = eigenDecompositionImpl7.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl4.getV();
        java.lang.Class<?> wildcardClass18 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.apache.commons.math.linear.RealMatrix realMatrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl2 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix0, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double[] doubleArray13 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray16, (double) 'a');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl20.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray12 = new double[] { (short) 0 };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray13, 100.0d);
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray18, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl22.getSolver();
        double double24 = eigenDecompositionImpl22.getDeterminant();
        double[] doubleArray25 = eigenDecompositionImpl22.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray25, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector11 = eigenDecompositionImpl4.getEigenvector((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double double17 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getVT();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl16.getEigenvector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        double double13 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1L);
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getVT();
        java.lang.Class<?> wildcardClass19 = realMatrix18.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl4.getEigenvector((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(decompositionSolver19);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) '4');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, 0.0d);
        double[] doubleArray14 = eigenDecompositionImpl13.getImagEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getV();
        double[] doubleArray21 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray22 = eigenDecompositionImpl19.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix23, (double) '4');
        double[] doubleArray26 = eigenDecompositionImpl25.getRealEigenvalues();
        double double27 = eigenDecompositionImpl25.getDeterminant();
        double[] doubleArray28 = eigenDecompositionImpl25.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray28, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getVT();
        double double24 = eigenDecompositionImpl21.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl21.getVT();
        double[] doubleArray26 = eigenDecompositionImpl21.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray26, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray22, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver27 = eigenDecompositionImpl26.getSolver();
        double[] doubleArray28 = eigenDecompositionImpl26.getImagEigenvalues();
        double double29 = eigenDecompositionImpl26.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl26.getVT();
        double[] doubleArray31 = eigenDecompositionImpl26.getRealEigenvalues();
        double[] doubleArray32 = eigenDecompositionImpl26.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray32, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl4.getEigenvector((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (short) 1);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        java.lang.Class<?> wildcardClass21 = eigenDecompositionImpl19.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        double[] doubleArray11 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl14.getSolver();
        double[] doubleArray16 = eigenDecompositionImpl14.getImagEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl14.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getVT();
        double[] doubleArray17 = eigenDecompositionImpl14.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        java.lang.Class<?> wildcardClass20 = eigenDecompositionImpl17.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, 0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl13.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl13.getVT();
        double double16 = eigenDecompositionImpl13.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl13.getEigenvector((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double12 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 0);
        java.lang.Class<?> wildcardClass13 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        double double32 = eigenDecompositionImpl30.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector34 = eigenDecompositionImpl30.getEigenvector((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = eigenDecompositionImpl30.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl37 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix35, (double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realMatrix35);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        java.lang.Class<?> wildcardClass17 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray10 = new double[] { (short) 0 };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray11, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl13.getVT();
        double double15 = eigenDecompositionImpl13.getDeterminant();
        double double16 = eigenDecompositionImpl13.getDeterminant();
        double double17 = eigenDecompositionImpl13.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl13.getSolver();
        double[] doubleArray19 = eigenDecompositionImpl13.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray19, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        java.lang.Class<?> wildcardClass12 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double double10 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0L);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        double double14 = eigenDecompositionImpl4.getDeterminant();
        java.lang.Class<?> wildcardClass15 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        double double14 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 0);
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver29 = eigenDecompositionImpl28.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl28.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = eigenDecompositionImpl28.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix31, (double) (byte) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix31, (double) 1.0f);
        double[] doubleArray36 = eigenDecompositionImpl35.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray36, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) '4');
        double double14 = eigenDecompositionImpl12.getImagEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        double double32 = eigenDecompositionImpl30.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector34 = eigenDecompositionImpl30.getEigenvector((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = eigenDecompositionImpl30.getV();
        double double37 = eigenDecompositionImpl30.getRealEigenvalue((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) '4');
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double double12 = eigenDecompositionImpl10.getDeterminant();
        double[] doubleArray13 = eigenDecompositionImpl10.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl10.getImagEigenvalue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        double[] doubleArray11 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getVT();
        java.lang.Class<?> wildcardClass13 = eigenDecompositionImpl7.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector((int) (short) 0);
        double double13 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getRealEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 1.0f);
        double[] doubleArray11 = eigenDecompositionImpl10.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl10.getEigenvector((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl12.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl12.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl12.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver18);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double double19 = eigenDecompositionImpl17.getDeterminant();
        double double21 = eigenDecompositionImpl17.getImagEigenvalue((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl14.getSolver();
        double double17 = eigenDecompositionImpl14.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        double double14 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray15 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray22, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver27 = eigenDecompositionImpl26.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl26.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver29 = eigenDecompositionImpl26.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl26.getVT();
        double double31 = eigenDecompositionImpl26.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl26.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix32, (double) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = eigenDecompositionImpl34.getVT();
        double[] doubleArray36 = eigenDecompositionImpl34.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray36, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(decompositionSolver29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getD();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        java.lang.Class<?> wildcardClass8 = realMatrix7.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl11.getEigenvector((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        java.lang.Class<?> wildcardClass12 = realMatrix9.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl21.getRealEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, 0.0d);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double double13 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1L);
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl16.getSolver();
        double double21 = eigenDecompositionImpl16.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        java.lang.Class<?> wildcardClass15 = realMatrix14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        double[] doubleArray19 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl10.getImagEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getVT();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl17.getEigenvector((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getD();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl7.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl7.getImagEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        java.lang.Class<?> wildcardClass14 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 0);
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double[] doubleArray13 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl12.getD();
        double[] doubleArray15 = eigenDecompositionImpl12.getImagEigenvalues();
        double double17 = eigenDecompositionImpl12.getImagEigenvalue((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl11.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl16.getSolver();
        double double23 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl16.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = eigenDecompositionImpl16.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        double double14 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl4.getImagEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double[] doubleArray20 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        double[] doubleArray27 = new double[] { (short) 0 };
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray27, doubleArray28, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray28, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver33 = eigenDecompositionImpl32.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl32.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver35 = eigenDecompositionImpl32.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = eigenDecompositionImpl32.getD();
        double[] doubleArray37 = eigenDecompositionImpl32.getImagEigenvalues();
        double[] doubleArray39 = new double[] { (short) 0 };
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl42 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray39, doubleArray40, 100.0d);
        double[] doubleArray44 = new double[] { (short) 0 };
        double[] doubleArray45 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl47 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray44, doubleArray45, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl49 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray39, doubleArray45, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl51 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray37, doubleArray45, (double) (short) 0);
        double[] doubleArray52 = eigenDecompositionImpl51.getImagEigenvalues();
        double[] doubleArray53 = eigenDecompositionImpl51.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl55 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray53, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver33);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(decompositionSolver35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0]");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        double double18 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl16.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix21, 0.0d);
        double[] doubleArray24 = eigenDecompositionImpl23.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray24, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        double double32 = eigenDecompositionImpl30.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl30.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = eigenDecompositionImpl30.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix33);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1L);
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl16.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl16.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl16.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl16.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double25 = eigenDecompositionImpl16.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(decompositionSolver23);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl4.getEigenvector((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, 10.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl21.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector25 = eigenDecompositionImpl21.getEigenvector((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl4.getRealEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray20, (double) 100.0f);
        double[] doubleArray25 = eigenDecompositionImpl24.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray25, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl25.getVT();
        double double27 = eigenDecompositionImpl25.getDeterminant();
        double[] doubleArray28 = eigenDecompositionImpl25.getImagEigenvalues();
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        double[] doubleArray35 = new double[] { (short) 0 };
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray35, doubleArray36, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray36, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver41 = eigenDecompositionImpl40.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = eigenDecompositionImpl40.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver43 = eigenDecompositionImpl40.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = eigenDecompositionImpl40.getD();
        double[] doubleArray45 = eigenDecompositionImpl40.getImagEigenvalues();
        double[] doubleArray47 = new double[] { (short) 0 };
        double[] doubleArray48 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl50 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray47, doubleArray48, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl52 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray45, doubleArray48, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl54 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray48, (double) 100.0f);
        double[] doubleArray56 = new double[] { (short) 0 };
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl59 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray56, doubleArray57, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = eigenDecompositionImpl59.getVT();
        double double61 = eigenDecompositionImpl59.getDeterminant();
        double[] doubleArray62 = eigenDecompositionImpl59.getImagEigenvalues();
        double[] doubleArray64 = new double[] { (short) 0 };
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl67 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray64, doubleArray65, 100.0d);
        double[] doubleArray69 = new double[] { (short) 0 };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl72 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray69, doubleArray70, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl74 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray64, doubleArray70, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver75 = eigenDecompositionImpl74.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix76 = eigenDecompositionImpl74.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver77 = eigenDecompositionImpl74.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix78 = eigenDecompositionImpl74.getD();
        double[] doubleArray79 = eigenDecompositionImpl74.getImagEigenvalues();
        double[] doubleArray81 = new double[] { (short) 0 };
        double[] doubleArray82 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl84 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray81, doubleArray82, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl86 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray79, doubleArray82, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl88 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray62, doubleArray82, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl90 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray28, doubleArray82, (-1.0d));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl92 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray82, (double) (short) 10);
        org.apache.commons.math.linear.RealVector realVector94 = eigenDecompositionImpl92.getEigenvector(0);
        double double95 = eigenDecompositionImpl92.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double97 = eigenDecompositionImpl92.getImagEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(decompositionSolver43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(decompositionSolver77);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(realVector94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double double17 = eigenDecompositionImpl11.getImagEigenvalue(0);
        double double18 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray12 = new double[] { (short) 0 };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray13, 100.0d);
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray18, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl22.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl22.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver25 = eigenDecompositionImpl22.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl22.getD();
        double[] doubleArray27 = eigenDecompositionImpl22.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl22.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl22.getD();
        double[] doubleArray30 = eigenDecompositionImpl22.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray30, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(decompositionSolver25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) ' ');
        double[] doubleArray13 = eigenDecompositionImpl12.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl12.getVT();
        java.lang.Class<?> wildcardClass16 = realMatrix15.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl18.getVT();
        double double20 = eigenDecompositionImpl18.getDeterminant();
        double[] doubleArray21 = eigenDecompositionImpl18.getRealEigenvalues();
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray24, (double) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray24, (double) 1.0f);
        double[] doubleArray32 = new double[] { (short) 0 };
        double[] doubleArray33 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray32, doubleArray33, 100.0d);
        double[] doubleArray36 = eigenDecompositionImpl35.getRealEigenvalues();
        double double37 = eigenDecompositionImpl35.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = eigenDecompositionImpl35.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = eigenDecompositionImpl35.getV();
        double[] doubleArray40 = eigenDecompositionImpl35.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl42 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray40, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0]");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        java.lang.Class<?> wildcardClass16 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        double[] doubleArray31 = eigenDecompositionImpl30.getImagEigenvalues();
        java.lang.Class<?> wildcardClass32 = eigenDecompositionImpl30.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        java.lang.Class<?> wildcardClass16 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1L);
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getVT();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector21 = eigenDecompositionImpl16.getEigenvector((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray21, (double) 100.0f);
        double[] doubleArray26 = eigenDecompositionImpl25.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray26, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        java.lang.Class<?> wildcardClass13 = decompositionSolver12.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        java.lang.Class<?> wildcardClass16 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double[] doubleArray13 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl12.getD();
        java.lang.Class<?> wildcardClass15 = realMatrix14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector22 = eigenDecompositionImpl20.getEigenvector(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl17.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        double[] doubleArray35 = new double[] { (short) 0 };
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray35, doubleArray36, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = eigenDecompositionImpl38.getV();
        double[] doubleArray40 = eigenDecompositionImpl38.getImagEigenvalues();
        double[] doubleArray41 = eigenDecompositionImpl38.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = eigenDecompositionImpl38.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl44 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix42, (double) 10L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl46 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix42, (double) ' ');
        double[] doubleArray47 = eigenDecompositionImpl46.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl49 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray47, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (byte) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getRealEigenvalues();
        double double17 = eigenDecompositionImpl14.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl14.getV();
        java.lang.Class<?> wildcardClass21 = eigenDecompositionImpl14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getV();
        double double15 = eigenDecompositionImpl7.getRealEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl11.getRealEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        double double18 = eigenDecompositionImpl14.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl14.getEigenvector(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl10.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl10.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl12.getVT();
        double double18 = eigenDecompositionImpl12.getDeterminant();
        double double19 = eigenDecompositionImpl12.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealVector realVector11 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double12 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl14.getSolver();
        java.lang.Class<?> wildcardClass20 = eigenDecompositionImpl14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        double[] doubleArray19 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getVT();
        double double26 = eigenDecompositionImpl24.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector28 = eigenDecompositionImpl24.getEigenvector(0);
        double double29 = eigenDecompositionImpl24.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl24.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix30, (double) 10L);
        double[] doubleArray33 = eigenDecompositionImpl32.getImagEigenvalues();
        double[] doubleArray34 = eigenDecompositionImpl32.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray34, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        double double19 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = eigenDecompositionImpl16.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double17 = eigenDecompositionImpl11.getRealEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        java.lang.Class<?> wildcardClass8 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        double[] doubleArray18 = eigenDecompositionImpl17.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl17.getImagEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        double[] doubleArray11 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getVT();
        java.lang.Class<?> wildcardClass13 = realMatrix12.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getVT();
        double double26 = eigenDecompositionImpl24.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector28 = eigenDecompositionImpl24.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl24.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl24.getD();
        double double31 = eigenDecompositionImpl24.getDeterminant();
        double[] doubleArray32 = eigenDecompositionImpl24.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray32, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray12 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl7.getImagEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl7.getRealEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = eigenDecompositionImpl11.getEigenvector((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl33.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix34, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector38 = eigenDecompositionImpl36.getEigenvector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix34);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = new double[] { (short) 0 };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray12, 100.0d);
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray17, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl21.getSolver();
        double[] doubleArray24 = eigenDecompositionImpl21.getRealEigenvalues();
        double[] doubleArray25 = eigenDecompositionImpl21.getRealEigenvalues();
        double[] doubleArray26 = eigenDecompositionImpl21.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray26, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl12.getRealEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double double13 = eigenDecompositionImpl11.getRealEigenvalue(0);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl11.getRealEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }
}


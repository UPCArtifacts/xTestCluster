import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        long long13 = week7.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass14 = week7.getClass();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date18, timeZone24);
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date3, timeZone24, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.lang.String str10 = week2.toString();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week13.previous();
        int int22 = week13.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week13.next();
        java.lang.Class<?> wildcardClass24 = regularTimePeriod23.getClass();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        java.lang.Class<?> wildcardClass29 = week27.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        int int39 = week34.getYearValue();
        int int41 = week34.compareTo((java.lang.Object) 9);
        java.util.Date date42 = week34.getStart();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        int int48 = week46.getYearValue();
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int50 = week46.compareTo((java.lang.Object) timeZone49);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass29, date42, timeZone49);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str55 = week54.toString();
        long long56 = week54.getMiddleMillisecond();
        long long57 = week54.getLastMillisecond();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.next();
        java.lang.Class<?> wildcardClass62 = week60.getClass();
        java.lang.Class class63 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass62);
        int int64 = week54.compareTo((java.lang.Object) wildcardClass62);
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass62);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.next();
        java.lang.Class<?> wildcardClass70 = week68.getClass();
        java.lang.Class class71 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass70);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date75 = week74.getStart();
        java.lang.Class class76 = null;
        java.util.Date date77 = null;
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance(class76, date77, timeZone78);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass70, date75, timeZone78);
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date75, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass24, date42, timeZone81);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date42);
        int int85 = week84.getYearValue();
        long long86 = week84.getSerialIndex();
        long long87 = week84.getLastMillisecond();
        long long88 = week84.getLastMillisecond();
        int int89 = week2.compareTo((java.lang.Object) long88);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Week 35, 52" + "'", str55, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-60506053200001L) + "'", long56 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-60505750800001L) + "'", long57 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(class63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(class71);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(regularTimePeriod80);
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 2791L + "'", long86 == 2791L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-60505750800001L) + "'", long87 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-60505750800001L) + "'", long88 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date7 = week6.getStart();
        int int8 = week6.getYearValue();
        java.util.Date date9 = week6.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        java.util.Date date27 = week19.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date27, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.previous();
        int int41 = week39.getYearValue();
        java.util.Date date42 = week39.getStart();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date42, timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date27, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date9, timeZone43);
        boolean boolean47 = week2.equals((java.lang.Object) date9);
        java.util.Calendar calendar48 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long49 = week2.getMiddleMillisecond(calendar48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 36, 52");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date11 = week10.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.util.Date date16 = week14.getEnd();
        int int17 = week14.getYearValue();
        long long18 = week14.getLastMillisecond();
        java.lang.Class<?> wildcardClass19 = week14.getClass();
        java.util.Date date20 = null;
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date24 = week23.getStart();
        int int25 = week23.getYearValue();
        java.util.Date date26 = week23.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        java.util.Date date44 = week36.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date44, timeZone51);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.previous();
        int int58 = week56.getYearValue();
        java.util.Date date59 = week56.getStart();
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date59, timeZone60);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date44, timeZone60);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date26, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date20, timeZone60);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date11, timeZone60);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date6, timeZone60);
        java.util.Calendar calendar67 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long68 = week66.getFirstMillisecond(calendar67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-59100800400001L) + "'", long18 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod64);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        long long4 = week2.getSerialIndex();
        long long5 = week2.getSerialIndex();
        int int6 = week2.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 44L + "'", long5 == 44L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week2.previous();
        java.util.Calendar calendar21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = week2.getLastMillisecond(calendar21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week7.getFirstMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.previous();
        int int24 = week22.getYearValue();
        java.util.Date date25 = week22.getEnd();
        java.lang.String str26 = week22.toString();
        java.util.Date date27 = week22.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str31 = week30.toString();
        long long32 = week30.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week30.next();
        java.util.Date date34 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date34);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str40 = week39.toString();
        long long41 = week39.getMiddleMillisecond();
        long long42 = week39.getLastMillisecond();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        java.lang.Class<?> wildcardClass47 = week45.getClass();
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        int int49 = week39.compareTo((java.lang.Object) wildcardClass47);
        java.lang.Class class50 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        java.lang.Class<?> wildcardClass55 = week53.getClass();
        java.lang.Class class56 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass55);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date60 = week59.getStart();
        java.lang.Class class61 = null;
        java.util.Date date62 = null;
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance(class61, date62, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass55, date60, timeZone63);
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date60, timeZone66);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date34, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date27, timeZone66);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week();
        long long72 = week71.getFirstMillisecond();
        org.jfree.data.time.Year year73 = week71.getYear();
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(0, year73);
        java.util.Date date75 = week74.getStart();
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str79 = week78.toString();
        long long80 = week78.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = week78.next();
        java.util.Date date82 = week78.getEnd();
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date82);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = week83.next();
        java.util.Date date85 = week83.getEnd();
        java.util.TimeZone timeZone86 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date85, timeZone86);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date75, timeZone86);
        java.util.Locale locale89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date27, timeZone86, locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Week 35, 52" + "'", str26, "Week 35, 52");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Week 35, 52" + "'", str31, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60506053200001L) + "'", long32 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Week 35, 52" + "'", str40, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-60506053200001L) + "'", long41 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60505750800001L) + "'", long42 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(class50);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(class56);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1637449200000L + "'", long72 == 1637449200000L);
        org.junit.Assert.assertNotNull(year73);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Week 35, 52" + "'", str79, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-60506053200001L) + "'", long80 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone86);
// flaky:         org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        java.util.TimeZone timeZone7 = null;
        java.util.Locale locale8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(date6, timeZone7, locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Jan 03 23:59:59 CET 33");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        java.lang.String str6 = week4.toString();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week4.getFirstMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 9, 97" + "'", str6, "Week 9, 97");
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        java.util.Date date14 = week2.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year15 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getFirstMillisecond();
        long long16 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week((int) (byte) 100, year3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week4.next();
        java.util.Date date6 = week4.getEnd();
        int int7 = week4.getYearValue();
        java.util.Date date8 = week4.getStart();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 26 23:59:59 CET 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2021 + "'", int7 == 2021);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Nov 20 00:00:00 CET 2022");
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.previous();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getMiddleMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        java.lang.Class class7 = null;
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        java.util.Date date18 = week10.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.Date date22 = week19.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        int int30 = week25.getYearValue();
        long long31 = week25.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass32 = week25.getClass();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date36 = week35.getStart();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        int int41 = week39.getYearValue();
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int43 = week39.compareTo((java.lang.Object) timeZone42);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date36, timeZone42);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.next();
        java.lang.Class<?> wildcardClass49 = week47.getClass();
        java.lang.Class class50 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date54 = week53.getStart();
        java.lang.Class class55 = null;
        java.util.Date date56 = null;
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance(class55, date56, timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass49, date54, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date63);
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass49, date63, timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date36, timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class7, date22, timeZone65);
        java.util.Locale locale69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date6, timeZone65, locale69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-60506053200001L) + "'", long31 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(class50);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertNull(regularTimePeriod68);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date5, timeZone6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        java.util.Date date18 = week10.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.previous();
        int int50 = week48.getYearValue();
        java.util.Date date51 = week48.getStart();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date51, timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date36, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date5, timeZone52);
        java.lang.Class<?> wildcardClass57 = week56.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        long long12 = week11.getFirstMillisecond();
        java.util.Date date13 = week11.getEnd();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week11.getMiddleMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.lang.String str7 = week2.toString();
        long long8 = week2.getSerialIndex();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        java.util.Date date13 = week2.getStart();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        int int11 = week2.getWeek();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getFirstMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week31.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year34 = week31.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year6);
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week10.getLastMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        long long20 = regularTimePeriod19.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60505448400001L) + "'", long20 == (-60505448400001L));
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getMiddleMillisecond();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getFirstMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.lang.String str7 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date12 = week11.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(date12);
        long long14 = week13.getSerialIndex();
        boolean boolean15 = week2.equals((java.lang.Object) long14);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 5150L + "'", long14 == 5150L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 3, 97");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getEnd();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.TimeZone timeZone14 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int15 = week11.compareTo((java.lang.Object) timeZone14);
        int int16 = week11.getYearValue();
        int int18 = week11.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week11.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week11.next();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        java.lang.Class<?> wildcardClass25 = week23.getClass();
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        boolean boolean28 = week11.equals((java.lang.Object) wildcardClass25);
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        long long35 = week32.getLastMillisecond();
        java.util.Date date36 = week32.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week32.previous();
        long long38 = week32.getMiddleMillisecond();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.next();
        long long46 = week44.getMiddleMillisecond();
        java.lang.String str47 = week44.toString();
        boolean boolean48 = week41.equals((java.lang.Object) week44);
        java.util.Date date49 = week41.getStart();
        int int50 = week32.compareTo((java.lang.Object) date49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date54 = week53.getStart();
        java.util.Date date55 = week53.getEnd();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        java.lang.Class<?> wildcardClass60 = week58.getClass();
        java.lang.Class class61 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass60);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date65 = week64.getStart();
        java.lang.Class class66 = null;
        java.util.Date date67 = null;
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance(class66, date67, timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass60, date65, timeZone68);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date55, timeZone68);
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date55, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass25, date49, timeZone72);
        java.util.Locale locale75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date7, timeZone72, locale75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60505750800001L) + "'", long35 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-60506053200001L) + "'", long38 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60506053200001L) + "'", long46 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Week 35, 52" + "'", str47, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(class61);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod74);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year4);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week7.getFirstMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        long long3 = week0.getLastMillisecond();
        int int4 = week0.getWeek();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1638053999999L + "'", long3 == 1638053999999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, 2);
        java.lang.String str3 = week2.toString();
        int int4 = week2.getYearValue();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getMiddleMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 9, 2" + "'", str3, "Week 9, 2");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = week2.getLastMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.lang.Class<?> wildcardClass7 = week2.getClass();
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.TimeZone timeZone14 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int15 = week11.compareTo((java.lang.Object) timeZone14);
        int int16 = week11.getYearValue();
        int int18 = week11.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week11.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week11.next();
        java.util.Date date21 = week11.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week11.previous();
        long long23 = week11.getMiddleMillisecond();
        java.util.Date date24 = week11.getEnd();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str28 = week27.toString();
        long long29 = week27.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week27.next();
        java.util.Date date31 = regularTimePeriod30.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date35, timeZone41);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date31, timeZone41);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str48 = week47.toString();
        long long49 = week47.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week47.next();
        java.util.Date date51 = regularTimePeriod50.getEnd();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date55 = week54.getStart();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        int int60 = week58.getYearValue();
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int62 = week58.compareTo((java.lang.Object) timeZone61);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date55, timeZone61);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date51, timeZone61);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date31, timeZone61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass7, date24, timeZone61);
        java.util.Calendar calendar67 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long68 = regularTimePeriod66.getMiddleMillisecond(calendar67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60506053200001L) + "'", long23 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Week 35, 52" + "'", str28, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2791L + "'", long29 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Week 35, 52" + "'", str48, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2791L + "'", long49 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        int int13 = week12.getYearValue();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week12.getMiddleMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date6);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year9 = week8.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        java.util.Date date20 = week2.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year21 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getMiddleMillisecond();
        java.lang.String str14 = week2.toString();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week();
        long long18 = week17.getFirstMillisecond();
        org.jfree.data.time.Year year19 = week17.getYear();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) (byte) 100, year19);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) (short) 10, year19);
        long long22 = week21.getLastMillisecond();
        int int23 = week2.compareTo((java.lang.Object) long22);
        long long24 = week2.getFirstMillisecond();
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = week2.getMiddleMillisecond(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1637449200000L + "'", long18 == 1637449200000L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1615071599999L + "'", long22 == 1615071599999L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60506355600000L) + "'", long24 == (-60506355600000L));
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        long long10 = week7.getLastMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        int int17 = week7.compareTo((java.lang.Object) wildcardClass15);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        boolean boolean19 = week4.equals((java.lang.Object) wildcardClass15);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.previous();
        int int24 = week22.getYearValue();
        java.util.Date date25 = week22.getStart();
        int int26 = week22.getYearValue();
        long long27 = week22.getSerialIndex();
        boolean boolean28 = week4.equals((java.lang.Object) week22);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year29 = week22.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2791L + "'", long27 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.next();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(4, (int) (short) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        long long14 = week2.getFirstMillisecond();
        long long15 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506355600000L) + "'", long14 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60505750800001L) + "'", long15 == (-60505750800001L));
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(48, year5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        int int25 = week16.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week16.next();
        java.lang.Class<?> wildcardClass27 = regularTimePeriod26.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        java.util.Date date45 = week37.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date45, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str58 = week57.toString();
        long long59 = week57.getMiddleMillisecond();
        long long60 = week57.getLastMillisecond();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        int int67 = week57.compareTo((java.lang.Object) wildcardClass65);
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        java.lang.Class<?> wildcardClass73 = week71.getClass();
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.lang.Class class79 = null;
        java.util.Date date80 = null;
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date80, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass73, date78, timeZone81);
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date78, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date45, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date13, timeZone84);
        int int88 = week87.getWeek();
        int int89 = week87.getYearValue();
        java.util.Calendar calendar90 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long91 = week87.getFirstMillisecond(calendar90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        int int25 = week16.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week16.next();
        java.lang.Class<?> wildcardClass27 = regularTimePeriod26.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        java.util.Date date45 = week37.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date45, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str58 = week57.toString();
        long long59 = week57.getMiddleMillisecond();
        long long60 = week57.getLastMillisecond();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        int int67 = week57.compareTo((java.lang.Object) wildcardClass65);
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        java.lang.Class<?> wildcardClass73 = week71.getClass();
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.lang.Class class79 = null;
        java.util.Date date80 = null;
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date80, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass73, date78, timeZone81);
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date78, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date45, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date13, timeZone84);
        int int88 = week87.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = week87.previous();
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = week92.next();
        int int94 = week92.getYearValue();
        java.util.TimeZone timeZone95 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int96 = week92.compareTo((java.lang.Object) timeZone95);
        java.lang.String str97 = week92.toString();
        long long98 = week92.getSerialIndex();
        boolean boolean99 = week87.equals((java.lang.Object) week92);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertNotNull(regularTimePeriod93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 52 + "'", int94 == 52);
        org.junit.Assert.assertNotNull(timeZone95);
// flaky:         org.junit.Assert.assertEquals(timeZone95.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Week 35, 52" + "'", str97, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 2791L + "'", long98 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.previous();
        java.util.Date date24 = week22.getEnd();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        int int32 = week27.getYearValue();
        int int34 = week27.compareTo((java.lang.Object) 9);
        int int35 = week27.getYearValue();
        long long36 = week27.getLastMillisecond();
        int int37 = week27.getWeek();
        java.util.Date date38 = week27.getEnd();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date42 = week41.getStart();
        java.util.Date date43 = week41.getEnd();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        java.lang.Class<?> wildcardClass48 = week46.getClass();
        java.lang.Class class49 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass48);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date53 = week52.getStart();
        java.lang.Class class54 = null;
        java.util.Date date55 = null;
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date55, timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass48, date53, timeZone56);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date43, timeZone56);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date38, timeZone56);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date24, timeZone56);
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date6, timeZone56, locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60505750800001L) + "'", long36 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(class49);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance(class7, date11, timeZone13);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        java.lang.Class class25 = null;
        java.util.Date date26 = null;
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance(class25, date26, timeZone27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date24, timeZone27);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str33 = week32.toString();
        long long34 = week32.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week32.next();
        int int37 = week32.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str41 = week40.toString();
        long long42 = week40.getMiddleMillisecond();
        long long43 = week40.getLastMillisecond();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        java.lang.Class<?> wildcardClass48 = week46.getClass();
        java.lang.Class class49 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass48);
        int int50 = week40.compareTo((java.lang.Object) wildcardClass48);
        java.lang.Class class51 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass48);
        int int52 = week32.compareTo((java.lang.Object) class51);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        java.util.Date date57 = week55.getEnd();
        int int58 = week55.getYearValue();
        java.util.Date date59 = week55.getEnd();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        int int67 = week62.getYearValue();
        long long68 = week62.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass69 = week62.getClass();
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date73 = week72.getStart();
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week76.next();
        int int78 = week76.getYearValue();
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int80 = week76.compareTo((java.lang.Object) timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass69, date73, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class51, date59, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance(class7, date24, timeZone79);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Week 35, 52" + "'", str33, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60506053200001L) + "'", long34 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Week 35, 52" + "'", str41, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60506053200001L) + "'", long42 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60505750800001L) + "'", long43 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(class49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(class51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-60506053200001L) + "'", long68 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNull(regularTimePeriod83);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        java.lang.String str9 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        boolean boolean7 = week2.equals((java.lang.Object) 0L);
        int int8 = week2.getYearValue();
        int int9 = week2.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str6 = week5.toString();
        long long7 = week5.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week5.next();
        boolean boolean9 = week2.equals((java.lang.Object) regularTimePeriod8);
        int int10 = week2.getYearValue();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str14 = week13.toString();
        long long15 = week13.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week13.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week13.next();
        boolean boolean18 = week2.equals((java.lang.Object) regularTimePeriod17);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        long long3 = week2.getSerialIndex();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (short) 10, 6);
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getMiddleMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 630L + "'", long3 == 630L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62198888400001L) + "'", long4 == (-62198888400001L));
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(53, year8);
        int int11 = week2.compareTo((java.lang.Object) 53);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        long long3 = week0.getLastMillisecond();
        long long4 = week0.getMiddleMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.previous();
        java.util.Date date9 = week7.getEnd();
        int int10 = week0.compareTo((java.lang.Object) date9);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1638053999999L + "'", long3 == 1638053999999L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637751599999L + "'", long4 == 1637751599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        java.util.Date date10 = week7.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date14, timeZone20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date10, timeZone20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date4, timeZone20);
        long long25 = week24.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2791L + "'", long25 == 2791L);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getSerialIndex();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week2.getMiddleMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        long long3 = week0.getLastMillisecond();
        long long4 = week0.getMiddleMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week0.getFirstMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1638053999999L + "'", long3 == 1638053999999L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637751599999L + "'", long4 == 1637751599999L);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getWeek();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        java.util.Date date15 = week7.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date15);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date15);
        int int18 = week2.compareTo((java.lang.Object) date15);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str22 = week21.toString();
        long long23 = week21.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week21.next();
        java.util.Date date25 = regularTimePeriod24.getEnd();
        java.lang.Class class26 = null;
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date30 = week29.getEnd();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        java.util.Date date35 = week33.getEnd();
        int int36 = week33.getYearValue();
        long long37 = week33.getLastMillisecond();
        java.lang.Class<?> wildcardClass38 = week33.getClass();
        java.util.Date date39 = null;
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date43 = week42.getStart();
        int int44 = week42.getYearValue();
        java.util.Date date45 = week42.getEnd();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        java.lang.Class<?> wildcardClass50 = week48.getClass();
        java.lang.Class class51 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        int int57 = week55.getYearValue();
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int59 = week55.compareTo((java.lang.Object) timeZone58);
        int int60 = week55.getYearValue();
        int int62 = week55.compareTo((java.lang.Object) 9);
        java.util.Date date63 = week55.getStart();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date63);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week67.next();
        int int69 = week67.getYearValue();
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int71 = week67.compareTo((java.lang.Object) timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass50, date63, timeZone70);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.previous();
        int int77 = week75.getYearValue();
        java.util.Date date78 = week75.getStart();
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date78, timeZone79);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date63, timeZone79);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date45, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass38, date39, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class26, date30, timeZone79);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date25, timeZone79);
        java.util.Locale locale86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date15, timeZone79, locale86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2791L + "'", long23 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-59100800400001L) + "'", long37 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(class51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod83);
        org.junit.Assert.assertNull(regularTimePeriod84);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        long long6 = year5.getMiddleMillisecond();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = year5.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1625223599999L + "'", long6 == 1625223599999L);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        long long24 = week16.getLastMillisecond();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week();
        long long28 = week27.getFirstMillisecond();
        org.jfree.data.time.Year year29 = week27.getYear();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) (byte) 100, year29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(100, year29);
        int int32 = week16.compareTo((java.lang.Object) week31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str36 = week35.toString();
        long long37 = week35.getMiddleMillisecond();
        long long38 = week35.getLastMillisecond();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        java.lang.Class<?> wildcardClass43 = week41.getClass();
        java.lang.Class class44 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        int int45 = week35.compareTo((java.lang.Object) wildcardClass43);
        long long46 = week35.getMiddleMillisecond();
        java.util.Date date47 = week35.getEnd();
        int int48 = week35.getWeek();
        long long49 = week35.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week35.next();
        long long51 = week35.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week35.next();
        java.util.Date date53 = week35.getStart();
        boolean boolean54 = week31.equals((java.lang.Object) date53);
        boolean boolean56 = week31.equals((java.lang.Object) 1862L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1637449200000L + "'", long28 == 1637449200000L);
        org.junit.Assert.assertNotNull(year29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1969) + "'", int32 == (-1969));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Week 35, 52" + "'", str36, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-60505750800001L) + "'", long38 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(class44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60506053200001L) + "'", long46 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60505750800001L) + "'", long49 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60506355600000L) + "'", long51 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getEnd();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date7);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week8.getLastMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        java.lang.Class class22 = null;
        java.util.Date date23 = null;
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date23, timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date21, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date11, timeZone24);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date6, timeZone24);
        java.util.Calendar calendar29 = null;
        // The following exception was thrown during execution in test generation
        try {
            week28.peg(calendar29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Date date74 = week73.getEnd();
        java.util.Calendar calendar75 = null;
        // The following exception was thrown during execution in test generation
        try {
            week73.peg(calendar75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.util.Date date7 = regularTimePeriod6.getEnd();
        java.util.Date date8 = regularTimePeriod6.getStart();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week();
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(0, year12);
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str18 = week17.toString();
        long long19 = week17.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week17.next();
        java.util.Date date21 = week17.getEnd();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        java.util.Date date24 = week22.getEnd();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date24, timeZone25);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date14, timeZone25);
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date8, timeZone25, locale28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1637449200000L + "'", long11 == 1637449200000L);
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506053200001L) + "'", long19 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week11.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize(class7);
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize(class8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date13 = week12.getEnd();
        java.util.Date date14 = week12.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        int int22 = week17.getYearValue();
        int int24 = week17.compareTo((java.lang.Object) 9);
        int int25 = week17.getYearValue();
        long long26 = week17.getLastMillisecond();
        int int27 = week17.getWeek();
        java.util.Date date28 = week17.getEnd();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.util.Date date33 = week31.getEnd();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        java.lang.Class<?> wildcardClass38 = week36.getClass();
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass38);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date43 = week42.getStart();
        java.lang.Class class44 = null;
        java.util.Date date45 = null;
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance(class44, date45, timeZone46);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass38, date43, timeZone46);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date33, timeZone46);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date28, timeZone46);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        int int58 = week53.getYearValue();
        long long59 = week53.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass60 = week53.getClass();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week67.next();
        int int69 = week67.getYearValue();
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int71 = week67.compareTo((java.lang.Object) timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass60, date64, timeZone70);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        java.lang.Class<?> wildcardClass77 = week75.getClass();
        java.lang.Class class78 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass77);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date82 = week81.getStart();
        java.lang.Class class83 = null;
        java.util.Date date84 = null;
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance(class83, date84, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass77, date82, timeZone85);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date91 = week90.getStart();
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date91);
        java.util.TimeZone timeZone93 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass77, date91, timeZone93);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date64, timeZone93);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date28, timeZone93);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod97 = org.jfree.data.time.RegularTimePeriod.createInstance(class8, date14, timeZone93);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Oct 31 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60505750800001L) + "'", long26 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(class78);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone93);
// flaky:         org.junit.Assert.assertEquals(timeZone93.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod94);
        org.junit.Assert.assertNull(regularTimePeriod97);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        int int39 = week34.getYearValue();
        int int41 = week34.compareTo((java.lang.Object) 9);
        java.util.Date date42 = week34.getStart();
        java.lang.Class<?> wildcardClass43 = week34.getClass();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        java.util.Date date48 = week46.getEnd();
        int int49 = week46.getYearValue();
        java.util.Date date50 = week46.getEnd();
        java.util.Date date51 = week46.getStart();
        java.lang.Class class52 = null;
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str56 = week55.toString();
        long long57 = week55.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week55.next();
        java.util.Date date59 = week55.getEnd();
        long long60 = week55.getLastMillisecond();
        java.util.Date date61 = week55.getEnd();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str65 = week64.toString();
        long long66 = week64.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week64.next();
        java.util.Date date68 = week64.getEnd();
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.next();
        java.util.Date date71 = week69.getEnd();
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class52, date61, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass43, date51, timeZone72);
        java.util.Locale locale76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date23, timeZone72, locale76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Week 35, 52" + "'", str56, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-60506053200001L) + "'", long57 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Week 35, 52" + "'", str65, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-60506053200001L) + "'", long66 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod75);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        java.util.Date date13 = regularTimePeriod12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        int int24 = week16.getYearValue();
        long long25 = week16.getLastMillisecond();
        int int26 = week16.getWeek();
        java.util.Date date27 = week16.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.util.Date date32 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date42 = week41.getStart();
        java.lang.Class class43 = null;
        java.util.Date date44 = null;
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance(class43, date44, timeZone45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass37, date42, timeZone45);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date32, timeZone45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date27, timeZone45);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.next();
        int int54 = week52.getYearValue();
        java.util.TimeZone timeZone55 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int56 = week52.compareTo((java.lang.Object) timeZone55);
        int int57 = week52.getYearValue();
        long long58 = week52.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass59 = week52.getClass();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.next();
        int int68 = week66.getYearValue();
        java.util.TimeZone timeZone69 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int70 = week66.compareTo((java.lang.Object) timeZone69);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date63, timeZone69);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = week74.next();
        java.lang.Class<?> wildcardClass76 = week74.getClass();
        java.lang.Class class77 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass76);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date81 = week80.getStart();
        java.lang.Class class82 = null;
        java.util.Date date83 = null;
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class82, date83, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass76, date81, timeZone84);
        org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date90 = week89.getStart();
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date90);
        java.util.TimeZone timeZone92 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass76, date90, timeZone92);
        org.jfree.data.time.Week week94 = new org.jfree.data.time.Week(date63, timeZone92);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date27, timeZone92);
        java.util.Locale locale96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week97 = new org.jfree.data.time.Week(date13, timeZone92, locale96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60505750800001L) + "'", long25 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-60506053200001L) + "'", long58 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(class77);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod93);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getFirstMillisecond();
        long long7 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getMiddleMillisecond();
        java.util.Date date15 = week2.getEnd();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getLastMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date5, timeZone6);
        int int8 = week7.getYearValue();
        long long9 = week7.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506355600000L) + "'", long9 == (-60506355600000L));
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year6);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = year6.getMiddleMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        java.lang.String str10 = week7.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str4 = week3.toString();
        long long5 = week3.getMiddleMillisecond();
        long long6 = week3.getLastMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        java.lang.Class<?> wildcardClass11 = week9.getClass();
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass11);
        int int13 = week3.compareTo((java.lang.Object) wildcardClass11);
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass11);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        java.lang.Class class25 = null;
        java.util.Date date26 = null;
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance(class25, date26, timeZone27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date24, timeZone27);
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = org.jfree.data.time.RegularTimePeriod.createInstance(class14, date24, timeZone30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize(class14);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize(class14);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date37 = week36.getStart();
        java.util.Date date38 = week36.getEnd();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        java.lang.Class<?> wildcardClass43 = week41.getClass();
        java.lang.Class class44 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date48 = week47.getStart();
        java.lang.Class class49 = null;
        java.util.Date date50 = null;
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance(class49, date50, timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass43, date48, timeZone51);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date38, timeZone51);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date38);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.previous();
        java.util.Date date60 = week58.getEnd();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        int int65 = week63.getYearValue();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int67 = week63.compareTo((java.lang.Object) timeZone66);
        int int68 = week63.getYearValue();
        int int70 = week63.compareTo((java.lang.Object) 9);
        int int71 = week63.getYearValue();
        long long72 = week63.getLastMillisecond();
        int int73 = week63.getWeek();
        java.util.Date date74 = week63.getEnd();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.util.Date date79 = week77.getEnd();
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = week82.next();
        java.lang.Class<?> wildcardClass84 = week82.getClass();
        java.lang.Class class85 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass84);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date89 = week88.getStart();
        java.lang.Class class90 = null;
        java.util.Date date91 = null;
        java.util.TimeZone timeZone92 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = org.jfree.data.time.RegularTimePeriod.createInstance(class90, date91, timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass84, date89, timeZone92);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date79, timeZone92);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date74, timeZone92);
        org.jfree.data.time.Week week97 = new org.jfree.data.time.Week(date60, timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod98 = org.jfree.data.time.RegularTimePeriod.createInstance(class33, date38, timeZone92);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week99 = new org.jfree.data.time.Week(date0, timeZone92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 35, 52" + "'", str4, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506053200001L) + "'", long5 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(class44);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-60505750800001L) + "'", long72 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(class85);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod93);
        org.junit.Assert.assertNotNull(regularTimePeriod94);
        org.junit.Assert.assertNull(regularTimePeriod98);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, (int) (byte) -1);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        int int14 = week2.getYearValue();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) (byte) 0, (int) (byte) -1);
        boolean boolean18 = week2.equals((java.lang.Object) (byte) -1);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, year5);
        java.lang.Class<?> wildcardClass10 = week9.getClass();
        java.lang.Class class11 = null;
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        int int16 = week14.getYearValue();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int18 = week14.compareTo((java.lang.Object) timeZone17);
        int int19 = week14.getYearValue();
        int int21 = week14.compareTo((java.lang.Object) 9);
        java.util.Date date22 = week14.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date22);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.Date date26 = week23.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        int int34 = week29.getYearValue();
        long long35 = week29.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass36 = week29.getClass();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date40 = week39.getStart();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date40, timeZone46);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        java.lang.Class<?> wildcardClass53 = week51.getClass();
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass53);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        java.lang.Class class59 = null;
        java.util.Date date60 = null;
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = org.jfree.data.time.RegularTimePeriod.createInstance(class59, date60, timeZone61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass53, date58, timeZone61);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date67 = week66.getStart();
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date67);
        java.util.TimeZone timeZone69 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass53, date67, timeZone69);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date40, timeZone69);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance(class11, date26, timeZone69);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        java.lang.Class<?> wildcardClass77 = week75.getClass();
        java.lang.Class class78 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass77);
        java.lang.Class class79 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass77);
        java.lang.Class class80 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass77);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date84 = week83.getStart();
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date84);
        java.util.TimeZone timeZone86 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance(class80, date84, timeZone86);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date26, timeZone86);
        java.util.TimeZone timeZone89 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod90 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date26, timeZone89);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60506053200001L) + "'", long35 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(class78);
        org.junit.Assert.assertNotNull(class79);
        org.junit.Assert.assertNotNull(class80);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone86);
// flaky:         org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod87);
        org.junit.Assert.assertNull(regularTimePeriod90);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week16.next();
        java.util.Date date20 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date25 = week24.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date29 = week28.getStart();
        java.util.Date date30 = week28.getEnd();
        int int31 = week28.getYearValue();
        long long32 = week28.getLastMillisecond();
        java.lang.Class<?> wildcardClass33 = week28.getClass();
        java.util.Date date34 = null;
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date38 = week37.getStart();
        int int39 = week37.getYearValue();
        java.util.Date date40 = week37.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date34, timeZone74);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date25, timeZone74);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date20, timeZone74);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date13, timeZone74);
        int int82 = week81.getWeek();
        int int83 = week81.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-59100800400001L) + "'", long32 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        java.util.Date date32 = week31.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str36 = week35.toString();
        long long37 = week35.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week35.next();
        java.util.Date date39 = week35.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date39);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date39);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str45 = week44.toString();
        long long46 = week44.getMiddleMillisecond();
        long long47 = week44.getLastMillisecond();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        java.lang.Class<?> wildcardClass52 = week50.getClass();
        java.lang.Class class53 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass52);
        int int54 = week44.compareTo((java.lang.Object) wildcardClass52);
        java.lang.Class class55 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass52);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        java.lang.Class<?> wildcardClass60 = week58.getClass();
        java.lang.Class class61 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass60);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date65 = week64.getStart();
        java.lang.Class class66 = null;
        java.util.Date date67 = null;
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance(class66, date67, timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass60, date65, timeZone68);
        java.util.TimeZone timeZone71 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance(class55, date65, timeZone71);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date39, timeZone71);
        java.util.Locale locale74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date32, timeZone71, locale74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Week 35, 52" + "'", str36, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Week 35, 52" + "'", str45, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60506053200001L) + "'", long46 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-60505750800001L) + "'", long47 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(class53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(class55);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(class61);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod72);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date7 = week6.getStart();
        java.util.Date date8 = week6.getEnd();
        int int9 = week6.getYearValue();
        long long10 = week6.getLastMillisecond();
        java.lang.Class<?> wildcardClass11 = week6.getClass();
        java.util.Date date12 = null;
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date16 = week15.getStart();
        int int17 = week15.getYearValue();
        java.util.Date date18 = week15.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.previous();
        int int50 = week48.getYearValue();
        java.util.Date date51 = week48.getStart();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date51, timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date36, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass11, date12, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date3, timeZone52);
        long long58 = week57.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-59100800400001L) + "'", long10 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-61792160400000L) + "'", long58 == (-61792160400000L));
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        long long74 = week73.getFirstMillisecond();
        java.lang.String str75 = week73.toString();
        java.util.Calendar calendar76 = null;
        // The following exception was thrown during execution in test generation
        try {
            week73.peg(calendar76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-60506355600000L) + "'", long74 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Week 35, 52" + "'", str75, "Week 35, 52");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        java.util.Date date8 = week7.getStart();
        java.lang.Class<?> wildcardClass9 = date8.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        java.util.Date date16 = week15.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year17 = week15.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getYearValue();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getFirstMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(52, year3);
        java.util.Date date5 = year3.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        int int11 = week10.getWeek();
        java.lang.Class<?> wildcardClass12 = week10.getClass();
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass12);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date17 = week16.getEnd();
        java.util.Date date18 = week16.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        int int28 = week21.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week21.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week21.next();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        java.lang.Class<?> wildcardClass35 = week33.getClass();
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass35);
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass35);
        boolean boolean38 = week21.equals((java.lang.Object) wildcardClass35);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.previous();
        int int43 = week41.getYearValue();
        java.util.Date date44 = week41.getEnd();
        java.lang.String str45 = week41.toString();
        java.util.Date date46 = week41.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str50 = week49.toString();
        long long51 = week49.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week49.next();
        java.util.Date date53 = week49.getEnd();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date53);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date53);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str59 = week58.toString();
        long long60 = week58.getMiddleMillisecond();
        long long61 = week58.getLastMillisecond();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.next();
        java.lang.Class<?> wildcardClass66 = week64.getClass();
        java.lang.Class class67 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass66);
        int int68 = week58.compareTo((java.lang.Object) wildcardClass66);
        java.lang.Class class69 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass66);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.next();
        java.lang.Class<?> wildcardClass74 = week72.getClass();
        java.lang.Class class75 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass74);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date79 = week78.getStart();
        java.lang.Class class80 = null;
        java.util.Date date81 = null;
        java.util.TimeZone timeZone82 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance(class80, date81, timeZone82);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass74, date79, timeZone82);
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance(class69, date79, timeZone85);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date53, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass35, date46, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass12, date18, timeZone85);
        java.util.Locale locale90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date5, timeZone85, locale90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Oct 31 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Week 35, 52" + "'", str45, "Week 35, 52");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Week 35, 52" + "'", str50, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60506053200001L) + "'", long51 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Week 35, 52" + "'", str59, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60506053200001L) + "'", long60 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-60505750800001L) + "'", long61 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(class67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(class69);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(class75);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        int int20 = week19.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date17);
        int int28 = week27.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        java.util.Date date15 = week2.getEnd();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        int int20 = week18.getYearValue();
        java.util.TimeZone timeZone21 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int22 = week18.compareTo((java.lang.Object) timeZone21);
        int int23 = week18.getYearValue();
        int int25 = week18.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week18.previous();
        int int27 = week18.getYearValue();
        long long28 = week18.getLastMillisecond();
        int int29 = week18.getWeek();
        int int30 = week18.getYearValue();
        long long31 = week18.getLastMillisecond();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date35, timeZone41);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date35);
        boolean boolean45 = week18.equals((java.lang.Object) week44);
        int int46 = week2.compareTo((java.lang.Object) boolean45);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60505750800001L) + "'", long28 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-60505750800001L) + "'", long31 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.util.Date date12 = week2.getEnd();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Year year7 = week6.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(97, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year7);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week9.getLastMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(year7);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        long long3 = week2.getSerialIndex();
        java.util.Date date4 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        long long10 = week7.getLastMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        int int17 = week7.compareTo((java.lang.Object) wildcardClass15);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize(class18);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week();
        long long22 = week21.getFirstMillisecond();
        org.jfree.data.time.Year year23 = week21.getYear();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(0, year23);
        java.util.Date date25 = week24.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date29 = week28.getStart();
        java.util.Date date30 = week28.getEnd();
        int int31 = week28.getYearValue();
        long long32 = week28.getLastMillisecond();
        java.lang.Class<?> wildcardClass33 = week28.getClass();
        java.util.Date date34 = null;
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date38 = week37.getStart();
        int int39 = week37.getYearValue();
        java.util.Date date40 = week37.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date34, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance(class19, date25, timeZone74);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date4, timeZone74);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date4);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = week84.next();
        int int86 = week84.getYearValue();
        java.util.TimeZone timeZone87 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int88 = week84.compareTo((java.lang.Object) timeZone87);
        int int89 = week84.getYearValue();
        int int91 = week84.compareTo((java.lang.Object) 9);
        int int92 = week84.getYearValue();
        long long93 = week84.getLastMillisecond();
        long long94 = week84.getMiddleMillisecond();
        boolean boolean95 = week81.equals((java.lang.Object) week84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod96 = week84.previous();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1748L + "'", long3 == 1748L);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1637449200000L + "'", long22 == 1637449200000L);
        org.junit.Assert.assertNotNull(year23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-59100800400001L) + "'", long32 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 52 + "'", int86 == 52);
        org.junit.Assert.assertNotNull(timeZone87);
// flaky:         org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 52 + "'", int92 == 52);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-60505750800001L) + "'", long93 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-60506053200001L) + "'", long94 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod96);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getFirstMillisecond();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 4);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getFirstMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        int int23 = week15.getYearValue();
        long long24 = week15.getLastMillisecond();
        int int25 = week15.getWeek();
        java.util.Date date26 = week15.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        java.util.Date date31 = week29.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        java.lang.Class class42 = null;
        java.util.Date date43 = null;
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance(class42, date43, timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date41, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date31, timeZone44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date26, timeZone44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str52 = week51.toString();
        long long53 = week51.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week51.next();
        java.util.Date date55 = regularTimePeriod54.getEnd();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date59 = week58.getStart();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date59, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date55, timeZone65);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date26, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date3, timeZone65);
        java.lang.Class<?> wildcardClass71 = date3.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Week 35, 52" + "'", str52, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2791L + "'", long53 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        int int43 = week38.getYearValue();
        long long44 = week38.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass45 = week38.getClass();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.next();
        int int54 = week52.getYearValue();
        java.util.TimeZone timeZone55 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int56 = week52.compareTo((java.lang.Object) timeZone55);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date49, timeZone55);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.next();
        java.lang.Class<?> wildcardClass62 = week60.getClass();
        java.lang.Class class63 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass62);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date67 = week66.getStart();
        java.lang.Class class68 = null;
        java.util.Date date69 = null;
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date69, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass62, date67, timeZone70);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date76 = week75.getStart();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date76);
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass62, date76, timeZone78);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date49, timeZone78);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date13, timeZone78);
        int int82 = week81.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60506053200001L) + "'", long44 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(class63);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        int int7 = week5.getYearValue();
        java.util.TimeZone timeZone8 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int9 = week5.compareTo((java.lang.Object) timeZone8);
        int int10 = week5.getYearValue();
        int int12 = week5.compareTo((java.lang.Object) 9);
        java.util.Date date13 = week5.getStart();
        int int15 = week5.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week5.next();
        int int17 = week5.getWeek();
        boolean boolean18 = week2.equals((java.lang.Object) week5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getMiddleMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        java.lang.String str7 = week2.toString();
        int int8 = week2.getYearValue();
        int int9 = week2.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        java.lang.Class<?> wildcardClass7 = week2.getClass();
        java.util.Date date8 = null;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.TimeZone timeZone14 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int15 = week11.compareTo((java.lang.Object) timeZone14);
        int int16 = week11.getYearValue();
        int int18 = week11.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week11.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week11.next();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        java.lang.Class<?> wildcardClass25 = week23.getClass();
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        boolean boolean28 = week11.equals((java.lang.Object) wildcardClass25);
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        long long35 = week32.getLastMillisecond();
        java.util.Date date36 = week32.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week32.previous();
        long long38 = week32.getMiddleMillisecond();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.next();
        long long46 = week44.getMiddleMillisecond();
        java.lang.String str47 = week44.toString();
        boolean boolean48 = week41.equals((java.lang.Object) week44);
        java.util.Date date49 = week41.getStart();
        int int50 = week32.compareTo((java.lang.Object) date49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date54 = week53.getStart();
        java.util.Date date55 = week53.getEnd();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        java.lang.Class<?> wildcardClass60 = week58.getClass();
        java.lang.Class class61 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass60);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date65 = week64.getStart();
        java.lang.Class class66 = null;
        java.util.Date date67 = null;
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance(class66, date67, timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass60, date65, timeZone68);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date55, timeZone68);
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date55, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass25, date49, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass7, date8, timeZone72);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60505750800001L) + "'", long35 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-60506053200001L) + "'", long38 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60506053200001L) + "'", long46 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Week 35, 52" + "'", str47, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(class61);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNull(regularTimePeriod75);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 0);
        long long3 = week2.getSerialIndex();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        long long20 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506355600000L) + "'", long20 == (-60506355600000L));
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, (int) ' ');
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.previous();
        int int5 = week2.getYearValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Feb 23 23:59:59 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date13);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '4', year5);
        int int9 = week8.getWeek();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week8.getLastMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 4);
        java.util.Date date3 = week2.getEnd();
        int int4 = week2.getYearValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Dec 29 23:59:59 CET 3");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        java.util.Date date20 = week2.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        int int43 = week41.getYearValue();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int45 = week41.compareTo((java.lang.Object) timeZone44);
        int int46 = week41.getYearValue();
        int int48 = week41.compareTo((java.lang.Object) 9);
        java.util.Date date49 = week41.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date49, timeZone56);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.previous();
        int int63 = week61.getYearValue();
        java.util.Date date64 = week61.getStart();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date64, timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date49, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date31, timeZone65);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date20, timeZone65);
        java.util.Calendar calendar70 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long71 = week69.getFirstMillisecond(calendar70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        java.lang.String str14 = week2.toString();
        java.lang.Class<?> wildcardClass15 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        int int16 = week4.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week4.next();
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = week4.getMiddleMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        boolean boolean11 = week2.equals((java.lang.Object) date10);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week();
        long long14 = week13.getFirstMillisecond();
        org.jfree.data.time.Year year15 = week13.getYear();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(0, year15);
        org.jfree.data.time.Year year17 = week16.getYear();
        java.util.Date date18 = week16.getEnd();
        int int19 = week2.compareTo((java.lang.Object) date18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date23 = week22.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        java.util.Date date28 = week26.getEnd();
        int int29 = week26.getYearValue();
        long long30 = week26.getLastMillisecond();
        java.lang.Class<?> wildcardClass31 = week26.getClass();
        java.util.Date date32 = null;
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date36 = week35.getStart();
        int int37 = week35.getYearValue();
        java.util.Date date38 = week35.getEnd();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        java.lang.Class<?> wildcardClass43 = week41.getClass();
        java.lang.Class class44 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        int int53 = week48.getYearValue();
        int int55 = week48.compareTo((java.lang.Object) 9);
        java.util.Date date56 = week48.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date56);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.next();
        int int62 = week60.getYearValue();
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int64 = week60.compareTo((java.lang.Object) timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass43, date56, timeZone63);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.previous();
        int int70 = week68.getYearValue();
        java.util.Date date71 = week68.getStart();
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date71, timeZone72);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date56, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date38, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date32, timeZone72);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date23, timeZone72);
        java.util.Locale locale78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date18, timeZone72, locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1637449200000L + "'", long14 == 1637449200000L);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertNotNull(year17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Dec 26 23:59:59 CET 2020");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-59100800400001L) + "'", long30 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(class44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod76);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getFirstMillisecond();
        long long5 = week2.getSerialIndex();
        int int6 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506355600000L) + "'", long4 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(4, (int) (short) 1);
        long long3 = week2.getSerialIndex();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57L + "'", long3 == 57L);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        long long6 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59100800400001L) + "'", long6 == (-59100800400001L));
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week11.getLastMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(11, year8);
        long long11 = week10.getSerialIndex();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) (short) 1, year12);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(4, year12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(0, year12);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) 'a', year12);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 107124L + "'", long11 == 107124L);
        org.junit.Assert.assertNotNull(year12);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.previous();
        int int17 = week15.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        java.lang.Class class7 = null;
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date11 = week10.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.util.Date date16 = week14.getEnd();
        int int17 = week14.getYearValue();
        long long18 = week14.getLastMillisecond();
        java.lang.Class<?> wildcardClass19 = week14.getClass();
        java.util.Date date20 = null;
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date24 = week23.getStart();
        int int25 = week23.getYearValue();
        java.util.Date date26 = week23.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        java.util.Date date44 = week36.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date44, timeZone51);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.previous();
        int int58 = week56.getYearValue();
        java.util.Date date59 = week56.getStart();
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date59, timeZone60);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date44, timeZone60);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date26, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date20, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance(class7, date11, timeZone60);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date6, timeZone60);
        java.util.Date date67 = week66.getStart();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-59100800400001L) + "'", long18 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod64);
        org.junit.Assert.assertNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Aug 27 00:00:00 CET 52");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.previous();
        int int8 = week6.getYearValue();
        java.util.Date date9 = week6.getStart();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date9, timeZone10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        int int16 = week14.getYearValue();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int18 = week14.compareTo((java.lang.Object) timeZone17);
        int int19 = week14.getYearValue();
        int int21 = week14.compareTo((java.lang.Object) 9);
        java.util.Date date22 = week14.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        java.lang.Class<?> wildcardClass27 = week25.getClass();
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass27);
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass27);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        int int37 = week32.getYearValue();
        int int39 = week32.compareTo((java.lang.Object) 9);
        java.util.Date date40 = week32.getStart();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date40);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.next();
        int int46 = week44.getYearValue();
        java.util.TimeZone timeZone47 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int48 = week44.compareTo((java.lang.Object) timeZone47);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date40, timeZone47);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.previous();
        int int54 = week52.getYearValue();
        java.util.Date date55 = week52.getStart();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date55, timeZone56);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date40, timeZone56);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date22, timeZone56);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date9, timeZone56);
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date3, timeZone56, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year11 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        int int8 = week2.getWeek();
        long long9 = week2.getFirstMillisecond();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week2.getLastMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-59101405200000L) + "'", long9 == (-59101405200000L));
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        java.util.Date date15 = week2.getEnd();
        long long16 = week2.getSerialIndex();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str20 = week19.toString();
        long long21 = week19.getMiddleMillisecond();
        long long22 = week19.getLastMillisecond();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        java.lang.Class<?> wildcardClass27 = week25.getClass();
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass27);
        int int29 = week19.compareTo((java.lang.Object) wildcardClass27);
        boolean boolean30 = week2.equals((java.lang.Object) int29);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Week 35, 52" + "'", str20, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506053200001L) + "'", long21 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        long long9 = week8.getSerialIndex();
        org.jfree.data.time.Year year10 = week8.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 1, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(3, year10);
        int int13 = week12.getWeek();
        int int14 = week12.getWeek();
        org.jfree.data.time.Year year15 = week12.getYear();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107124L + "'", long9 == 107124L);
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(year15);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.next();
        java.util.Date date24 = week2.getStart();
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = week2.getLastMillisecond(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            week14.peg(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        long long3 = week2.getFirstMillisecond();
        int int4 = week2.getWeek();
        java.util.Date date5 = week2.getEnd();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62167741200000L) + "'", long3 == (-62167741200000L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Jan 03 23:59:59 CET 1");
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        long long7 = week6.getSerialIndex();
        org.jfree.data.time.Year year8 = week6.getYear();
        long long9 = year8.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 107124L + "'", long7 == 107124L);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1625223599999L + "'", long9 == 1625223599999L);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week();
        long long23 = week22.getFirstMillisecond();
        org.jfree.data.time.Year year24 = week22.getYear();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(0, year24);
        org.jfree.data.time.Year year26 = week25.getYear();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(97, year26);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(0, year26);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) (byte) 100, year26);
        int int30 = week17.compareTo((java.lang.Object) year26);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1637449200000L + "'", long23 == 1637449200000L);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertNotNull(year26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        long long16 = week2.getSerialIndex();
        java.util.Date date17 = week2.getEnd();
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        long long7 = week2.getLastMillisecond();
        long long8 = week2.getFirstMillisecond();
        int int9 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 1, 2021");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the week.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getSerialIndex();
        int int3 = week0.getYearValue();
        java.lang.String str4 = week0.toString();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week0.getFirstMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107161L + "'", long2 == 107161L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2021 + "'", int3 == 2021);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 48, 2021" + "'", str4, "Week 48, 2021");
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week10.previous();
        int int19 = week10.getYearValue();
        long long20 = week10.getLastMillisecond();
        int int21 = week10.getWeek();
        int int22 = week10.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week10.next();
        int int24 = week10.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week10.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week10.next();
        boolean boolean27 = week2.equals((java.lang.Object) regularTimePeriod26);
        java.util.Calendar calendar28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long29 = regularTimePeriod26.getMiddleMillisecond(calendar28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60505750800001L) + "'", long20 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.next();
        long long24 = week2.getFirstMillisecond();
        long long25 = week2.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60506355600000L) + "'", long24 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60505750800001L) + "'", long25 == (-60505750800001L));
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getMiddleMillisecond();
        boolean boolean10 = week2.equals((java.lang.Object) (short) -1);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        long long12 = week11.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week11.previous();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize(class19);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize(class20);
        int int22 = week11.compareTo((java.lang.Object) class21);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) -1, year4);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.previous();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week6.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        long long9 = week8.getSerialIndex();
        org.jfree.data.time.Year year10 = week8.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 1, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(3, year10);
        int int13 = week12.getWeek();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week12.getFirstMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107124L + "'", long9 == 107124L);
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getFirstMillisecond();
        java.lang.String str5 = week2.toString();
        long long6 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506355600000L) + "'", long4 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2791L + "'", long6 == 2791L);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        java.lang.Object obj21 = null;
        int int22 = week2.compareTo(obj21);
        java.util.Calendar calendar23 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long24 = week2.getLastMillisecond(calendar23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getMiddleMillisecond();
        long long13 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 100, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(100, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 0, year7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(6, year7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) 'a', year7);
        long long13 = week12.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 107210L + "'", long13 == 107210L);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        int int6 = week2.getYearValue();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        int int8 = week2.getWeek();
        java.util.Date date9 = week2.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        int int14 = week12.getYearValue();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int16 = week12.compareTo((java.lang.Object) timeZone15);
        int int17 = week12.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week12.next();
        boolean boolean20 = week12.equals((java.lang.Object) 3);
        long long21 = week12.getLastMillisecond();
        java.lang.String str22 = week12.toString();
        java.util.Date date23 = week12.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str27 = week26.toString();
        long long28 = week26.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week26.next();
        java.util.Date date30 = week26.getEnd();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date35 = week34.getEnd();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date39 = week38.getStart();
        java.util.Date date40 = week38.getEnd();
        int int41 = week38.getYearValue();
        long long42 = week38.getLastMillisecond();
        java.lang.Class<?> wildcardClass43 = week38.getClass();
        java.util.Date date44 = null;
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date48 = week47.getStart();
        int int49 = week47.getYearValue();
        java.util.Date date50 = week47.getEnd();
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        java.lang.Class<?> wildcardClass55 = week53.getClass();
        java.lang.Class class56 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass55);
        java.lang.Class class57 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass55);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.next();
        int int62 = week60.getYearValue();
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int64 = week60.compareTo((java.lang.Object) timeZone63);
        int int65 = week60.getYearValue();
        int int67 = week60.compareTo((java.lang.Object) 9);
        java.util.Date date68 = week60.getStart();
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date68);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.next();
        int int74 = week72.getYearValue();
        java.util.TimeZone timeZone75 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int76 = week72.compareTo((java.lang.Object) timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass55, date68, timeZone75);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = week80.previous();
        int int82 = week80.getYearValue();
        java.util.Date date83 = week80.getStart();
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date83, timeZone84);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date68, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date50, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass43, date44, timeZone84);
        org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(date35, timeZone84);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date30, timeZone84);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date23, timeZone84);
        java.util.Locale locale92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date9, timeZone84, locale92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Week 35, 52" + "'", str27, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60506053200001L) + "'", long28 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-59100800400001L) + "'", long42 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(class56);
        org.junit.Assert.assertNotNull(class57);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod88);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        long long6 = year4.getMiddleMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year4);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            week7.peg(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1625223599999L + "'", long6 == 1625223599999L);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass8 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        java.util.Date date20 = week2.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        int int43 = week41.getYearValue();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int45 = week41.compareTo((java.lang.Object) timeZone44);
        int int46 = week41.getYearValue();
        int int48 = week41.compareTo((java.lang.Object) 9);
        java.util.Date date49 = week41.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date49, timeZone56);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.previous();
        int int63 = week61.getYearValue();
        java.util.Date date64 = week61.getStart();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date64, timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date49, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date31, timeZone65);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date20, timeZone65);
        java.util.Calendar calendar70 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long71 = week69.getMiddleMillisecond(calendar70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        int int27 = week22.getYearValue();
        int int29 = week22.compareTo((java.lang.Object) 9);
        java.util.Date date30 = week22.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass17, date30, timeZone37);
        java.util.Date date40 = regularTimePeriod39.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        int int50 = week43.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week43.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week43.next();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        java.lang.Class<?> wildcardClass57 = week55.getClass();
        java.lang.Class class58 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        boolean boolean60 = week43.equals((java.lang.Object) wildcardClass57);
        java.lang.Class class61 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date65 = week64.getStart();
        java.util.Date date66 = week64.getEnd();
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.next();
        java.lang.Class<?> wildcardClass71 = week69.getClass();
        java.lang.Class class72 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass71);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date76 = week75.getStart();
        java.lang.Class class77 = null;
        java.util.Date date78 = null;
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = org.jfree.data.time.RegularTimePeriod.createInstance(class77, date78, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass71, date76, timeZone79);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date66, timeZone79);
        java.lang.Class class83 = null;
        java.util.Date date84 = null;
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance(class83, date84, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance(class61, date66, timeZone85);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date40, timeZone85);
        int int89 = week2.compareTo((java.lang.Object) timeZone85);
        java.util.Calendar calendar90 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long91 = week2.getLastMillisecond(calendar90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(class58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(class61);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(class72);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod80);
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod86);
        org.junit.Assert.assertNull(regularTimePeriod87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Year year7 = week6.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(3, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (short) 100, year7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str13 = week12.toString();
        long long14 = week12.getMiddleMillisecond();
        long long15 = week12.getFirstMillisecond();
        int int16 = week12.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week12.previous();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date21);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str26 = week25.toString();
        long long27 = week25.getMiddleMillisecond();
        long long28 = week25.getLastMillisecond();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        java.lang.Class<?> wildcardClass33 = week31.getClass();
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        int int35 = week25.compareTo((java.lang.Object) wildcardClass33);
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        boolean boolean37 = week22.equals((java.lang.Object) wildcardClass33);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.previous();
        int int42 = week40.getYearValue();
        java.util.Date date43 = week40.getStart();
        int int44 = week40.getYearValue();
        long long45 = week40.getSerialIndex();
        boolean boolean46 = week22.equals((java.lang.Object) week40);
        boolean boolean47 = week12.equals((java.lang.Object) boolean46);
        java.util.Date date48 = week12.getStart();
        boolean boolean49 = week9.equals((java.lang.Object) date48);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date48);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Week 35, 52" + "'", str26, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-60506053200001L) + "'", long27 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60505750800001L) + "'", long28 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2791L + "'", long45 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.util.Date date12 = week2.getEnd();
        long long13 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date5, timeZone6);
        int int8 = week7.getYearValue();
        java.lang.String str9 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        long long11 = regularTimePeriod10.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505448400001L) + "'", long11 == (-60505448400001L));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(11, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(3, year5);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            week8.peg(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week19.next();
        java.util.Date date23 = week19.getStart();
        long long24 = week19.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505448400001L) + "'", long24 == (-60505448400001L));
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year14 = week11.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        java.util.Date date15 = week2.getEnd();
        java.lang.String str16 = week2.toString();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str20 = week19.toString();
        long long21 = week19.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week19.next();
        java.util.Date date23 = week19.getEnd();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date23);
        int int25 = week24.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week24.next();
        boolean boolean27 = week2.equals((java.lang.Object) regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Week 35, 52" + "'", str20, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506053200001L) + "'", long21 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        java.lang.Class<?> wildcardClass8 = week6.getClass();
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass8);
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass8);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        java.util.Date date21 = week13.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date21);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass8, date21, timeZone28);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        int int38 = week33.getYearValue();
        int int40 = week33.compareTo((java.lang.Object) 9);
        int int41 = week33.getYearValue();
        long long42 = week33.getLastMillisecond();
        int int43 = week33.getWeek();
        java.util.Date date44 = week33.getEnd();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date48 = week47.getStart();
        java.util.Date date49 = week47.getEnd();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.next();
        java.lang.Class<?> wildcardClass54 = week52.getClass();
        java.lang.Class class55 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass54);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date59 = week58.getStart();
        java.lang.Class class60 = null;
        java.util.Date date61 = null;
        java.util.TimeZone timeZone62 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = org.jfree.data.time.RegularTimePeriod.createInstance(class60, date61, timeZone62);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass54, date59, timeZone62);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date49, timeZone62);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date44, timeZone62);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str70 = week69.toString();
        long long71 = week69.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week69.next();
        java.util.Date date73 = regularTimePeriod72.getEnd();
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date77 = week76.getStart();
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = week80.next();
        int int82 = week80.getYearValue();
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int84 = week80.compareTo((java.lang.Object) timeZone83);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date77, timeZone83);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date73, timeZone83);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date44, timeZone83);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date21, timeZone83);
        long long89 = week88.getSerialIndex();
        boolean boolean90 = week2.equals((java.lang.Object) long89);
        java.util.Calendar calendar91 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62167741200000L) + "'", long3 == (-62167741200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60505750800001L) + "'", long42 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(class55);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Week 35, 52" + "'", str70, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 2791L + "'", long71 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 2791L + "'", long89 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 100, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (short) 10, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(1, year7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) (short) 1, year7);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        java.lang.String str13 = week2.toString();
        java.lang.String str14 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 9, 97" + "'", str13, "Week 9, 97");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 9, 97" + "'", str14, "Week 9, 97");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        int int18 = week2.getYearValue();
        java.util.Date date19 = week2.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date9, timeZone10);
        java.lang.Class<?> wildcardClass12 = timeZone10.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            week5.peg(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week2.previous();
        java.util.Date date21 = week2.getStart();
        long long22 = week2.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        long long11 = week9.getMiddleMillisecond();
        java.lang.String str12 = week9.toString();
        boolean boolean13 = week6.equals((java.lang.Object) week9);
        java.util.Date date14 = week6.getStart();
        java.util.Date date15 = week6.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date15);
        java.lang.String str17 = week16.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = week2.compareTo((java.lang.Object) week16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 9, 97" + "'", str17, "Week 9, 97");
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week20.next();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        int int28 = week26.getYearValue();
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int30 = week26.compareTo((java.lang.Object) timeZone29);
        int int31 = week26.getYearValue();
        int int33 = week26.compareTo((java.lang.Object) 9);
        long long34 = week26.getMiddleMillisecond();
        boolean boolean35 = week20.equals((java.lang.Object) long34);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60506053200001L) + "'", long34 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.next();
        java.util.Date date24 = week2.getStart();
        long long25 = week2.getFirstMillisecond();
        java.util.Date date26 = week2.getEnd();
        long long27 = week2.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60506355600000L) + "'", long25 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-60505750800001L) + "'", long27 == (-60505750800001L));
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.previous();
        java.util.Date date48 = week46.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        java.util.Date date54 = week51.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        int int63 = week61.getYearValue();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int65 = week61.compareTo((java.lang.Object) timeZone64);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date58, timeZone64);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date54, timeZone64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date48, timeZone64);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date42, timeZone64);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date42);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date42);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(date42);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.util.Date date7 = regularTimePeriod6.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week10.next();
        int int15 = week10.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str19 = week18.toString();
        long long20 = week18.getMiddleMillisecond();
        long long21 = week18.getLastMillisecond();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        java.lang.Class<?> wildcardClass26 = week24.getClass();
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass26);
        int int28 = week18.compareTo((java.lang.Object) wildcardClass26);
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass26);
        int int30 = week10.compareTo((java.lang.Object) class29);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        java.util.Date date35 = week33.getEnd();
        int int36 = week33.getYearValue();
        java.util.Date date37 = week33.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        int int45 = week40.getYearValue();
        long long46 = week40.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass47 = week40.getClass();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass47, date51, timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date37, timeZone57);
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date7, timeZone57, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60506053200001L) + "'", long46 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNull(regularTimePeriod60);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date6 = week5.getStart();
        java.util.Date date7 = week5.getEnd();
        int int8 = week5.getYearValue();
        java.util.Date date9 = week5.getEnd();
        boolean boolean10 = week2.equals((java.lang.Object) date9);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        boolean boolean11 = week2.equals((java.lang.Object) date10);
        java.lang.String str12 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        long long6 = week2.getLastMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        boolean boolean20 = week2.equals((java.lang.Object) week18);
        java.util.Calendar calendar21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = week2.getMiddleMillisecond(calendar21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59100800400001L) + "'", long6 == (-59100800400001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(52, year3);
        long long5 = year3.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1625223599999L + "'", long5 == 1625223599999L);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        int int24 = week16.getYearValue();
        long long25 = week16.getLastMillisecond();
        int int26 = week16.getWeek();
        java.util.Date date27 = week16.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.util.Date date32 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date42 = week41.getStart();
        java.lang.Class class43 = null;
        java.util.Date date44 = null;
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance(class43, date44, timeZone45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass37, date42, timeZone45);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date32, timeZone45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date27, timeZone45);
        java.util.Date date50 = week49.getStart();
        java.lang.Class class51 = null;
        java.util.Date date52 = null;
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance(class51, date52, timeZone53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date50, timeZone53);
        java.util.TimeZone timeZone56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date50, timeZone56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60505750800001L) + "'", long25 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 100, 12);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getSerialIndex();
        int int3 = week0.getYearValue();
        int int4 = week0.getYearValue();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            week0.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107161L + "'", long2 == 107161L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2021 + "'", int3 == 2021);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2021 + "'", int4 == 2021);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        int int3 = week2.getWeek();
        java.util.Date date4 = week2.getStart();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Nov 21 00:00:00 CET 101");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.util.Date date7 = regularTimePeriod6.getEnd();
        java.util.Date date8 = regularTimePeriod6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(date8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        int int17 = week9.compareTo((java.lang.Object) wildcardClass14);
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = week9.getMiddleMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        java.util.Date date5 = week2.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week8.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week8.next();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        java.lang.Class<?> wildcardClass22 = week20.getClass();
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        boolean boolean25 = week8.equals((java.lang.Object) wildcardClass22);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        java.util.Date date31 = week29.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        java.lang.Class class42 = null;
        java.util.Date date43 = null;
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance(class42, date43, timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date41, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date31, timeZone44);
        java.lang.Class class48 = null;
        java.util.Date date49 = null;
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date49, timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance(class26, date31, timeZone50);
        java.util.Locale locale53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date5, timeZone50, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod51);
        org.junit.Assert.assertNull(regularTimePeriod52);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date18, timeZone20);
        java.util.Date date22 = null;
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date26 = week25.getStart();
        java.util.Date date27 = week25.getEnd();
        int int28 = week25.getYearValue();
        java.util.Date date29 = week25.getStart();
        int int30 = week25.getWeek();
        java.lang.Class<?> wildcardClass31 = week25.getClass();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str35 = week34.toString();
        long long36 = week34.getMiddleMillisecond();
        long long37 = week34.getLastMillisecond();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        java.lang.Class<?> wildcardClass42 = week40.getClass();
        java.lang.Class class43 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass42);
        int int44 = week34.compareTo((java.lang.Object) wildcardClass42);
        long long45 = week34.getSerialIndex();
        int int47 = week34.compareTo((java.lang.Object) 0.0d);
        java.util.Date date48 = week34.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date48);
        java.lang.Class class50 = null;
        java.util.Date date51 = null;
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date51, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date48, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date22, timeZone52);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Week 35, 52" + "'", str35, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60506053200001L) + "'", long36 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60505750800001L) + "'", long37 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(class43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2791L + "'", long45 == 2791L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNull(regularTimePeriod55);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(11, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        int int23 = week20.getWeek();
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = week20.getMiddleMillisecond(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        long long8 = regularTimePeriod7.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505448400001L) + "'", long8 == (-60505448400001L));
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        java.util.Date date5 = week4.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.lang.Class<?> wildcardClass13 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 12, 0");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        int int16 = week4.getYearValue();
        long long17 = week4.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-59101102800001L) + "'", long17 == (-59101102800001L));
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        java.lang.Object obj21 = null;
        int int22 = week2.compareTo(obj21);
        java.lang.String str23 = week2.toString();
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Week 35, 52" + "'", str23, "Week 35, 52");
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        java.lang.String str6 = week2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year7 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        int int9 = week2.getWeek();
        int int10 = week2.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        long long14 = week11.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        int int21 = week11.compareTo((java.lang.Object) wildcardClass19);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        java.lang.Class<?> wildcardClass27 = week25.getClass();
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.lang.Class class33 = null;
        java.util.Date date34 = null;
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance(class33, date34, timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date32, timeZone35);
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date32, timeZone38);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date6, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date44 = week43.getStart();
        java.util.Date date45 = week43.getEnd();
        int int46 = week43.getYearValue();
        long long47 = week43.getLastMillisecond();
        java.lang.Class<?> wildcardClass48 = week43.getClass();
        java.util.Date date49 = null;
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date53 = week52.getStart();
        int int54 = week52.getYearValue();
        java.util.Date date55 = week52.getEnd();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        java.lang.Class<?> wildcardClass60 = week58.getClass();
        java.lang.Class class61 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass60);
        java.lang.Class class62 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass60);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        int int67 = week65.getYearValue();
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int69 = week65.compareTo((java.lang.Object) timeZone68);
        int int70 = week65.getYearValue();
        int int72 = week65.compareTo((java.lang.Object) 9);
        java.util.Date date73 = week65.getStart();
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        int int79 = week77.getYearValue();
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int81 = week77.compareTo((java.lang.Object) timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass60, date73, timeZone80);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = week85.previous();
        int int87 = week85.getYearValue();
        java.util.Date date88 = week85.getStart();
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date88, timeZone89);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date73, timeZone89);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date55, timeZone89);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass48, date49, timeZone89);
        java.util.Locale locale94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date6, timeZone89, locale94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-59100800400001L) + "'", long47 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(class61);
        org.junit.Assert.assertNotNull(class62);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod93);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.previous();
        int int11 = week9.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = week2.compareTo((java.lang.Object) regularTimePeriod12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (33) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.lang.String str12 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        java.lang.Class<?> wildcardClass15 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.previous();
        java.util.Date date48 = week46.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        java.util.Date date54 = week51.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        int int63 = week61.getYearValue();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int65 = week61.compareTo((java.lang.Object) timeZone64);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date58, timeZone64);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date54, timeZone64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date48, timeZone64);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date42, timeZone64);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date42);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date42);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date75 = week74.getStart();
        java.util.Date date76 = week74.getEnd();
        int int77 = week74.getYearValue();
        java.util.Date date78 = week74.getEnd();
        int int79 = week74.getYearValue();
        boolean boolean80 = week71.equals((java.lang.Object) int79);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, (int) ' ');
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        int int11 = week6.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week6.next();
        boolean boolean14 = week6.equals((java.lang.Object) 3);
        long long15 = week6.getLastMillisecond();
        java.lang.String str16 = week6.toString();
        java.util.Date date17 = week6.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        int int27 = week20.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week20.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week20.next();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        java.lang.Class<?> wildcardClass34 = week32.getClass();
        java.lang.Class class35 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass34);
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass34);
        boolean boolean37 = week20.equals((java.lang.Object) wildcardClass34);
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass34);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date42 = week41.getStart();
        java.util.Date date43 = week41.getEnd();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        java.lang.Class<?> wildcardClass48 = week46.getClass();
        java.lang.Class class49 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass48);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date53 = week52.getStart();
        java.lang.Class class54 = null;
        java.util.Date date55 = null;
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date55, timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass48, date53, timeZone56);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date43, timeZone56);
        java.lang.Class class60 = null;
        java.util.Date date61 = null;
        java.util.TimeZone timeZone62 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = org.jfree.data.time.RegularTimePeriod.createInstance(class60, date61, timeZone62);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance(class38, date43, timeZone62);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date17, timeZone62);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str69 = week68.toString();
        long long70 = week68.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week68.next();
        java.util.Date date72 = regularTimePeriod71.getEnd();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date76 = week75.getStart();
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = week79.next();
        int int81 = week79.getYearValue();
        java.util.TimeZone timeZone82 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int83 = week79.compareTo((java.lang.Object) timeZone82);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date76, timeZone82);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date72, timeZone82);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date17, timeZone82);
        java.util.Locale locale87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date3, timeZone82, locale87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Feb 23 23:59:59 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60505750800001L) + "'", long15 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(class35);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(class49);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod63);
        org.junit.Assert.assertNull(regularTimePeriod64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Week 35, 52" + "'", str69, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 2791L + "'", long70 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        long long7 = week2.getSerialIndex();
        long long8 = week2.getFirstMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getFirstMillisecond();
        long long5 = week2.getSerialIndex();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getFirstMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506355600000L) + "'", long4 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        java.util.Date date8 = week2.getStart();
        long long9 = week2.getFirstMillisecond();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-59101405200000L) + "'", long9 == (-59101405200000L));
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 48, 2021");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the week.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        java.lang.Class<?> wildcardClass3 = week2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getSerialIndex();
        int int14 = week2.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        long long23 = week20.getSerialIndex();
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = week20.getFirstMillisecond(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5150L + "'", long23 == 5150L);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        java.util.Date date19 = week2.getStart();
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = week2.getMiddleMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 0, (int) (short) 0);
        int int3 = week2.getWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        long long10 = week7.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506053200001L) + "'", long10 == (-60506053200001L));
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week8.previous();
        int int17 = week8.getYearValue();
        long long18 = week8.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        boolean boolean25 = week8.equals((java.lang.Object) wildcardClass23);
        int int26 = week8.getYearValue();
        boolean boolean27 = week2.equals((java.lang.Object) week8);
        java.util.Calendar calendar28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long29 = week2.getFirstMillisecond(calendar28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 52, 32" + "'", str5, "Week 52, 32");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        int int14 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week9.previous();
        int int18 = week9.getYearValue();
        long long19 = week9.getLastMillisecond();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        java.lang.Class<?> wildcardClass24 = week22.getClass();
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        boolean boolean26 = week9.equals((java.lang.Object) wildcardClass24);
        boolean boolean27 = week2.equals((java.lang.Object) wildcardClass24);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.util.Date date32 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        int int40 = week35.getYearValue();
        long long41 = week35.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass42 = week35.getClass();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date46, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date73 = week72.getStart();
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date73);
        java.util.TimeZone timeZone75 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date73, timeZone75);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date46, timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass24, date32, timeZone75);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date32);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = week82.next();
        int int84 = week82.getYearValue();
        long long85 = week82.getLastMillisecond();
        java.util.Date date86 = week82.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week82.next();
        // The following exception was thrown during execution in test generation
        try {
            int int88 = week79.compareTo((java.lang.Object) regularTimePeriod87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60505750800001L) + "'", long19 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-60506053200001L) + "'", long41 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-60505750800001L) + "'", long85 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod87);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2022, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Jun 26 00:00:00 CET 96");
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        long long10 = week2.getSerialIndex();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, (int) '#');
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) -1, year4);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.previous();
        int int8 = week6.getYearValue();
        long long9 = week6.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2021 + "'", int8 == 2021);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1608116399999L + "'", long9 == 1608116399999L);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date16 = week15.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date21 = week20.getEnd();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date25 = week24.getStart();
        java.util.Date date26 = week24.getEnd();
        int int27 = week24.getYearValue();
        long long28 = week24.getLastMillisecond();
        java.lang.Class<?> wildcardClass29 = week24.getClass();
        java.util.Date date30 = null;
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date34 = week33.getStart();
        int int35 = week33.getYearValue();
        java.util.Date date36 = week33.getEnd();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        java.lang.Class<?> wildcardClass41 = week39.getClass();
        java.lang.Class class42 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass41);
        java.lang.Class class43 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass41);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        int int48 = week46.getYearValue();
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int50 = week46.compareTo((java.lang.Object) timeZone49);
        int int51 = week46.getYearValue();
        int int53 = week46.compareTo((java.lang.Object) 9);
        java.util.Date date54 = week46.getStart();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date54);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        int int60 = week58.getYearValue();
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int62 = week58.compareTo((java.lang.Object) timeZone61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass41, date54, timeZone61);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.previous();
        int int68 = week66.getYearValue();
        java.util.Date date69 = week66.getStart();
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date69, timeZone70);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(date54, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date36, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass29, date30, timeZone70);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date21, timeZone70);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date16, timeZone70);
        java.util.Locale locale77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date12, timeZone70, locale77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-59100800400001L) + "'", long28 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertNotNull(class43);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod74);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        int int17 = week9.getYearValue();
        long long18 = week9.getLastMillisecond();
        int int19 = week9.getWeek();
        java.util.Date date20 = week9.getEnd();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        java.util.Date date25 = week23.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        java.lang.Class class36 = null;
        java.util.Date date37 = null;
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance(class36, date37, timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass30, date35, timeZone38);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date25, timeZone38);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date20, timeZone38);
        java.util.Locale locale43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date6, timeZone38, locale43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        java.util.Date date6 = week4.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str10 = week9.toString();
        long long11 = week9.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        java.util.Date date13 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.util.Date date16 = week14.getEnd();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date16, timeZone17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str22 = week21.toString();
        long long23 = week21.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week21.next();
        java.util.Date date25 = regularTimePeriod24.getEnd();
        java.lang.Class class26 = null;
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date30 = week29.getEnd();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        java.util.Date date35 = week33.getEnd();
        int int36 = week33.getYearValue();
        long long37 = week33.getLastMillisecond();
        java.lang.Class<?> wildcardClass38 = week33.getClass();
        java.util.Date date39 = null;
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date43 = week42.getStart();
        int int44 = week42.getYearValue();
        java.util.Date date45 = week42.getEnd();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        java.lang.Class<?> wildcardClass50 = week48.getClass();
        java.lang.Class class51 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        int int57 = week55.getYearValue();
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int59 = week55.compareTo((java.lang.Object) timeZone58);
        int int60 = week55.getYearValue();
        int int62 = week55.compareTo((java.lang.Object) 9);
        java.util.Date date63 = week55.getStart();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date63);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week67.next();
        int int69 = week67.getYearValue();
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int71 = week67.compareTo((java.lang.Object) timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass50, date63, timeZone70);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.previous();
        int int77 = week75.getYearValue();
        java.util.Date date78 = week75.getStart();
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date78, timeZone79);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date63, timeZone79);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date45, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass38, date39, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class26, date30, timeZone79);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date25, timeZone79);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date16, timeZone79);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date6, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = week87.previous();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2791L + "'", long23 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-59100800400001L) + "'", long37 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(class51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod83);
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        long long75 = week73.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week73.next();
        long long77 = regularTimePeriod76.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2791L + "'", long75 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-60505448400001L) + "'", long77 == (-60505448400001L));
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date11 = week10.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.util.Date date16 = week14.getEnd();
        int int17 = week14.getYearValue();
        long long18 = week14.getLastMillisecond();
        java.lang.Class<?> wildcardClass19 = week14.getClass();
        java.util.Date date20 = null;
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date24 = week23.getStart();
        int int25 = week23.getYearValue();
        java.util.Date date26 = week23.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        java.util.Date date44 = week36.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date44, timeZone51);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.previous();
        int int58 = week56.getYearValue();
        java.util.Date date59 = week56.getStart();
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date59, timeZone60);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date44, timeZone60);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date26, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date20, timeZone60);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date11, timeZone60);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date6, timeZone60);
        long long67 = week66.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-59100800400001L) + "'", long18 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-60506355600000L) + "'", long67 == (-60506355600000L));
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week30.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week30.next();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        boolean boolean47 = week30.equals((java.lang.Object) wildcardClass44);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        java.lang.Class class64 = null;
        java.util.Date date65 = null;
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date65, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date63, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date53, timeZone66);
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date53, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date27, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.previous();
        java.util.Date date77 = regularTimePeriod76.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sat Aug 19 23:59:59 CET 52");
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        int int23 = week15.getYearValue();
        long long24 = week15.getLastMillisecond();
        int int25 = week15.getWeek();
        java.util.Date date26 = week15.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        java.util.Date date31 = week29.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        java.lang.Class class42 = null;
        java.util.Date date43 = null;
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance(class42, date43, timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date41, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date31, timeZone44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date26, timeZone44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str52 = week51.toString();
        long long53 = week51.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week51.next();
        java.util.Date date55 = regularTimePeriod54.getEnd();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date59 = week58.getStart();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date59, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date55, timeZone65);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date26, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date3, timeZone65);
        java.util.Date date71 = week70.getEnd();
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(0, 4);
        int int75 = week70.compareTo((java.lang.Object) 4);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Week 35, 52" + "'", str52, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2791L + "'", long53 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.lang.String str11 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week7.previous();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        boolean boolean14 = week4.equals((java.lang.Object) wildcardClass13);
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(class15);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week2.previous();
        long long21 = regularTimePeriod20.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506658000001L) + "'", long21 == (-60506658000001L));
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        int int3 = week0.getWeek();
        long long4 = week0.getLastMillisecond();
        long long5 = week0.getFirstMillisecond();
        int int6 = week0.getYearValue();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            week0.peg(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1638053999999L + "'", long4 == 1638053999999L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2021 + "'", int6 == 2021);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        long long17 = week2.getSerialIndex();
        long long18 = week2.getFirstMillisecond();
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = week2.getLastMillisecond(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2791L + "'", long17 == 2791L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week19.next();
        java.util.Date date23 = week19.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year24 = week19.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 27 00:00:00 CET 52");
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        java.util.Date date15 = week2.getEnd();
        java.lang.String str16 = week2.toString();
        int int17 = week2.getYearValue();
        java.lang.String str18 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        java.util.Date date8 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        long long14 = week11.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        int int21 = week11.compareTo((java.lang.Object) wildcardClass19);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        java.lang.Class<?> wildcardClass27 = week25.getClass();
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.lang.Class class33 = null;
        java.util.Date date34 = null;
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance(class33, date34, timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date32, timeZone35);
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date32, timeZone38);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date32);
        boolean boolean41 = week2.equals((java.lang.Object) week40);
        java.lang.Class<?> wildcardClass42 = week2.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week4.getLastMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        java.util.Date date32 = week31.getStart();
        long long33 = week31.getFirstMillisecond();
        java.util.Calendar calendar34 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long35 = week31.getMiddleMillisecond(calendar34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-59101405200000L) + "'", long33 == (-59101405200000L));
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(12, 0);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str7 = week6.toString();
        long long8 = week6.getMiddleMillisecond();
        long long9 = week6.getLastMillisecond();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        int int16 = week6.compareTo((java.lang.Object) wildcardClass14);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        java.util.Date date46 = regularTimePeriod45.getEnd();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date46);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        java.lang.Class<?> wildcardClass63 = week61.getClass();
        java.lang.Class class64 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass63);
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass63);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.next();
        int int70 = week68.getYearValue();
        java.util.TimeZone timeZone71 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int72 = week68.compareTo((java.lang.Object) timeZone71);
        int int73 = week68.getYearValue();
        int int75 = week68.compareTo((java.lang.Object) 9);
        java.util.Date date76 = week68.getStart();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date76);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = week80.next();
        int int82 = week80.getYearValue();
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int84 = week80.compareTo((java.lang.Object) timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass63, date76, timeZone83);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = week88.previous();
        int int90 = week88.getYearValue();
        java.util.Date date91 = week88.getStart();
        java.util.TimeZone timeZone92 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date91, timeZone92);
        org.jfree.data.time.Week week94 = new org.jfree.data.time.Week(date76, timeZone92);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date58, timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod96 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date46, timeZone92);
        org.jfree.data.time.Week week97 = new org.jfree.data.time.Week(date3, timeZone92);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60505750800001L) + "'", long9 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(class64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 52 + "'", int90 == 52);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod96);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        int int12 = week9.getYearValue();
        java.util.Date date13 = week9.getStart();
        long long14 = week9.getLastMillisecond();
        boolean boolean15 = week2.equals((java.lang.Object) week9);
        java.lang.Class<?> wildcardClass16 = week9.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-59100800400001L) + "'", long14 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date9, timeZone10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str15 = week14.toString();
        long long16 = week14.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week14.next();
        java.util.Date date18 = regularTimePeriod17.getEnd();
        java.lang.Class class19 = null;
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date23 = week22.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        java.util.Date date28 = week26.getEnd();
        int int29 = week26.getYearValue();
        long long30 = week26.getLastMillisecond();
        java.lang.Class<?> wildcardClass31 = week26.getClass();
        java.util.Date date32 = null;
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date36 = week35.getStart();
        int int37 = week35.getYearValue();
        java.util.Date date38 = week35.getEnd();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        java.lang.Class<?> wildcardClass43 = week41.getClass();
        java.lang.Class class44 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        int int53 = week48.getYearValue();
        int int55 = week48.compareTo((java.lang.Object) 9);
        java.util.Date date56 = week48.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date56);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.next();
        int int62 = week60.getYearValue();
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int64 = week60.compareTo((java.lang.Object) timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass43, date56, timeZone63);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.previous();
        int int70 = week68.getYearValue();
        java.util.Date date71 = week68.getStart();
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date71, timeZone72);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date56, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date38, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date32, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance(class19, date23, timeZone72);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date18, timeZone72);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date9, timeZone72);
        java.lang.String str80 = week79.toString();
        long long81 = week79.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-59100800400001L) + "'", long30 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(class44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod76);
        org.junit.Assert.assertNull(regularTimePeriod77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Week 35, 52" + "'", str80, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-60505750800001L) + "'", long81 == (-60505750800001L));
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week2.previous();
        java.util.Date date21 = week2.getStart();
        java.util.Calendar calendar22 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.next();
        java.util.Date date24 = week2.getStart();
        long long25 = week2.getFirstMillisecond();
        java.util.Date date26 = week2.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        java.util.Date date31 = week29.getEnd();
        int int32 = week29.getYearValue();
        java.util.Date date33 = week29.getStart();
        int int34 = week29.getWeek();
        java.lang.Class<?> wildcardClass35 = week29.getClass();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str39 = week38.toString();
        long long40 = week38.getMiddleMillisecond();
        long long41 = week38.getLastMillisecond();
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.next();
        java.lang.Class<?> wildcardClass46 = week44.getClass();
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass46);
        int int48 = week38.compareTo((java.lang.Object) wildcardClass46);
        long long49 = week38.getSerialIndex();
        int int51 = week38.compareTo((java.lang.Object) 0.0d);
        java.util.Date date52 = week38.getEnd();
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date52);
        java.lang.Class class54 = null;
        java.util.Date date55 = null;
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date55, timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass35, date52, timeZone56);
        java.util.Locale locale59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date26, timeZone56, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60506355600000L) + "'", long25 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Week 35, 52" + "'", str39, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-60506053200001L) + "'", long40 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-60505750800001L) + "'", long41 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2791L + "'", long49 == 2791L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2021, (int) (short) 10);
        long long3 = week2.getFirstMillisecond();
        int int4 = week2.getYearValue();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-61868970000000L) + "'", long3 == (-61868970000000L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Date date74 = week73.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = week73.previous();
        java.util.Date date76 = week73.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(48, 5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 313L + "'", long4 == 313L);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        long long12 = week9.getLastMillisecond();
        java.util.Date date13 = week9.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week16.next();
        java.util.Date date20 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date25 = week24.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date29 = week28.getStart();
        java.util.Date date30 = week28.getEnd();
        int int31 = week28.getYearValue();
        long long32 = week28.getLastMillisecond();
        java.lang.Class<?> wildcardClass33 = week28.getClass();
        java.util.Date date34 = null;
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date38 = week37.getStart();
        int int39 = week37.getYearValue();
        java.util.Date date40 = week37.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date34, timeZone74);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date25, timeZone74);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date20, timeZone74);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date13, timeZone74);
        java.util.Locale locale82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date6, timeZone74, locale82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-59100800400001L) + "'", long32 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        java.util.Date date36 = week35.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        int int38 = week37.getYearValue();
        int int39 = week37.getWeek();
        java.util.Date date40 = week37.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        java.util.Date date13 = week2.getStart();
        long long14 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-59101405200000L) + "'", long14 == (-59101405200000L));
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, (int) '4');
        boolean boolean9 = week2.equals((java.lang.Object) '4');
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week31.next();
        java.util.Date date34 = week31.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date39);
        java.util.Date date41 = week40.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week();
        long long43 = week42.getFirstMillisecond();
        long long44 = week42.getSerialIndex();
        int int45 = week42.getYearValue();
        java.util.Date date46 = week42.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date50 = week49.getStart();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date50);
        java.util.Date date52 = week51.getStart();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        int int57 = week55.getYearValue();
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int59 = week55.compareTo((java.lang.Object) timeZone58);
        int int60 = week55.getYearValue();
        long long61 = week55.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass62 = week55.getClass();
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date66 = week65.getStart();
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.next();
        int int71 = week69.getYearValue();
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int73 = week69.compareTo((java.lang.Object) timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass62, date66, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date52, timeZone72);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date46, timeZone72);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date41, timeZone72);
        java.util.Locale locale78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date34, timeZone72, locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1637449200000L + "'", long43 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 107161L + "'", long44 == 107161L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2021 + "'", int45 == 2021);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Nov 27 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-60506053200001L) + "'", long61 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.lang.Class<?> wildcardClass7 = week2.getClass();
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize(class8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        int int14 = week12.getYearValue();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int16 = week12.compareTo((java.lang.Object) timeZone15);
        int int17 = week12.getYearValue();
        int int19 = week12.compareTo((java.lang.Object) 9);
        int int20 = week12.getYearValue();
        long long21 = week12.getLastMillisecond();
        int int22 = week12.getWeek();
        java.util.Date date23 = week12.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date27 = week26.getStart();
        int int28 = week26.getYearValue();
        java.util.Date date29 = week26.getEnd();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        java.lang.Class<?> wildcardClass34 = week32.getClass();
        java.lang.Class class35 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass34);
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        int int41 = week39.getYearValue();
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int43 = week39.compareTo((java.lang.Object) timeZone42);
        int int44 = week39.getYearValue();
        int int46 = week39.compareTo((java.lang.Object) 9);
        java.util.Date date47 = week39.getStart();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date47);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        int int53 = week51.getYearValue();
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int55 = week51.compareTo((java.lang.Object) timeZone54);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass34, date47, timeZone54);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.previous();
        int int61 = week59.getYearValue();
        java.util.Date date62 = week59.getStart();
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date62, timeZone63);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date47, timeZone63);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date29, timeZone63);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date23, timeZone63);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week();
        long long70 = week69.getFirstMillisecond();
        org.jfree.data.time.Year year71 = week69.getYear();
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(0, year71);
        org.jfree.data.time.Year year73 = week72.getYear();
        java.util.Date date74 = year73.getEnd();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.util.Date date79 = week77.getEnd();
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = week82.next();
        java.lang.Class<?> wildcardClass84 = week82.getClass();
        java.lang.Class class85 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass84);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date89 = week88.getStart();
        java.lang.Class class90 = null;
        java.util.Date date91 = null;
        java.util.TimeZone timeZone92 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = org.jfree.data.time.RegularTimePeriod.createInstance(class90, date91, timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass84, date89, timeZone92);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date79, timeZone92);
        java.util.TimeZone timeZone96 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week97 = new org.jfree.data.time.Week(date79, timeZone96);
        org.jfree.data.time.Week week98 = new org.jfree.data.time.Week(date74, timeZone96);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod99 = org.jfree.data.time.RegularTimePeriod.createInstance(class8, date23, timeZone96);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(class35);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1637449200000L + "'", long70 == 1637449200000L);
        org.junit.Assert.assertNotNull(year71);
        org.junit.Assert.assertNotNull(year73);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(class85);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod93);
        org.junit.Assert.assertNotNull(regularTimePeriod94);
        org.junit.Assert.assertNotNull(timeZone96);
// flaky:         org.junit.Assert.assertEquals(timeZone96.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod99);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.lang.Class class0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week3.next();
        int int5 = week3.getYearValue();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int7 = week3.compareTo((java.lang.Object) timeZone6);
        int int8 = week3.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week3.previous();
        java.util.Date date10 = regularTimePeriod9.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date20 = week19.getStart();
        java.lang.Class class21 = null;
        java.util.Date date22 = null;
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = org.jfree.data.time.RegularTimePeriod.createInstance(class21, date22, timeZone23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date20, timeZone23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date10, timeZone23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date10);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 19 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNull(regularTimePeriod26);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(date3, timeZone12);
        long long14 = week13.getFirstMillisecond();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-59101405200000L) + "'", long14 == (-59101405200000L));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize(class7);
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize(class8);
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize(class9);
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize(class10);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(class11);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str23 = week22.toString();
        long long24 = week22.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week22.next();
        java.util.Date date26 = regularTimePeriod25.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date30, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date26, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date6, timeZone36);
        java.lang.Class<?> wildcardClass41 = week40.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Week 35, 52" + "'", str23, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2791L + "'", long24 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        int int11 = week2.getYearValue();
        int int12 = week2.getYearValue();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week15.next();
        java.util.Date date19 = week15.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date19);
        long long21 = week20.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week20.next();
        boolean boolean23 = week2.equals((java.lang.Object) regularTimePeriod22);
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = regularTimePeriod22.getMiddleMillisecond(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.util.Date date0 = null;
        java.util.TimeZone timeZone1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(date0, timeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 1, 9);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getFirstMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        long long11 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2791L + "'", long11 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getLastMillisecond();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date19, timeZone25);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date19);
        boolean boolean29 = week2.equals((java.lang.Object) week28);
        java.util.Calendar calendar30 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long31 = week2.getLastMillisecond(calendar30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60505750800001L) + "'", long15 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        int int9 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        int int8 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.previous();
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = week2.getLastMillisecond(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        int int8 = week2.getWeek();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 0, (int) (short) 0);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str6 = week5.toString();
        long long7 = week5.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week5.next();
        java.util.Date date9 = regularTimePeriod8.getEnd();
        java.util.Date date10 = regularTimePeriod8.getStart();
        boolean boolean11 = week2.equals((java.lang.Object) regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getFirstMillisecond();
        java.lang.String str8 = week2.toString();
        long long9 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        boolean boolean11 = week2.equals((java.lang.Object) date10);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week();
        long long14 = week13.getFirstMillisecond();
        org.jfree.data.time.Year year15 = week13.getYear();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(0, year15);
        org.jfree.data.time.Year year17 = week16.getYear();
        java.util.Date date18 = week16.getEnd();
        int int19 = week2.compareTo((java.lang.Object) date18);
        java.lang.String str20 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1637449200000L + "'", long14 == 1637449200000L);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertNotNull(year17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Dec 26 23:59:59 CET 2020");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Week 35, 52" + "'", str20, "Week 35, 52");
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.util.Date date9 = week2.getEnd();
        long long10 = week2.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506053200001L) + "'", long10 == (-60506053200001L));
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        java.util.Date date5 = week2.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year6 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        int int10 = week5.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week5.next();
        long long12 = week5.getSerialIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year13 = week5.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        java.lang.String str5 = week2.toString();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 52, 32" + "'", str5, "Week 52, 32");
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        boolean boolean11 = week2.equals((java.lang.Object) date10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date22, timeZone28);
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date22, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.previous();
        int int37 = week35.getYearValue();
        java.util.Date date38 = week35.getStart();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date38, timeZone39);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = org.jfree.data.time.RegularTimePeriod.createInstance(class18, date22, timeZone39);
        java.util.Locale locale42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date10, timeZone39, locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod41);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        java.util.Date date6 = week4.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str10 = week9.toString();
        long long11 = week9.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        java.util.Date date13 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.util.Date date16 = week14.getEnd();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date16, timeZone17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str22 = week21.toString();
        long long23 = week21.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week21.next();
        java.util.Date date25 = regularTimePeriod24.getEnd();
        java.lang.Class class26 = null;
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date30 = week29.getEnd();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        java.util.Date date35 = week33.getEnd();
        int int36 = week33.getYearValue();
        long long37 = week33.getLastMillisecond();
        java.lang.Class<?> wildcardClass38 = week33.getClass();
        java.util.Date date39 = null;
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date43 = week42.getStart();
        int int44 = week42.getYearValue();
        java.util.Date date45 = week42.getEnd();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        java.lang.Class<?> wildcardClass50 = week48.getClass();
        java.lang.Class class51 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        int int57 = week55.getYearValue();
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int59 = week55.compareTo((java.lang.Object) timeZone58);
        int int60 = week55.getYearValue();
        int int62 = week55.compareTo((java.lang.Object) 9);
        java.util.Date date63 = week55.getStart();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date63);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week67.next();
        int int69 = week67.getYearValue();
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int71 = week67.compareTo((java.lang.Object) timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass50, date63, timeZone70);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.previous();
        int int77 = week75.getYearValue();
        java.util.Date date78 = week75.getStart();
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date78, timeZone79);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date63, timeZone79);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date45, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass38, date39, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class26, date30, timeZone79);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date25, timeZone79);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date16, timeZone79);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date6, timeZone79);
        java.lang.Class<?> wildcardClass88 = week87.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2791L + "'", long23 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-59100800400001L) + "'", long37 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(class51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod83);
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        boolean boolean7 = week2.equals((java.lang.Object) 0L);
        long long8 = week2.getLastMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year9 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-59100800400001L) + "'", long8 == (-59100800400001L));
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str39 = week38.toString();
        long long40 = week38.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week38.next();
        java.util.Date date42 = regularTimePeriod41.getEnd();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date46, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date42, timeZone52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date13, timeZone52);
        java.util.Calendar calendar57 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long58 = week56.getLastMillisecond(calendar57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Week 35, 52" + "'", str39, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2791L + "'", long40 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        long long16 = week15.getSerialIndex();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week21.next();
        boolean boolean29 = week21.equals((java.lang.Object) 3);
        long long30 = week21.getLastMillisecond();
        java.lang.String str31 = week21.toString();
        java.util.Date date32 = week21.getEnd();
        java.util.Date date33 = week21.getEnd();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        java.lang.Class<?> wildcardClass38 = week36.getClass();
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass38);
        java.lang.Class class40 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        int int50 = week43.compareTo((java.lang.Object) 9);
        java.util.Date date51 = week43.getStart();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date51);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        int int57 = week55.getYearValue();
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int59 = week55.compareTo((java.lang.Object) timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass38, date51, timeZone58);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.previous();
        int int65 = week63.getYearValue();
        java.util.Date date66 = week63.getStart();
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date66, timeZone67);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date51, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass17, date33, timeZone67);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5150L + "'", long16 == 5150L);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60505750800001L) + "'", long30 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Week 35, 52" + "'", str31, "Week 35, 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertNotNull(class40);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        java.util.Date date6 = week4.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        int int17 = week9.getYearValue();
        long long18 = week9.getLastMillisecond();
        long long19 = week9.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week9.next();
        long long21 = week9.getFirstMillisecond();
        java.lang.String str22 = week9.toString();
        boolean boolean23 = week4.equals((java.lang.Object) week9);
        int int24 = week4.getWeek();
        long long25 = week4.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Dec 26 23:59:59 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2791L + "'", long19 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506355600000L) + "'", long21 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1608721199999L + "'", long25 == 1608721199999L);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(52, year3);
        long long5 = week4.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1640170799999L + "'", long5 == 1640170799999L);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(4, year5);
        java.lang.String str9 = week8.toString();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 4, 2021" + "'", str9, "Week 4, 2021");
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.TimeZone timeZone14 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int15 = week11.compareTo((java.lang.Object) timeZone14);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date8, timeZone14);
        java.util.Date date17 = week16.getEnd();
        boolean boolean18 = week2.equals((java.lang.Object) week16);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str22 = week21.toString();
        long long23 = week21.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week21.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week21.previous();
        long long26 = week21.getSerialIndex();
        long long27 = week21.getFirstMillisecond();
        int int28 = week21.getWeek();
        int int29 = week16.compareTo((java.lang.Object) int28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week16.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2791L + "'", long23 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2791L + "'", long26 == 2791L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-60506355600000L) + "'", long27 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        java.util.Date date5 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        long long14 = week8.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass15 = week8.getClass();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date19, timeZone25);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date19);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date19, timeZone34);
        boolean boolean37 = week2.equals((java.lang.Object) week36);
        long long38 = week36.getSerialIndex();
        java.util.Calendar calendar39 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long40 = week36.getMiddleMillisecond(calendar39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 5150L + "'", long38 == 5150L);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        int int11 = week2.getYearValue();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = regularTimePeriod13.getStart();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = regularTimePeriod13.getMiddleMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 13 00:00:00 CET 52");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date16);
        int int20 = week19.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        java.util.Date date6 = week4.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.next();
        java.lang.Class<?> wildcardClass8 = regularTimePeriod7.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.lang.String str12 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date18 = week17.getStart();
        boolean boolean19 = week2.equals((java.lang.Object) week17);
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            week17.peg(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        int int27 = week20.compareTo((java.lang.Object) 9);
        java.util.Date date28 = week20.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date28, timeZone35);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.previous();
        int int42 = week40.getYearValue();
        java.util.Date date43 = week40.getStart();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date43, timeZone44);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date28, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date10, timeZone44);
        int int48 = week47.getWeek();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.previous();
        int int53 = week51.getYearValue();
        long long54 = week51.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week51.next();
        long long56 = week51.getSerialIndex();
        int int57 = week47.compareTo((java.lang.Object) long56);
        java.util.Calendar calendar58 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long59 = week47.getFirstMillisecond(calendar58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2791L + "'", long54 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2791L + "'", long56 == 2791L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        long long6 = week2.getSerialIndex();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getFirstMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2791L + "'", long6 == 2791L);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year11 = week7.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        java.util.Date date10 = week7.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date14, timeZone20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date10, timeZone20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date4, timeZone20);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date4);
        java.lang.Class class26 = null;
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        int int34 = week29.getYearValue();
        int int36 = week29.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week29.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week29.next();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        java.lang.Class<?> wildcardClass43 = week41.getClass();
        java.lang.Class class44 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        boolean boolean46 = week29.equals((java.lang.Object) wildcardClass43);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        java.util.Date date52 = week50.getEnd();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        java.lang.Class<?> wildcardClass57 = week55.getClass();
        java.lang.Class class58 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date62 = week61.getStart();
        java.lang.Class class63 = null;
        java.util.Date date64 = null;
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance(class63, date64, timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass57, date62, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date52, timeZone65);
        java.lang.Class class69 = null;
        java.util.Date date70 = null;
        java.util.TimeZone timeZone71 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance(class69, date70, timeZone71);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class47, date52, timeZone71);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week76.next();
        java.lang.Class<?> wildcardClass78 = week76.getClass();
        java.lang.Class class79 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass78);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date83 = week82.getStart();
        java.lang.Class class84 = null;
        java.util.Date date85 = null;
        java.util.TimeZone timeZone86 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance(class84, date85, timeZone86);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass78, date83, timeZone86);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date92 = week91.getStart();
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date92);
        java.util.TimeZone timeZone94 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod95 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass78, date92, timeZone94);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod96 = org.jfree.data.time.RegularTimePeriod.createInstance(class26, date52, timeZone94);
        java.util.Locale locale97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week98 = new org.jfree.data.time.Week(date4, timeZone94, locale97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(class44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(class58);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod66);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod72);
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(class79);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone86);
// flaky:         org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone94);
// flaky:         org.junit.Assert.assertEquals(timeZone94.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod95);
        org.junit.Assert.assertNull(regularTimePeriod96);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getFirstMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week9.previous();
        int int18 = week9.getYearValue();
        java.lang.String str19 = week9.toString();
        long long20 = week9.getFirstMillisecond();
        int int21 = week2.compareTo((java.lang.Object) long20);
        java.util.Date date22 = week2.getEnd();
        int int23 = week2.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506355600000L) + "'", long20 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        java.lang.String str75 = week73.toString();
        java.util.Calendar calendar76 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long77 = week73.getLastMillisecond(calendar76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Week 35, 52" + "'", str75, "Week 35, 52");
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        long long18 = week15.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        int int25 = week15.compareTo((java.lang.Object) wildcardClass23);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        boolean boolean27 = week12.equals((java.lang.Object) wildcardClass23);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.previous();
        int int32 = week30.getYearValue();
        java.util.Date date33 = week30.getStart();
        int int34 = week30.getYearValue();
        long long35 = week30.getSerialIndex();
        boolean boolean36 = week12.equals((java.lang.Object) week30);
        boolean boolean37 = week2.equals((java.lang.Object) boolean36);
        java.util.Date date38 = week2.getStart();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date42 = week41.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date42, timeZone48);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date42);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        int int59 = week54.getYearValue();
        long long60 = week54.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass61 = week54.getClass();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date65 = week64.getStart();
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.next();
        int int70 = week68.getYearValue();
        java.util.TimeZone timeZone71 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int72 = week68.compareTo((java.lang.Object) timeZone71);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass61, date65, timeZone71);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date65);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        int int79 = week77.getYearValue();
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int81 = week77.compareTo((java.lang.Object) timeZone80);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date65, timeZone80);
        int int83 = week51.compareTo((java.lang.Object) timeZone80);
        java.util.Locale locale84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date38, timeZone80, locale84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2791L + "'", long35 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60506053200001L) + "'", long60 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week30.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week30.next();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        boolean boolean47 = week30.equals((java.lang.Object) wildcardClass44);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        java.lang.Class class64 = null;
        java.util.Date date65 = null;
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date65, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date63, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date53, timeZone66);
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date53, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date27, timeZone72);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = week81.next();
        long long83 = week81.getMiddleMillisecond();
        java.lang.String str84 = week81.toString();
        boolean boolean85 = week78.equals((java.lang.Object) week81);
        int int86 = week81.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week81.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = week81.previous();
        boolean boolean89 = week75.equals((java.lang.Object) week81);
        long long90 = week81.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod91 = week81.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-60506053200001L) + "'", long83 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Week 35, 52" + "'", str84, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-60505750800001L) + "'", long90 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod91);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        java.util.Date date16 = week15.getStart();
        long long17 = week15.getLastMillisecond();
        long long18 = week15.getMiddleMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year19 = week15.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-59100800400001L) + "'", long17 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-59101102800001L) + "'", long18 == (-59101102800001L));
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        int int14 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        int int8 = week2.getWeek();
        java.util.Date date9 = week2.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        java.util.Date date14 = week12.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        java.lang.Class class25 = null;
        java.util.Date date26 = null;
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance(class25, date26, timeZone27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date24, timeZone27);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date14, timeZone27);
        java.util.Locale locale31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date9, timeZone27, locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        long long7 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        long long7 = week6.getFirstMillisecond();
        int int8 = week6.getYearValue();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1615071600000L + "'", long7 == 1615071600000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2021 + "'", int8 == 2021);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getFirstMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getMiddleMillisecond();
        java.util.Date date15 = week2.getEnd();
        int int16 = week2.getYearValue();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date20 = week19.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date24 = week23.getStart();
        int int25 = week23.getYearValue();
        java.util.Date date26 = week23.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        java.util.Date date44 = week36.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date44, timeZone51);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.previous();
        int int58 = week56.getYearValue();
        java.util.Date date59 = week56.getStart();
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date59, timeZone60);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date44, timeZone60);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date26, timeZone60);
        boolean boolean64 = week19.equals((java.lang.Object) date26);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date26);
        int int66 = week2.compareTo((java.lang.Object) date26);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 4);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        long long7 = week6.getSerialIndex();
        java.util.Date date8 = week6.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        long long14 = week11.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        int int21 = week11.compareTo((java.lang.Object) wildcardClass19);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize(class22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week();
        long long26 = week25.getFirstMillisecond();
        org.jfree.data.time.Year year27 = week25.getYear();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(0, year27);
        java.util.Date date29 = week28.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.util.Date date34 = week32.getEnd();
        int int35 = week32.getYearValue();
        long long36 = week32.getLastMillisecond();
        java.lang.Class<?> wildcardClass37 = week32.getClass();
        java.util.Date date38 = null;
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date42 = week41.getStart();
        int int43 = week41.getYearValue();
        java.util.Date date44 = week41.getEnd();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.next();
        java.lang.Class<?> wildcardClass49 = week47.getClass();
        java.lang.Class class50 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass49);
        java.lang.Class class51 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass49);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        int int59 = week54.getYearValue();
        int int61 = week54.compareTo((java.lang.Object) 9);
        java.util.Date date62 = week54.getStart();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date62);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.next();
        int int68 = week66.getYearValue();
        java.util.TimeZone timeZone69 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int70 = week66.compareTo((java.lang.Object) timeZone69);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass49, date62, timeZone69);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = week74.previous();
        int int76 = week74.getYearValue();
        java.util.Date date77 = week74.getStart();
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date77, timeZone78);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date62, timeZone78);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date44, timeZone78);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass37, date38, timeZone78);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance(class23, date29, timeZone78);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date8, timeZone78);
        java.util.Locale locale85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date3, timeZone78, locale85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Dec 29 23:59:59 CET 3");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1748L + "'", long7 == 1748L);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1637449200000L + "'", long26 == 1637449200000L);
        org.junit.Assert.assertNotNull(year27);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-59100800400001L) + "'", long36 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(class50);
        org.junit.Assert.assertNotNull(class51);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date18, timeZone20);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(class23);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        long long16 = week2.getSerialIndex();
        int int17 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.lang.String str7 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getLastMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        int int18 = week2.getYearValue();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        long long23 = week21.getMiddleMillisecond();
        java.lang.String str24 = week21.toString();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        java.lang.Class<?> wildcardClass29 = week27.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        java.lang.Class class35 = null;
        java.util.Date date36 = null;
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance(class35, date36, timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass29, date34, timeZone37);
        java.lang.Class<?> wildcardClass40 = timeZone37.getClass();
        boolean boolean41 = week21.equals((java.lang.Object) wildcardClass40);
        int int42 = week2.compareTo((java.lang.Object) wildcardClass40);
        java.util.Date date43 = week2.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60506053200001L) + "'", long23 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Week 35, 52" + "'", str24, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(1, (int) (byte) -1);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        int int3 = week0.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week0.next();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getMiddleMillisecond();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.lang.String str10 = week2.toString();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week2.getFirstMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        long long10 = week2.getMiddleMillisecond();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506053200001L) + "'", long10 == (-60506053200001L));
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.lang.String str16 = week2.toString();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week19.previous();
        int int28 = week19.getYearValue();
        long long29 = week19.getLastMillisecond();
        long long30 = week19.getMiddleMillisecond();
        java.lang.String str31 = week19.toString();
        boolean boolean32 = week2.equals((java.lang.Object) str31);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60505750800001L) + "'", long29 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60506053200001L) + "'", long30 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Week 35, 52" + "'", str31, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        long long16 = week2.getFirstMillisecond();
        java.lang.Class<?> wildcardClass17 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506355600000L) + "'", long16 == (-60506355600000L));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 1, year5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.previous();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week8.getFirstMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date17);
        long long29 = week28.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2791L + "'", long29 == 2791L);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week4.getFirstMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        long long5 = week4.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 107113L + "'", long5 == 107113L);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week10.next();
        java.util.Date date14 = regularTimePeriod13.getEnd();
        java.util.TimeZone timeZone15 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date14, timeZone15);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date14);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNull(regularTimePeriod16);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        long long16 = week14.getMiddleMillisecond();
        java.lang.String str17 = week14.toString();
        boolean boolean18 = week11.equals((java.lang.Object) week14);
        java.util.Date date19 = week11.getStart();
        int int20 = week2.compareTo((java.lang.Object) date19);
        long long21 = week2.getSerialIndex();
        java.util.Calendar calendar22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = week2.getFirstMillisecond(calendar22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2791L + "'", long21 == 2791L);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        java.lang.String str14 = week2.toString();
        int int15 = week2.getWeek();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getLastMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        java.lang.Class<?> wildcardClass11 = week2.getClass();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.util.Date date16 = week14.getEnd();
        int int17 = week14.getYearValue();
        java.util.Date date18 = week14.getEnd();
        java.util.Date date19 = week14.getStart();
        java.lang.Class class20 = null;
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str24 = week23.toString();
        long long25 = week23.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week23.next();
        java.util.Date date27 = week23.getEnd();
        long long28 = week23.getLastMillisecond();
        java.util.Date date29 = week23.getEnd();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str33 = week32.toString();
        long long34 = week32.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week32.next();
        java.util.Date date36 = week32.getEnd();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        java.util.Date date39 = week37.getEnd();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date39, timeZone40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance(class20, date29, timeZone40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass11, date19, timeZone40);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str47 = week46.toString();
        long long48 = week46.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week46.next();
        long long50 = week46.getMiddleMillisecond();
        java.util.Date date51 = week46.getStart();
        java.util.TimeZone timeZone52 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass11, date51, timeZone52);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Week 35, 52" + "'", str24, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60506053200001L) + "'", long25 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60505750800001L) + "'", long28 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Week 35, 52" + "'", str33, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60506053200001L) + "'", long34 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Week 35, 52" + "'", str47, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-60506053200001L) + "'", long48 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-60506053200001L) + "'", long50 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNull(regularTimePeriod53);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getFirstMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (short) 0, year5);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week8.getLastMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        long long6 = week2.getLastMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        boolean boolean20 = week2.equals((java.lang.Object) week18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week();
        long long23 = week22.getFirstMillisecond();
        org.jfree.data.time.Year year24 = week22.getYear();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(0, year24);
        org.jfree.data.time.Year year26 = week25.getYear();
        java.util.Date date27 = week25.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        int int38 = week30.getYearValue();
        long long39 = week30.getLastMillisecond();
        long long40 = week30.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week30.next();
        long long42 = week30.getFirstMillisecond();
        java.lang.String str43 = week30.toString();
        boolean boolean44 = week25.equals((java.lang.Object) week30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week25.next();
        int int46 = week2.compareTo((java.lang.Object) regularTimePeriod45);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59100800400001L) + "'", long6 == (-59100800400001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1637449200000L + "'", long23 == 1637449200000L);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertNotNull(year26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Dec 26 23:59:59 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60505750800001L) + "'", long39 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2791L + "'", long40 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60506355600000L) + "'", long42 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Week 35, 52" + "'", str43, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1924) + "'", int46 == (-1924));
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date17);
        java.util.Calendar calendar28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long29 = week27.getMiddleMillisecond(calendar28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getLastMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getYearValue();
        long long7 = week2.getLastMillisecond();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(97, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getWeek();
        boolean boolean13 = week2.equals((java.lang.Object) int12);
        int int14 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        int int5 = week4.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week4.next();
        java.lang.Class<?> wildcardClass7 = regularTimePeriod6.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        java.util.Date date8 = week7.getStart();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week7.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getWeek();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getFirstMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        int int14 = week2.getWeek();
        int int15 = week2.getYearValue();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '4', year5);
        long long9 = week8.getSerialIndex();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week8.getLastMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107165L + "'", long9 == 107165L);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (-1));
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getFirstMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        long long26 = week23.getLastMillisecond();
        java.util.Date date27 = week23.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week23.previous();
        long long29 = week23.getMiddleMillisecond();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        long long37 = week35.getMiddleMillisecond();
        java.lang.String str38 = week35.toString();
        boolean boolean39 = week32.equals((java.lang.Object) week35);
        java.util.Date date40 = week32.getStart();
        int int41 = week23.compareTo((java.lang.Object) date40);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.util.Date date46 = week44.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        java.lang.Class class57 = null;
        java.util.Date date58 = null;
        java.util.TimeZone timeZone59 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class57, date58, timeZone59);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass51, date56, timeZone59);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date46, timeZone59);
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date46, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date40, timeZone63);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date40);
        long long67 = week66.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year68 = week66.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60505750800001L) + "'", long26 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Week 35, 52" + "'", str38, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-59101405200000L) + "'", long67 == (-59101405200000L));
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1), 35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getFirstMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) (byte) 0);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        long long10 = week8.getMiddleMillisecond();
        int int11 = week8.getWeek();
        long long12 = week8.getLastMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = week4.compareTo((java.lang.Object) week8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59100800400001L) + "'", long5 == (-59100800400001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506053200001L) + "'", long10 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        long long9 = week8.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1609023599999L + "'", long9 == 1609023599999L);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 10, year5);
        java.util.Date date9 = week8.getStart();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 28 00:00:00 CET 2021");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Year year7 = week6.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(3, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (short) 100, year7);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week9.getFirstMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(year7);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = regularTimePeriod6.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) -1, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year6);
        java.util.Date date10 = year6.getEnd();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.Year year12 = week11.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '4', year12);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(year12);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(12, (int) (short) 1);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getMiddleMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(12, (int) (short) 0);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year5 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (0) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 12, 0" + "'", str4, "Week 12, 0");
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        int int22 = week17.getYearValue();
        int int24 = week17.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week17.previous();
        int int26 = week17.getYearValue();
        long long27 = week17.getLastMillisecond();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        boolean boolean34 = week17.equals((java.lang.Object) wildcardClass32);
        int int35 = week17.getYearValue();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        int int43 = week38.getYearValue();
        int int45 = week38.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week38.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week38.next();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        java.lang.Class<?> wildcardClass52 = week50.getClass();
        java.lang.Class class53 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass52);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass52);
        boolean boolean55 = week38.equals((java.lang.Object) wildcardClass52);
        long long56 = week38.getSerialIndex();
        java.util.Date date57 = week38.getEnd();
        boolean boolean58 = week17.equals((java.lang.Object) date57);
        long long59 = week17.getMiddleMillisecond();
        int int60 = week17.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week17.previous();
        // The following exception was thrown during execution in test generation
        try {
            int int62 = week2.compareTo((java.lang.Object) week17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-60505750800001L) + "'", long27 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(class53);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2791L + "'", long56 == 2791L);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week2.previous();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str7 = week6.toString();
        long long8 = week6.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week6.next();
        java.util.Date date10 = week6.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week13.previous();
        int int22 = week13.getYearValue();
        long long23 = week13.getLastMillisecond();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        boolean boolean30 = week13.equals((java.lang.Object) wildcardClass28);
        boolean boolean31 = week6.equals((java.lang.Object) wildcardClass28);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        java.util.Date date36 = week34.getEnd();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        int int41 = week39.getYearValue();
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int43 = week39.compareTo((java.lang.Object) timeZone42);
        int int44 = week39.getYearValue();
        long long45 = week39.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass46 = week39.getClass();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date50 = week49.getStart();
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass46, date50, timeZone56);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        java.lang.Class<?> wildcardClass63 = week61.getClass();
        java.lang.Class class64 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass63);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date68 = week67.getStart();
        java.lang.Class class69 = null;
        java.util.Date date70 = null;
        java.util.TimeZone timeZone71 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance(class69, date70, timeZone71);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass63, date68, timeZone71);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date77 = week76.getStart();
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date77);
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass63, date77, timeZone79);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date50, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date36, timeZone79);
        java.util.Locale locale83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date3, timeZone79, locale83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60505750800001L) + "'", long23 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(class64);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod80);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.previous();
        int int31 = week29.getYearValue();
        java.util.Date date32 = week29.getStart();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date32, timeZone33);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date17, timeZone33);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date17);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        java.lang.Class<?> wildcardClass8 = date6.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        int int11 = week2.getYearValue();
        int int12 = week2.getYearValue();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week15.next();
        java.util.Date date19 = week15.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date19);
        long long21 = week20.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week20.next();
        boolean boolean23 = week2.equals((java.lang.Object) regularTimePeriod22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week();
        long long26 = week25.getFirstMillisecond();
        org.jfree.data.time.Year year27 = week25.getYear();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(0, year27);
        java.util.Date date29 = year27.getStart();
        int int30 = week2.compareTo((java.lang.Object) year27);
        int int31 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1637449200000L + "'", long26 == 1637449200000L);
        org.junit.Assert.assertNotNull(year27);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year6);
        java.util.Date date11 = week10.getEnd();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            week10.peg(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 26 23:59:59 CET 2022");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        long long75 = week73.getSerialIndex();
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date79 = week78.getStart();
        java.util.Date date80 = week78.getEnd();
        int int81 = week78.getYearValue();
        java.util.Date date82 = week78.getStart();
        int int83 = week78.getWeek();
        int int84 = week73.compareTo((java.lang.Object) int83);
        java.util.Date date85 = week73.getStart();
        java.util.Calendar calendar86 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long87 = week73.getFirstMillisecond(calendar86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2791L + "'", long75 == 2791L);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 97 + "'", int81 == 97);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getMiddleMillisecond();
        java.lang.String str14 = week2.toString();
        int int15 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.next();
        boolean boolean18 = week2.equals((java.lang.Object) 1.0d);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date22 = week21.getEnd();
        boolean boolean23 = week2.equals((java.lang.Object) date22);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getSerialIndex();
        int int3 = week0.getWeek();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107161L + "'", long2 == 107161L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59100800400001L) + "'", long6 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-59101405200000L) + "'", long7 == (-59101405200000L));
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        int int11 = week2.getYearValue();
        int int12 = week2.getYearValue();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week15.next();
        java.util.Date date19 = week15.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date19);
        long long21 = week20.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week20.next();
        boolean boolean23 = week2.equals((java.lang.Object) regularTimePeriod22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week();
        long long26 = week25.getFirstMillisecond();
        org.jfree.data.time.Year year27 = week25.getYear();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(0, year27);
        java.util.Date date29 = year27.getStart();
        int int30 = week2.compareTo((java.lang.Object) year27);
        java.util.Calendar calendar31 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long32 = week2.getMiddleMillisecond(calendar31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1637449200000L + "'", long26 == 1637449200000L);
        org.junit.Assert.assertNotNull(year27);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        int int13 = week12.getYearValue();
        long long14 = week12.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 5150L + "'", long14 == 5150L);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        int int10 = week5.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week5.next();
        long long12 = week5.getSerialIndex();
        java.lang.String str13 = week5.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 100, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(100, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 0, year7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(6, year7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(36, year7);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getWeek();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getFirstMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        long long12 = week11.getFirstMillisecond();
        java.util.Date date13 = week11.getEnd();
        long long14 = week11.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week11.previous();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week11.getFirstMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(11, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(3, year7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 100, year7);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        int int16 = week14.getYearValue();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int18 = week14.compareTo((java.lang.Object) timeZone17);
        int int19 = week14.getYearValue();
        int int21 = week14.compareTo((java.lang.Object) 9);
        long long22 = week14.getMiddleMillisecond();
        boolean boolean23 = week11.equals((java.lang.Object) week14);
        org.jfree.data.time.Year year24 = week11.getYear();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(35, year24);
        int int26 = week25.getYearValue();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60506053200001L) + "'", long22 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2021 + "'", int26 == 2021);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        long long10 = regularTimePeriod9.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506658000001L) + "'", long10 == (-60506658000001L));
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.util.Date date6 = week5.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week();
        long long8 = week7.getFirstMillisecond();
        long long9 = week7.getSerialIndex();
        int int10 = week7.getYearValue();
        java.util.Date date11 = week7.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date15);
        java.util.Date date17 = week16.getStart();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        long long26 = week20.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass27 = week20.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date31, timeZone37);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date17, timeZone37);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date11, timeZone37);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date6, timeZone37);
        java.util.TimeZone timeZone43 = null;
        java.util.Locale locale44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date6, timeZone43, locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1637449200000L + "'", long8 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107161L + "'", long9 == 107161L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2021 + "'", int10 == 2021);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 27 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506053200001L) + "'", long26 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        long long15 = week9.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass16 = week9.getClass();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date20 = week19.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date20, timeZone26);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date20);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        int int37 = week32.getYearValue();
        int int39 = week32.compareTo((java.lang.Object) 9);
        java.util.Date date40 = week32.getStart();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance(class6, date20, timeZone74);
        java.lang.Class class79 = org.jfree.data.time.RegularTimePeriod.downsize(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506053200001L) + "'", long15 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(class79);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = regularTimePeriod5.getMiddleMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        java.util.Date date10 = week7.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date14, timeZone20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date10, timeZone20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date4, timeZone20);
        java.lang.Class<?> wildcardClass25 = timeZone20.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.lang.Class class16 = null;
        java.util.Date date17 = null;
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date17, timeZone18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date15, timeZone18);
        java.lang.Class<?> wildcardClass21 = timeZone18.getClass();
        boolean boolean22 = week2.equals((java.lang.Object) wildcardClass21);
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize(class24);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize(class24);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(class26);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, (int) (short) -1);
        java.util.Date date3 = week2.getStart();
        java.lang.Class<?> wildcardClass4 = date3.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 16 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date14);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date14);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', 10);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) -1);
        int int3 = week2.getWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 1, year5);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week8.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date31);
        java.util.Calendar calendar75 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long76 = week74.getLastMillisecond(calendar75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        int int15 = week7.getYearValue();
        long long16 = week7.getLastMillisecond();
        int int17 = week7.getWeek();
        java.util.Date date18 = week7.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.util.Date date23 = week21.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.lang.Class class34 = null;
        java.util.Date date35 = null;
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date35, timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date33, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date23, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date18, timeZone36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date4, timeZone36);
        long long42 = week41.getLastMillisecond();
        int int44 = week41.compareTo((java.lang.Object) 1L);
        int int45 = week41.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60505750800001L) + "'", long42 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Date date74 = week73.getStart();
        java.util.Date date75 = week73.getEnd();
        java.util.Calendar calendar76 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long77 = week73.getMiddleMillisecond(calendar76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        java.util.Date date6 = week4.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.next();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week4.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        long long6 = week4.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year8 = week4.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59101405200000L) + "'", long6 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getWeek();
        java.lang.String str7 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 0, (int) (byte) -1);
        long long3 = week2.getSerialIndex();
        java.util.Date date4 = week2.getEnd();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getFirstMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-53L) + "'", long3 == (-53L));
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Dec 28 23:59:59 CET 3");
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 1, year5);
        java.lang.String str9 = week8.toString();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        int int14 = week12.getYearValue();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int16 = week12.compareTo((java.lang.Object) timeZone15);
        int int17 = week12.getYearValue();
        int int19 = week12.compareTo((java.lang.Object) 9);
        int int20 = week12.getYearValue();
        long long21 = week12.getLastMillisecond();
        int int22 = week12.getWeek();
        java.util.Date date23 = week12.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        java.util.Date date28 = week26.getEnd();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        java.lang.Class<?> wildcardClass33 = week31.getClass();
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.lang.Class class39 = null;
        java.util.Date date40 = null;
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance(class39, date40, timeZone41);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date38, timeZone41);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date28, timeZone41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date23, timeZone41);
        java.util.Date date46 = week45.getStart();
        int int47 = week45.getWeek();
        boolean boolean48 = week8.equals((java.lang.Object) int47);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 1, 2021" + "'", str9, "Week 1, 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Date date74 = week73.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year75 = week73.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week9.previous();
        int int18 = week9.getYearValue();
        long long19 = week9.getLastMillisecond();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        java.lang.Class<?> wildcardClass24 = week22.getClass();
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        boolean boolean26 = week9.equals((java.lang.Object) wildcardClass24);
        boolean boolean27 = week2.equals((java.lang.Object) wildcardClass24);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.util.Date date32 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        int int40 = week35.getYearValue();
        long long41 = week35.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass42 = week35.getClass();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date46, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date73 = week72.getStart();
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date73);
        java.util.TimeZone timeZone75 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date73, timeZone75);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date46, timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass24, date32, timeZone75);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date32);
        int int80 = week79.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60505750800001L) + "'", long19 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-60506053200001L) + "'", long41 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        long long4 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        long long6 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61126275600001L) + "'", long4 == (-61126275600001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-61126275600001L) + "'", long6 == (-61126275600001L));
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date8 = week7.getEnd();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date12 = week11.getStart();
        java.util.Date date13 = week11.getEnd();
        int int14 = week11.getYearValue();
        long long15 = week11.getLastMillisecond();
        java.lang.Class<?> wildcardClass16 = week11.getClass();
        java.util.Date date17 = null;
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date21 = week20.getStart();
        int int22 = week20.getYearValue();
        java.util.Date date23 = week20.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        int int38 = week33.getYearValue();
        int int40 = week33.compareTo((java.lang.Object) 9);
        java.util.Date date41 = week33.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date41, timeZone48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.previous();
        int int55 = week53.getYearValue();
        java.util.Date date56 = week53.getStart();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date56, timeZone57);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date41, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date23, timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date17, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date8, timeZone57);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date3, timeZone57);
        long long64 = week63.getSerialIndex();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-59100800400001L) + "'", long15 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 5150L + "'", long64 == 5150L);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getSerialIndex();
        int int3 = week0.getYearValue();
        int int4 = week0.getYearValue();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.lang.String str11 = week7.toString();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week();
        long long16 = week15.getFirstMillisecond();
        org.jfree.data.time.Year year17 = week15.getYear();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(52, year17);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) (byte) -1, year17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(0, year17);
        int int21 = week7.compareTo((java.lang.Object) week20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date25 = week24.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week24.next();
        boolean boolean27 = week7.equals((java.lang.Object) week24);
        boolean boolean28 = week0.equals((java.lang.Object) boolean27);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107161L + "'", long2 == 107161L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2021 + "'", int3 == 2021);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2021 + "'", int4 == 2021);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1637449200000L + "'", long16 == 1637449200000L);
        org.junit.Assert.assertNotNull(year17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1969) + "'", int21 == (-1969));
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(35, year5);
        java.util.Date date10 = year5.getStart();
        java.util.Date date11 = year5.getStart();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year6);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        long long21 = week13.getMiddleMillisecond();
        boolean boolean22 = week10.equals((java.lang.Object) week13);
        org.jfree.data.time.Year year23 = week10.getYear();
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = week10.getMiddleMillisecond(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506053200001L) + "'", long21 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(year23);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        long long6 = week2.getMiddleMillisecond();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week16.next();
        java.util.Date date20 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date25 = week24.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date29 = week28.getStart();
        java.util.Date date30 = week28.getEnd();
        int int31 = week28.getYearValue();
        long long32 = week28.getLastMillisecond();
        java.lang.Class<?> wildcardClass33 = week28.getClass();
        java.util.Date date34 = null;
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date38 = week37.getStart();
        int int39 = week37.getYearValue();
        java.util.Date date40 = week37.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date34, timeZone74);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date25, timeZone74);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date20, timeZone74);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date13, timeZone74);
        int int82 = week81.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-59100800400001L) + "'", long32 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.lang.String str9 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        long long14 = week13.getMiddleMillisecond();
        long long15 = week13.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = week7.compareTo((java.lang.Object) week13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getFirstMillisecond();
        long long8 = week2.getSerialIndex();
        long long9 = week2.getFirstMillisecond();
        long long10 = week2.getFirstMillisecond();
        java.lang.Class<?> wildcardClass11 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506355600000L) + "'", long9 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506355600000L) + "'", long10 == (-60506355600000L));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        int int10 = week5.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week5.next();
        long long12 = week5.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date18, timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date18);
        java.util.Date date23 = week22.getEnd();
        long long24 = week22.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-59101102800001L) + "'", long24 == (-59101102800001L));
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        java.util.Date date5 = week2.getEnd();
        int int7 = week2.compareTo((java.lang.Object) 10L);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.util.Date date9 = regularTimePeriod8.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 27 00:00:00 CET 52");
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 0, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        java.util.Date date20 = week2.getStart();
        java.util.Date date21 = week2.getEnd();
        java.lang.Class class22 = null;
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        int int30 = week25.getYearValue();
        int int32 = week25.compareTo((java.lang.Object) 9);
        java.util.Date date33 = week25.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date33);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.Date date37 = week34.getStart();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        int int45 = week40.getYearValue();
        long long46 = week40.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass47 = week40.getClass();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass47, date51, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        java.lang.Class<?> wildcardClass64 = week62.getClass();
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date69 = week68.getStart();
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass64, date69, timeZone72);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date78);
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass64, date78, timeZone80);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date51, timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date37, timeZone80);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date21, timeZone80);
        long long85 = week84.getSerialIndex();
        java.lang.String str86 = week84.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60506053200001L) + "'", long46 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertNull(regularTimePeriod83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 2791L + "'", long85 == 2791L);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Week 35, 52" + "'", str86, "Week 35, 52");
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 4);
        long long3 = week2.getFirstMillisecond();
        long long4 = week2.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62041942800000L) + "'", long3 == (-62041942800000L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62041338000001L) + "'", long4 == (-62041338000001L));
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getFirstMillisecond();
        java.lang.String str5 = week2.toString();
        java.util.Date date6 = week2.getStart();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getFirstMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506355600000L) + "'", long4 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week3.next();
        java.lang.Class<?> wildcardClass5 = week3.getClass();
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass5);
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass5);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        java.util.Date date18 = week10.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass5, date18, timeZone25);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.previous();
        int int32 = week30.getYearValue();
        java.util.Date date33 = week30.getStart();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date33, timeZone34);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date18, timeZone34);
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date0, timeZone34, locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        java.lang.String str13 = week2.toString();
        java.lang.String str14 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        long long7 = week2.getSerialIndex();
        long long8 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 5150L + "'", long7 == 5150L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 5150L + "'", long8 == 5150L);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        java.util.Date date6 = week4.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        int int17 = week9.getYearValue();
        long long18 = week9.getLastMillisecond();
        long long19 = week9.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week9.next();
        long long21 = week9.getFirstMillisecond();
        java.lang.String str22 = week9.toString();
        boolean boolean23 = week4.equals((java.lang.Object) week9);
        int int24 = week4.getWeek();
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = week4.getFirstMillisecond(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Dec 26 23:59:59 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2791L + "'", long19 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506355600000L) + "'", long21 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        long long3 = week2.getSerialIndex();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str7 = week6.toString();
        long long8 = week6.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week6.next();
        java.util.Date date10 = regularTimePeriod9.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date14, timeZone20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date10, timeZone20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week23.next();
        java.util.Date date27 = week23.getStart();
        boolean boolean28 = week2.equals((java.lang.Object) date27);
        int int29 = week2.getYearValue();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 630L + "'", long3 == 630L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        java.lang.Class<?> wildcardClass8 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        java.lang.Class<?> wildcardClass15 = timeZone12.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(class17);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.util.Date date10 = week2.getEnd();
        int int11 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getFirstMillisecond();
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = week2.getFirstMillisecond(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506355600000L) + "'", long16 == (-60506355600000L));
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.next();
        java.util.Date date24 = week2.getStart();
        long long25 = week2.getFirstMillisecond();
        java.util.Date date26 = week2.getEnd();
        java.util.Calendar calendar27 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long28 = week2.getLastMillisecond(calendar27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60506355600000L) + "'", long25 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        long long9 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.previous();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2791L + "'", long9 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        java.util.Date date13 = week2.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getFirstMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        int int18 = week10.getYearValue();
        long long19 = week10.getLastMillisecond();
        int int20 = week10.getWeek();
        java.util.Date date21 = week10.getEnd();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date25 = week24.getStart();
        java.util.Date date26 = week24.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date36 = week35.getStart();
        java.lang.Class class37 = null;
        java.util.Date date38 = null;
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance(class37, date38, timeZone39);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date36, timeZone39);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date26, timeZone39);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date21, timeZone39);
        java.util.Date date44 = week43.getStart();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.next();
        int int49 = week47.getYearValue();
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int51 = week47.compareTo((java.lang.Object) timeZone50);
        int int52 = week47.getYearValue();
        int int54 = week47.compareTo((java.lang.Object) 9);
        java.util.Date date55 = week47.getStart();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        java.lang.Class<?> wildcardClass60 = week58.getClass();
        java.lang.Class class61 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass60);
        java.lang.Class class62 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass60);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        int int67 = week65.getYearValue();
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int69 = week65.compareTo((java.lang.Object) timeZone68);
        int int70 = week65.getYearValue();
        int int72 = week65.compareTo((java.lang.Object) 9);
        java.util.Date date73 = week65.getStart();
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        int int79 = week77.getYearValue();
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int81 = week77.compareTo((java.lang.Object) timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass60, date73, timeZone80);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = week85.previous();
        int int87 = week85.getYearValue();
        java.util.Date date88 = week85.getStart();
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date88, timeZone89);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date73, timeZone89);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date55, timeZone89);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date44, timeZone89);
        org.jfree.data.time.Week week94 = new org.jfree.data.time.Week(date44);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60505750800001L) + "'", long19 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(class61);
        org.junit.Assert.assertNotNull(class62);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod93);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        boolean boolean6 = week2.equals((java.lang.Object) 11);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week9.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week9.previous();
        boolean boolean17 = week2.equals((java.lang.Object) regularTimePeriod16);
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = week2.getFirstMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week((int) (short) 100, year3);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date30 = week29.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        int int43 = week41.getYearValue();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int45 = week41.compareTo((java.lang.Object) timeZone44);
        int int46 = week41.getYearValue();
        int int48 = week41.compareTo((java.lang.Object) 9);
        java.util.Date date49 = week41.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date49, timeZone56);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.previous();
        int int63 = week61.getYearValue();
        java.util.Date date64 = week61.getStart();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date64, timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date49, timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date30, timeZone65);
        java.lang.Class class69 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class70 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class71 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(class69);
        org.junit.Assert.assertNotNull(class70);
        org.junit.Assert.assertNotNull(class71);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        long long18 = week15.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        int int25 = week15.compareTo((java.lang.Object) wildcardClass23);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        boolean boolean27 = week12.equals((java.lang.Object) wildcardClass23);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.previous();
        int int32 = week30.getYearValue();
        java.util.Date date33 = week30.getStart();
        int int34 = week30.getYearValue();
        long long35 = week30.getSerialIndex();
        boolean boolean36 = week12.equals((java.lang.Object) week30);
        boolean boolean37 = week2.equals((java.lang.Object) boolean36);
        java.util.Date date38 = week2.getStart();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week39.next();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2791L + "'", long35 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str39 = week38.toString();
        long long40 = week38.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week38.next();
        java.util.Date date42 = regularTimePeriod41.getEnd();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date46, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date42, timeZone52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date13, timeZone52);
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        java.util.Locale locale58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date13, timeZone57, locale58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Week 35, 52" + "'", str39, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2791L + "'", long40 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        int int15 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.previous();
        java.lang.String str17 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 1, year5);
        java.lang.String str9 = week8.toString();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.previous();
        int int14 = week12.getYearValue();
        long long15 = week12.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week12.next();
        java.util.Date date17 = regularTimePeriod16.getEnd();
        java.util.Date date18 = regularTimePeriod16.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        int int20 = week8.compareTo((java.lang.Object) date18);
        java.util.Calendar calendar21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = week8.getMiddleMillisecond(calendar21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 1, 2021" + "'", str9, "Week 1, 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        java.util.Date date10 = week7.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date14, timeZone20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date10, timeZone20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date4, timeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year25 = week24.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2022, (int) (byte) 10);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        long long15 = week9.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass16 = week9.getClass();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date20 = week19.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date20, timeZone26);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date20);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date20, timeZone35);
        java.util.Locale locale38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date6, timeZone35, locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Jan 03 23:59:59 CET 33");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506053200001L) + "'", long15 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 100);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1), (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year3 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.previous();
        long long24 = week2.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        java.lang.String str4 = week2.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 97, -1" + "'", str4, "Week 97, -1");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getMiddleMillisecond();
        java.lang.String str14 = week2.toString();
        int int15 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.next();
        java.util.Date date17 = regularTimePeriod16.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        long long19 = week18.getSerialIndex();
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = week18.getLastMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2792L + "'", long19 == 2792L);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        int int5 = week4.getWeek();
        java.lang.Class<?> wildcardClass6 = week4.getClass();
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        java.util.Date date8 = null;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.previous();
        int int13 = week11.getYearValue();
        java.util.Date date14 = week11.getStart();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date14, timeZone15);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = org.jfree.data.time.RegularTimePeriod.createInstance(class7, date8, timeZone15);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize(class7);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(class18);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(53, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '4', year8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(52, year8);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(2021, year8);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(32, year8);
        java.lang.Class<?> wildcardClass15 = year8.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        java.util.Date date16 = week8.getStart();
        long long17 = week8.getLastMillisecond();
        boolean boolean18 = week4.equals((java.lang.Object) long17);
        org.jfree.data.time.Year year19 = week4.getYear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60505750800001L) + "'", long17 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(year19);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        long long44 = week2.getMiddleMillisecond();
        long long45 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60506053200001L) + "'", long44 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        long long18 = week15.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        int int25 = week15.compareTo((java.lang.Object) wildcardClass23);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        boolean boolean27 = week12.equals((java.lang.Object) wildcardClass23);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.previous();
        int int32 = week30.getYearValue();
        java.util.Date date33 = week30.getStart();
        int int34 = week30.getYearValue();
        long long35 = week30.getSerialIndex();
        boolean boolean36 = week12.equals((java.lang.Object) week30);
        boolean boolean37 = week2.equals((java.lang.Object) boolean36);
        java.util.Date date38 = week2.getStart();
        java.util.Calendar calendar39 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long40 = week2.getLastMillisecond(calendar39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2791L + "'", long35 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        long long75 = week73.getSerialIndex();
        long long76 = week73.getLastMillisecond();
        java.util.Calendar calendar77 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long78 = week73.getFirstMillisecond(calendar77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2791L + "'", long75 == 2791L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-60505750800001L) + "'", long76 == (-60505750800001L));
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(32, 6);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        long long75 = week73.getSerialIndex();
        long long76 = week73.getLastMillisecond();
        long long77 = week73.getLastMillisecond();
        int int78 = week73.getWeek();
        java.util.Date date79 = week73.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2791L + "'", long75 == 2791L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-60505750800001L) + "'", long76 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-60505750800001L) + "'", long77 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        long long14 = week2.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week();
        long long18 = week17.getFirstMillisecond();
        org.jfree.data.time.Year year19 = week17.getYear();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(0, year19);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(53, year19);
        java.util.Date date22 = week21.getStart();
        int int23 = week2.compareTo((java.lang.Object) week21);
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = week2.getMiddleMillisecond(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1637449200000L + "'", long18 == 1637449200000L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 26 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1969) + "'", int23 == (-1969));
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        long long7 = week2.getSerialIndex();
        java.util.Date date8 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        java.lang.String str19 = week2.toString();
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 10, 6);
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str7 = week6.toString();
        long long8 = week6.getMiddleMillisecond();
        long long9 = week6.getFirstMillisecond();
        int int10 = week6.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week6.previous();
        long long12 = week6.getMiddleMillisecond();
        boolean boolean13 = week2.equals((java.lang.Object) long12);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 28 00:00:00 CET 6");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506355600000L) + "'", long9 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, 2);
        java.lang.String str3 = week2.toString();
        int int4 = week2.getYearValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year5 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (2) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 9, 2" + "'", str3, "Week 9, 2");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        long long14 = week2.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week();
        long long18 = week17.getFirstMillisecond();
        org.jfree.data.time.Year year19 = week17.getYear();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(0, year19);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(53, year19);
        java.util.Date date22 = week21.getStart();
        int int23 = week2.compareTo((java.lang.Object) week21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week21.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1637449200000L + "'", long18 == 1637449200000L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 26 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1969) + "'", int23 == (-1969));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        java.util.Date date32 = week31.getStart();
        long long33 = week31.getFirstMillisecond();
        long long34 = week31.getSerialIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-59101405200000L) + "'", long33 == (-59101405200000L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5150L + "'", long34 == 5150L);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        java.util.Date date8 = year6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '4', year6);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) -1, year6);
        long long12 = week11.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1608418799999L + "'", long12 == 1608418799999L);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date9, timeZone10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.lang.Class<?> wildcardClass10 = regularTimePeriod9.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week();
        long long14 = week13.getFirstMillisecond();
        org.jfree.data.time.Year year15 = week13.getYear();
        int int16 = week13.getWeek();
        int int17 = week13.getWeek();
        int int18 = week2.compareTo((java.lang.Object) week13);
        java.util.Date date19 = week13.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1637449200000L + "'", long14 == 1637449200000L);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1969) + "'", int18 == (-1969));
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Nov 21 00:00:00 CET 2021");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        long long14 = week2.getLastMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year15 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        java.lang.Class<?> wildcardClass15 = date14.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(11, 4);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.util.Date date4 = week2.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Mar 09 00:00:00 CET 4");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        int int25 = week16.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week16.next();
        java.lang.Class<?> wildcardClass27 = regularTimePeriod26.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        java.util.Date date45 = week37.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date45, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str58 = week57.toString();
        long long59 = week57.getMiddleMillisecond();
        long long60 = week57.getLastMillisecond();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        int int67 = week57.compareTo((java.lang.Object) wildcardClass65);
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        java.lang.Class<?> wildcardClass73 = week71.getClass();
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.lang.Class class79 = null;
        java.util.Date date80 = null;
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date80, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass73, date78, timeZone81);
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date78, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date45, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date13, timeZone84);
        java.util.Calendar calendar88 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long89 = week87.getFirstMillisecond(calendar88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2, 7);
        long long3 = week2.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 373L + "'", long3 == 373L);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.lang.String str9 = week2.toString();
        java.lang.String str10 = week2.toString();
        java.util.Date date11 = week2.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.previous();
        int int16 = week14.getYearValue();
        long long17 = week14.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week14.next();
        java.util.Date date19 = regularTimePeriod18.getEnd();
        java.util.Date date20 = regularTimePeriod18.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        long long26 = week23.getLastMillisecond();
        java.util.Date date27 = week23.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str31 = week30.toString();
        long long32 = week30.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week30.next();
        java.util.Date date34 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date34);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date39 = week38.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date43 = week42.getStart();
        java.util.Date date44 = week42.getEnd();
        int int45 = week42.getYearValue();
        long long46 = week42.getLastMillisecond();
        java.lang.Class<?> wildcardClass47 = week42.getClass();
        java.util.Date date48 = null;
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date52 = week51.getStart();
        int int53 = week51.getYearValue();
        java.util.Date date54 = week51.getEnd();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        java.lang.Class class61 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.next();
        int int66 = week64.getYearValue();
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int68 = week64.compareTo((java.lang.Object) timeZone67);
        int int69 = week64.getYearValue();
        int int71 = week64.compareTo((java.lang.Object) 9);
        java.util.Date date72 = week64.getStart();
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date72);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week76.next();
        int int78 = week76.getYearValue();
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int80 = week76.compareTo((java.lang.Object) timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date72, timeZone79);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = week84.previous();
        int int86 = week84.getYearValue();
        java.util.Date date87 = week84.getStart();
        java.util.TimeZone timeZone88 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(date87, timeZone88);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date72, timeZone88);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date54, timeZone88);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod92 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass47, date48, timeZone88);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date39, timeZone88);
        org.jfree.data.time.Week week94 = new org.jfree.data.time.Week(date34, timeZone88);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date27, timeZone88);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date20, timeZone88);
        org.jfree.data.time.Week week97 = new org.jfree.data.time.Week(date11, timeZone88);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2791L + "'", long17 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60505750800001L) + "'", long26 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Week 35, 52" + "'", str31, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60506053200001L) + "'", long32 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-59100800400001L) + "'", long46 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(class61);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 52 + "'", int86 == 52);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone88);
// flaky:         org.junit.Assert.assertEquals(timeZone88.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod92);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Nov 01 00:00:00 CET 11");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(11, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(3, year5);
        java.lang.Class<?> wildcardClass9 = week8.getClass();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        long long21 = week20.getFirstMillisecond();
        long long22 = week20.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-59101405200000L) + "'", long21 == (-59101405200000L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-59101102800001L) + "'", long22 == (-59101102800001L));
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        java.util.Date date32 = week31.getStart();
        long long33 = week31.getFirstMillisecond();
        java.lang.Class<?> wildcardClass34 = week31.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-59101405200000L) + "'", long33 == (-59101405200000L));
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        long long14 = week2.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week();
        long long18 = week17.getFirstMillisecond();
        org.jfree.data.time.Year year19 = week17.getYear();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(0, year19);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(53, year19);
        java.util.Date date22 = week21.getStart();
        int int23 = week2.compareTo((java.lang.Object) week21);
        java.lang.Class<?> wildcardClass24 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1637449200000L + "'", long18 == 1637449200000L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 26 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1969) + "'", int23 == (-1969));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.previous();
        java.util.Date date20 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week2.next();
        java.util.Calendar calendar22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = week2.getFirstMillisecond(calendar22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        java.util.Date date7 = week2.getStart();
        long long8 = week2.getLastMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        long long16 = week2.getSerialIndex();
        java.util.Date date17 = week2.getEnd();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date17);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        int int8 = week2.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        int int8 = week2.getWeek();
        java.util.Date date9 = week2.getStart();
        java.util.Date date10 = week2.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str14 = week13.toString();
        long long15 = week13.getMiddleMillisecond();
        long long16 = week13.getLastMillisecond();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        java.lang.Class<?> wildcardClass21 = week19.getClass();
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        int int23 = week13.compareTo((java.lang.Object) wildcardClass21);
        long long24 = week13.getMiddleMillisecond();
        java.util.Date date25 = week13.getEnd();
        int int26 = week13.getWeek();
        long long27 = week13.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week13.next();
        long long29 = week13.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week13.next();
        java.util.Date date31 = week13.getStart();
        java.util.Date date32 = week13.getEnd();
        java.lang.Class class33 = null;
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        java.util.Date date44 = week36.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.Date date48 = week45.getStart();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        int int53 = week51.getYearValue();
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int55 = week51.compareTo((java.lang.Object) timeZone54);
        int int56 = week51.getYearValue();
        long long57 = week51.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass58 = week51.getClass();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date62 = week61.getStart();
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        int int67 = week65.getYearValue();
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int69 = week65.compareTo((java.lang.Object) timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date62, timeZone68);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.next();
        java.lang.Class<?> wildcardClass75 = week73.getClass();
        java.lang.Class class76 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass75);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date80 = week79.getStart();
        java.lang.Class class81 = null;
        java.util.Date date82 = null;
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class81, date82, timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass75, date80, timeZone83);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date89 = week88.getStart();
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date89);
        java.util.TimeZone timeZone91 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod92 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass75, date89, timeZone91);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date62, timeZone91);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance(class33, date48, timeZone91);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date32, timeZone91);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date10, timeZone91);
        java.util.Calendar calendar97 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long98 = week96.getMiddleMillisecond(calendar97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506053200001L) + "'", long15 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60506053200001L) + "'", long24 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-60505750800001L) + "'", long27 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506355600000L) + "'", long29 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-60506053200001L) + "'", long57 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(class76);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone91);
// flaky:         org.junit.Assert.assertEquals(timeZone91.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod92);
        org.junit.Assert.assertNull(regularTimePeriod94);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        long long26 = week23.getLastMillisecond();
        java.util.Date date27 = week23.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week23.previous();
        long long29 = week23.getMiddleMillisecond();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        long long37 = week35.getMiddleMillisecond();
        java.lang.String str38 = week35.toString();
        boolean boolean39 = week32.equals((java.lang.Object) week35);
        java.util.Date date40 = week32.getStart();
        int int41 = week23.compareTo((java.lang.Object) date40);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.util.Date date46 = week44.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        java.lang.Class class57 = null;
        java.util.Date date58 = null;
        java.util.TimeZone timeZone59 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class57, date58, timeZone59);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass51, date56, timeZone59);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date46, timeZone59);
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date46, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date40, timeZone63);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date40);
        int int67 = week66.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60505750800001L) + "'", long26 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Week 35, 52" + "'", str38, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(4, (int) (short) 1);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getMiddleMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        long long44 = week2.getMiddleMillisecond();
        java.util.Calendar calendar45 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long46 = week2.getLastMillisecond(calendar45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60506053200001L) + "'", long44 == (-60506053200001L));
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(5, (int) (byte) 10);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.previous();
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = week15.getLastMillisecond(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(7, 1);
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date7 = week6.getStart();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date7, timeZone13);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date7);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        long long25 = week19.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass26 = week19.getClass();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date30, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date30);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date30, timeZone45);
        int int48 = week16.compareTo((java.lang.Object) timeZone45);
        java.util.Locale locale49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date3, timeZone45, locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 06 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60506053200001L) + "'", long25 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        java.lang.String str75 = week73.toString();
        long long76 = week73.getFirstMillisecond();
        java.util.Calendar calendar77 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long78 = week73.getFirstMillisecond(calendar77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Week 35, 52" + "'", str75, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-60506355600000L) + "'", long76 == (-60506355600000L));
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(5, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(10, year4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.previous();
        int int11 = week9.getWeek();
        long long12 = week9.getSerialIndex();
        int int13 = week9.getWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = week6.compareTo((java.lang.Object) week9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (32) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1748L + "'", long12 == 1748L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str39 = week38.toString();
        long long40 = week38.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week38.next();
        java.util.Date date42 = regularTimePeriod41.getEnd();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date46, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date42, timeZone52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date13, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.String str58 = week56.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Week 35, 52" + "'", str39, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2791L + "'", long40 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.lang.String str11 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week7.previous();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        boolean boolean14 = week4.equals((java.lang.Object) wildcardClass13);
        long long15 = week4.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-59101102800001L) + "'", long15 == (-59101102800001L));
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        int int6 = week2.getYearValue();
        long long7 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.util.Date date7 = regularTimePeriod6.getEnd();
        java.util.Date date8 = regularTimePeriod6.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week11.next();
        java.util.Date date15 = week11.getEnd();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        int int20 = week18.getYearValue();
        java.util.TimeZone timeZone21 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int22 = week18.compareTo((java.lang.Object) timeZone21);
        int int23 = week18.getYearValue();
        int int25 = week18.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week18.previous();
        int int27 = week18.getYearValue();
        long long28 = week18.getLastMillisecond();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        java.lang.Class<?> wildcardClass33 = week31.getClass();
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        boolean boolean35 = week18.equals((java.lang.Object) wildcardClass33);
        boolean boolean36 = week11.equals((java.lang.Object) wildcardClass33);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date40 = week39.getStart();
        java.util.Date date41 = week39.getEnd();
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.next();
        int int46 = week44.getYearValue();
        java.util.TimeZone timeZone47 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int48 = week44.compareTo((java.lang.Object) timeZone47);
        int int49 = week44.getYearValue();
        long long50 = week44.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass51 = week44.getClass();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date55 = week54.getStart();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        int int60 = week58.getYearValue();
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int62 = week58.compareTo((java.lang.Object) timeZone61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass51, date55, timeZone61);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.next();
        java.lang.Class<?> wildcardClass68 = week66.getClass();
        java.lang.Class class69 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass68);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date73 = week72.getStart();
        java.lang.Class class74 = null;
        java.util.Date date75 = null;
        java.util.TimeZone timeZone76 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance(class74, date75, timeZone76);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass68, date73, timeZone76);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date82 = week81.getStart();
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date82);
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass68, date82, timeZone84);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date55, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date41, timeZone84);
        java.util.Locale locale88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(date8, timeZone84, locale88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60505750800001L) + "'", long28 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-60506053200001L) + "'", long50 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(class69);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize(class21);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(8, (int) (short) -1);
        java.util.Date date27 = week26.getStart();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.previous();
        int int32 = week30.getYearValue();
        java.util.Date date33 = week30.getStart();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date33, timeZone34);
        java.lang.Class<?> wildcardClass36 = timeZone34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str41 = week40.toString();
        long long42 = week40.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week40.next();
        java.util.Date date44 = regularTimePeriod43.getEnd();
        java.util.Date date45 = regularTimePeriod43.getStart();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str49 = week48.toString();
        long long50 = week48.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week48.next();
        java.util.Date date52 = week48.getEnd();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date56);
        java.util.Date date58 = week57.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        int int63 = week61.getYearValue();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int65 = week61.compareTo((java.lang.Object) timeZone64);
        int int66 = week61.getYearValue();
        long long67 = week61.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass68 = week61.getClass();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date72 = week71.getStart();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        int int77 = week75.getYearValue();
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int79 = week75.compareTo((java.lang.Object) timeZone78);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass68, date72, timeZone78);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date58, timeZone78);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date52, timeZone78);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance(class37, date45, timeZone78);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class23, date27, timeZone78);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 16 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Week 35, 52" + "'", str41, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2791L + "'", long42 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Week 35, 52" + "'", str49, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-60506053200001L) + "'", long50 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-60506053200001L) + "'", long67 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod80);
        org.junit.Assert.assertNull(regularTimePeriod83);
        org.junit.Assert.assertNull(regularTimePeriod84);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date9, timeZone10);
        java.lang.Object obj12 = null;
        int int13 = week11.compareTo(obj12);
        int int14 = week11.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        long long8 = regularTimePeriod7.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 9, 97" + "'", str6, "Week 9, 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-59100498000001L) + "'", long8 == (-59100498000001L));
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week14.getLastMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.Date date14 = week11.getStart();
        java.lang.Class<?> wildcardClass15 = week11.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 97, -1");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date9, timeZone10);
        java.lang.Object obj12 = null;
        int int13 = week11.compareTo(obj12);
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week11.getFirstMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        boolean boolean6 = week2.equals((java.lang.Object) 11);
        java.util.Date date7 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 1, year5);
        java.lang.String str9 = week8.toString();
        int int10 = week8.getWeek();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 1, 2021" + "'", str9, "Week 1, 2021");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week19.next();
        java.util.Date date23 = week19.getStart();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        int int28 = week26.getYearValue();
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int30 = week26.compareTo((java.lang.Object) timeZone29);
        int int31 = week26.getYearValue();
        int int33 = week26.compareTo((java.lang.Object) 9);
        java.util.Date date34 = week26.getStart();
        java.lang.Class<?> wildcardClass35 = week26.getClass();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date39 = week38.getStart();
        java.util.Date date40 = week38.getEnd();
        int int41 = week38.getYearValue();
        java.util.Date date42 = week38.getEnd();
        java.util.Date date43 = week38.getStart();
        java.lang.Class class44 = null;
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str48 = week47.toString();
        long long49 = week47.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week47.next();
        java.util.Date date51 = week47.getEnd();
        long long52 = week47.getLastMillisecond();
        java.util.Date date53 = week47.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str57 = week56.toString();
        long long58 = week56.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week56.next();
        java.util.Date date60 = week56.getEnd();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        java.util.Date date63 = week61.getEnd();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date63, timeZone64);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance(class44, date53, timeZone64);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass35, date43, timeZone64);
        java.util.Locale locale68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date23, timeZone64, locale68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Week 35, 52" + "'", str48, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60506053200001L) + "'", long49 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60505750800001L) + "'", long52 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Week 35, 52" + "'", str57, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-60506053200001L) + "'", long58 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod66);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1), 100);
        long long3 = week2.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-59012499600001L) + "'", long3 == (-59012499600001L));
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 100, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (short) 10, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(1, year7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) ' ', year7);
        long long13 = year7.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass14 = year7.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1625223599999L + "'", long13 == 1625223599999L);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(7, (int) (short) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getSerialIndex();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 537L + "'", long4 == 537L);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.previous();
        int int17 = week15.getYearValue();
        java.util.Date date18 = week15.getStart();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date18, timeZone19);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        int int43 = week41.getYearValue();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int45 = week41.compareTo((java.lang.Object) timeZone44);
        int int46 = week41.getYearValue();
        int int48 = week41.compareTo((java.lang.Object) 9);
        java.util.Date date49 = week41.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date49, timeZone56);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.previous();
        int int63 = week61.getYearValue();
        java.util.Date date64 = week61.getStart();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date64, timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date49, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date31, timeZone65);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date18, timeZone65);
        java.util.Locale locale70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date3, timeZone65, locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', 5);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        int int15 = week7.getYearValue();
        long long16 = week7.getLastMillisecond();
        int int17 = week7.getWeek();
        java.util.Date date18 = week7.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.util.Date date23 = week21.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.lang.Class class34 = null;
        java.util.Date date35 = null;
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date35, timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date33, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date23, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date18, timeZone36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date4, timeZone36);
        java.lang.String str42 = week41.toString();
        java.util.Date date43 = week41.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Week 35, 52" + "'", str42, "Week 35, 52");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.previous();
        java.util.Date date20 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week2.next();
        long long22 = week2.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        long long4 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int6 = week2.getWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year7 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (32) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61126275600001L) + "'", long4 == (-61126275600001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        long long7 = week2.getSerialIndex();
        long long8 = week2.getFirstMillisecond();
        int int9 = week2.getWeek();
        long long10 = week2.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506355600000L) + "'", long10 == (-60506355600000L));
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getMiddleMillisecond();
        java.util.Date date9 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        long long3 = week2.getSerialIndex();
        java.util.Date date4 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        long long10 = week7.getLastMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        int int17 = week7.compareTo((java.lang.Object) wildcardClass15);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize(class18);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week();
        long long22 = week21.getFirstMillisecond();
        org.jfree.data.time.Year year23 = week21.getYear();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(0, year23);
        java.util.Date date25 = week24.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date29 = week28.getStart();
        java.util.Date date30 = week28.getEnd();
        int int31 = week28.getYearValue();
        long long32 = week28.getLastMillisecond();
        java.lang.Class<?> wildcardClass33 = week28.getClass();
        java.util.Date date34 = null;
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date38 = week37.getStart();
        int int39 = week37.getYearValue();
        java.util.Date date40 = week37.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date34, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance(class19, date25, timeZone74);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date4, timeZone74);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date4);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = week84.next();
        int int86 = week84.getYearValue();
        java.util.TimeZone timeZone87 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int88 = week84.compareTo((java.lang.Object) timeZone87);
        int int89 = week84.getYearValue();
        int int91 = week84.compareTo((java.lang.Object) 9);
        int int92 = week84.getYearValue();
        long long93 = week84.getLastMillisecond();
        long long94 = week84.getMiddleMillisecond();
        boolean boolean95 = week81.equals((java.lang.Object) week84);
        java.util.Calendar calendar96 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long97 = week84.getMiddleMillisecond(calendar96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1748L + "'", long3 == 1748L);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1637449200000L + "'", long22 == 1637449200000L);
        org.junit.Assert.assertNotNull(year23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-59100800400001L) + "'", long32 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 52 + "'", int86 == 52);
        org.junit.Assert.assertNotNull(timeZone87);
// flaky:         org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 52 + "'", int92 == 52);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-60505750800001L) + "'", long93 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-60506053200001L) + "'", long94 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59100800400001L) + "'", long5 == (-59100800400001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        int int5 = week4.getWeek();
        java.lang.Class<?> wildcardClass6 = week4.getClass();
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(class9);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date9 = year5.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        int int27 = week20.compareTo((java.lang.Object) 9);
        java.util.Date date28 = week20.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date28, timeZone35);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date41 = week40.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        java.lang.Class<?> wildcardClass47 = week45.getClass();
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        java.lang.Class class49 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.next();
        int int54 = week52.getYearValue();
        java.util.TimeZone timeZone55 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int56 = week52.compareTo((java.lang.Object) timeZone55);
        int int57 = week52.getYearValue();
        int int59 = week52.compareTo((java.lang.Object) 9);
        java.util.Date date60 = week52.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date60);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.next();
        int int66 = week64.getYearValue();
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int68 = week64.compareTo((java.lang.Object) timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass47, date60, timeZone67);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.previous();
        int int74 = week72.getYearValue();
        java.util.Date date75 = week72.getStart();
        java.util.TimeZone timeZone76 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date75, timeZone76);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date60, timeZone76);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date41, timeZone76);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date9, timeZone76);
        java.util.Date date81 = week80.getEnd();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(class49);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sat Jan 01 23:59:59 CET 2022");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 100);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.previous();
        int int7 = week5.getYearValue();
        java.util.Date date8 = week5.getEnd();
        long long9 = week5.getMiddleMillisecond();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        int int14 = week12.getYearValue();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int16 = week12.compareTo((java.lang.Object) timeZone15);
        int int17 = week12.getYearValue();
        int int19 = week12.compareTo((java.lang.Object) 9);
        java.util.Date date20 = week12.getStart();
        boolean boolean21 = week5.equals((java.lang.Object) date20);
        java.util.Date date22 = week5.getEnd();
        boolean boolean23 = week2.equals((java.lang.Object) week5);
        long long24 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5335L + "'", long24 == 5335L);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week16.next();
        java.util.Date date20 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date25 = week24.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date29 = week28.getStart();
        java.util.Date date30 = week28.getEnd();
        int int31 = week28.getYearValue();
        long long32 = week28.getLastMillisecond();
        java.lang.Class<?> wildcardClass33 = week28.getClass();
        java.util.Date date34 = null;
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date38 = week37.getStart();
        int int39 = week37.getYearValue();
        java.util.Date date40 = week37.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date34, timeZone74);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date25, timeZone74);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date20, timeZone74);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date13, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = week81.previous();
        java.util.Calendar calendar83 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long84 = week81.getLastMillisecond(calendar83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-59100800400001L) + "'", long32 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
    }
}

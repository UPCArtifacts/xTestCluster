import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        int int0 = org.jfree.data.time.MonthConstants.FEBRUARY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.lang.Class class0 = null;
        java.util.Date date1 = null;
        java.util.TimeZone timeZone2 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date1, timeZone2);
        org.junit.Assert.assertNull(regularTimePeriod3);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        int int0 = org.jfree.data.time.MonthConstants.MAY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 5 + "'", int0 == 5);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        int int0 = org.jfree.data.time.MonthConstants.JUNE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 6 + "'", int0 == 6);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        int int0 = org.jfree.data.time.MonthConstants.APRIL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        int int0 = org.jfree.data.time.MonthConstants.SEPTEMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 9 + "'", int0 == 9);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.util.Date date0 = null;
        java.util.TimeZone timeZone1 = null;
        java.util.Locale locale2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week3 = new org.jfree.data.time.Week(date0, timeZone1, locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        int int0 = org.jfree.data.time.MonthConstants.JANUARY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Could not find separator.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week3.next();
        int int5 = week3.getYearValue();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int7 = week3.compareTo((java.lang.Object) timeZone6);
        java.util.Locale locale8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(date0, timeZone6, locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        java.util.Date date0 = null;
        java.util.TimeZone timeZone1 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        java.util.Locale locale2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week3 = new org.jfree.data.time.Week(date0, timeZone1, locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        int int0 = org.jfree.data.time.MonthConstants.DECEMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 12 + "'", int0 == 12);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.util.Date date0 = null;
        java.util.TimeZone timeZone1 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(date0, timeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int8 = week2.compareTo((java.lang.Object) week7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        int int0 = org.jfree.data.time.Week.FIRST_WEEK_IN_YEAR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date3, timeZone9, locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getMiddleMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getLastMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        int int0 = org.jfree.data.time.MonthConstants.OCTOBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 10 + "'", int0 == 10);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        int int0 = org.jfree.data.time.Week.LAST_WEEK_IN_YEAR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 53 + "'", int0 == 53);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 10, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getFirstMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        int int0 = org.jfree.data.time.MonthConstants.AUGUST;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 8 + "'", int0 == 8);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        int int0 = org.jfree.data.time.MonthConstants.MARCH;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 3 + "'", int0 == 3);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        int int0 = org.jfree.data.time.MonthConstants.NOVEMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 11 + "'", int0 == 11);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        int int0 = org.jfree.data.time.MonthConstants.JULY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 7 + "'", int0 == 7);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getFirstMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week2.getFirstMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            week11.peg(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        int int11 = week6.getYearValue();
        long long12 = week6.getMiddleMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = week2.compareTo((java.lang.Object) week6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week2.getFirstMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date9, timeZone17, locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week11.getMiddleMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("hi!");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Could not find separator.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year5 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getFirstMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1), year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        java.util.Date date15 = week7.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date15);
        long long17 = week16.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = week2.compareTo((java.lang.Object) week16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506355600000L) + "'", long17 == (-60506355600000L));
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(7, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 100, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 35, 52");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year5 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 10, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getLastMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        java.lang.String str11 = week2.toString();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week11.getFirstMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        java.util.Calendar calendar2 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long3 = week0.getMiddleMillisecond(calendar2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getFirstMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year6 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getLastMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getMiddleMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.previous();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = week2.compareTo((java.lang.Object) regularTimePeriod9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (32) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.lang.String str5 = week2.toString();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        int int16 = week14.getYearValue();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int18 = week14.compareTo((java.lang.Object) timeZone17);
        int int19 = week14.getYearValue();
        int int21 = week14.compareTo((java.lang.Object) 9);
        int int22 = week14.getYearValue();
        long long23 = week14.getLastMillisecond();
        int int24 = week14.getYearValue();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = week2.compareTo((java.lang.Object) week14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60505750800001L) + "'", long23 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date6, timeZone12, locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year4 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getFirstMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        long long3 = week2.getSerialIndex();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1748L + "'", long3 == 1748L);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 1, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getLastMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        long long14 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        java.lang.String str11 = week2.toString();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date15 = week14.getStart();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = week2.compareTo((java.lang.Object) week14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) 'a', year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year4 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        java.util.Date date36 = week34.getEnd();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        java.lang.Class<?> wildcardClass41 = week39.getClass();
        java.lang.Class class42 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        java.lang.Class class47 = null;
        java.util.Date date48 = null;
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance(class47, date48, timeZone49);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass41, date46, timeZone49);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date36, timeZone49);
        java.util.Locale locale53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date23, timeZone49, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year4 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week15.previous();
        int int24 = week15.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week15.next();
        java.lang.Class<?> wildcardClass26 = regularTimePeriod25.getClass();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        java.util.Date date44 = week36.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date44, timeZone51);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str57 = week56.toString();
        long long58 = week56.getMiddleMillisecond();
        long long59 = week56.getLastMillisecond();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        java.lang.Class<?> wildcardClass64 = week62.getClass();
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass64);
        int int66 = week56.compareTo((java.lang.Object) wildcardClass64);
        java.lang.Class class67 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass64);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.next();
        java.lang.Class<?> wildcardClass72 = week70.getClass();
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass72);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date77 = week76.getStart();
        java.lang.Class class78 = null;
        java.util.Date date79 = null;
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = org.jfree.data.time.RegularTimePeriod.createInstance(class78, date79, timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass72, date77, timeZone80);
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class67, date77, timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date44, timeZone83);
        java.util.Locale locale86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date12, timeZone83, locale86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Week 35, 52" + "'", str57, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-60506053200001L) + "'", long58 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60505750800001L) + "'", long59 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(class67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str4 = week3.toString();
        long long5 = week3.getMiddleMillisecond();
        long long6 = week3.getLastMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        java.lang.Class<?> wildcardClass11 = week9.getClass();
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass11);
        int int13 = week3.compareTo((java.lang.Object) wildcardClass11);
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass11);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        java.lang.Class class25 = null;
        java.util.Date date26 = null;
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance(class25, date26, timeZone27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date24, timeZone27);
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = org.jfree.data.time.RegularTimePeriod.createInstance(class14, date24, timeZone30);
        java.util.Locale locale32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(date0, timeZone30, locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 35, 52" + "'", str4, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506053200001L) + "'", long5 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod31);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getFirstMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 52, 32");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getMiddleMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str6 = week5.toString();
        long long7 = week5.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week5.next();
        boolean boolean9 = week2.equals((java.lang.Object) regularTimePeriod8);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = regularTimePeriod8.getMiddleMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week4.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getSerialIndex();
        int int15 = week2.compareTo((java.lang.Object) 0.0d);
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getFirstMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year15 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year13 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week15.previous();
        int int24 = week15.getYearValue();
        java.lang.String str25 = week15.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = week2.compareTo((java.lang.Object) week15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Week 35, 52" + "'", str25, "Week 35, 52");
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        long long10 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week13.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week13.next();
        java.util.Date date23 = week13.getStart();
        java.util.Date date24 = week13.getStart();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = week2.compareTo((java.lang.Object) week13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506053200001L) + "'", long10 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year12 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        long long5 = week2.getFirstMillisecond();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getFirstMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59101405200000L) + "'", long5 == (-59101405200000L));
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 9, 97");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getSerialIndex();
        int int15 = week2.compareTo((java.lang.Object) 0.0d);
        java.lang.String str16 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, 2);
        java.lang.String str3 = week2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year4 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (2) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 9, 2" + "'", str3, "Week 9, 2");
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        long long3 = week2.getSerialIndex();
        java.util.Date date4 = week2.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year5 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (32) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1748L + "'", long3 == 1748L);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Dec 21 00:00:00 CET 32");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        long long6 = week4.getFirstMillisecond();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week4.getFirstMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59101405200000L) + "'", long6 == (-59101405200000L));
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        int int25 = week16.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week16.next();
        java.lang.Class<?> wildcardClass27 = regularTimePeriod26.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        java.util.Date date45 = week37.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date45, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str58 = week57.toString();
        long long59 = week57.getMiddleMillisecond();
        long long60 = week57.getLastMillisecond();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        int int67 = week57.compareTo((java.lang.Object) wildcardClass65);
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        java.lang.Class<?> wildcardClass73 = week71.getClass();
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.lang.Class class79 = null;
        java.util.Date date80 = null;
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date80, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass73, date78, timeZone81);
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date78, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date45, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date13, timeZone84);
        java.lang.Class class88 = null;
        java.util.Date date89 = null;
        java.util.TimeZone timeZone90 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod91 = org.jfree.data.time.RegularTimePeriod.createInstance(class88, date89, timeZone90);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date13, timeZone90);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(timeZone90);
// flaky:         org.junit.Assert.assertEquals(timeZone90.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod91);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, (int) (short) -1);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getLastMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getMiddleMillisecond();
        long long14 = week2.getLastMillisecond();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week9.previous();
        int int18 = week9.getYearValue();
        long long19 = week9.getLastMillisecond();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        java.lang.Class<?> wildcardClass24 = week22.getClass();
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        boolean boolean26 = week9.equals((java.lang.Object) wildcardClass24);
        boolean boolean27 = week2.equals((java.lang.Object) wildcardClass24);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year28 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60505750800001L) + "'", long19 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.TimeZone timeZone14 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int15 = week11.compareTo((java.lang.Object) timeZone14);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date8, timeZone14);
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date8, timeZone17);
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date3, timeZone17, locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            week15.peg(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = new org.jfree.data.time.Week(date0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getYearValue();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        long long7 = regularTimePeriod6.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505448400001L) + "'", long7 == (-60505448400001L));
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.Class<?> wildcardClass6 = regularTimePeriod5.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        java.lang.String str13 = week2.toString();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        long long7 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-59101405200000L) + "'", long7 == (-59101405200000L));
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        java.util.TimeZone timeZone5 = null;
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date4, timeZone5, locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        java.lang.Class<?> wildcardClass8 = week6.getClass();
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        java.lang.Class class14 = null;
        java.util.Date date15 = null;
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = org.jfree.data.time.RegularTimePeriod.createInstance(class14, date15, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass8, date13, timeZone16);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date22);
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass8, date22, timeZone24);
        java.util.Locale locale26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date3, timeZone24, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        java.util.TimeZone timeZone4 = null;
        java.util.Locale locale5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date3, timeZone4, locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        int int10 = week5.getWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year11 = week5.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        long long20 = week2.getSerialIndex();
        java.util.Calendar calendar21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = week2.getMiddleMillisecond(calendar21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2791L + "'", long20 == 2791L);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week7.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getFirstMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getFirstMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getFirstMillisecond();
        boolean boolean10 = week2.equals((java.lang.Object) 12);
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week2.getLastMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 9, 2");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        long long10 = week7.getLastMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        int int17 = week7.compareTo((java.lang.Object) wildcardClass15);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        boolean boolean19 = week4.equals((java.lang.Object) wildcardClass15);
        int int20 = week4.getYearValue();
        java.util.Calendar calendar21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = week4.getFirstMillisecond(calendar21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year23 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        java.lang.String str6 = week2.toString();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        java.util.Calendar calendar23 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        long long15 = week9.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass16 = week9.getClass();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date20 = week19.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date20, timeZone26);
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date6, timeZone26, locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506053200001L) + "'", long15 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        long long3 = week2.getSerialIndex();
        java.util.Date date4 = week2.getStart();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1748L + "'", long3 == 1748L);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Dec 21 00:00:00 CET 32");
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year8 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 48);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getFirstMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        java.lang.Class class0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class1 = org.jfree.data.time.RegularTimePeriod.downsize(class0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year5 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (32) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week5.getFirstMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getMiddleMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week5.getLastMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getFirstMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getMiddleMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506355600000L) + "'", long4 == (-60506355600000L));
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        java.util.Calendar calendar75 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long76 = week73.getLastMillisecond(calendar75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getMiddleMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize(class13);
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize(class14);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertNotNull(class15);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        long long10 = week8.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = week2.compareTo((java.lang.Object) week8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506355600000L) + "'", long10 == (-60506355600000L));
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getLastMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(date3, timeZone12);
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week13.getFirstMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Date date74 = week73.getStart();
        java.util.Calendar calendar75 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long76 = week73.getFirstMillisecond(calendar75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        int int3 = week0.getWeek();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week0.getFirstMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        boolean boolean7 = week2.equals((java.lang.Object) 0L);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getMiddleMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = week2.getLastMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getFirstMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getMiddleMillisecond();
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week0.getMiddleMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637751599999L + "'", long2 == 1637751599999L);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.previous();
        int int31 = week29.getYearValue();
        java.util.Date date32 = week29.getStart();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date32, timeZone33);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date17, timeZone33);
        java.util.Calendar calendar36 = null;
        // The following exception was thrown during execution in test generation
        try {
            week35.peg(calendar36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date13, timeZone19);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        java.lang.Class<?> wildcardClass26 = week24.getClass();
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass26);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.lang.Class class32 = null;
        java.util.Date date33 = null;
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance(class32, date33, timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date31, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date40 = week39.getStart();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date40);
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date40, timeZone42);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date13, timeZone42);
        java.lang.Class<?> wildcardClass45 = timeZone42.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week2.getMiddleMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getYearValue();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getMiddleMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(8, (int) (short) -1);
        java.lang.Class<?> wildcardClass78 = week77.getClass();
        int int79 = week73.compareTo((java.lang.Object) wildcardClass78);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = regularTimePeriod14.getMiddleMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        java.util.Date date5 = week2.getEnd();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getFirstMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year3 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (-1) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        long long14 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506355600000L) + "'", long14 == (-60506355600000L));
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getFirstMillisecond();
        long long5 = week2.getSerialIndex();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getMiddleMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506355600000L) + "'", long4 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getYearValue();
        long long7 = week2.getSerialIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year8 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        long long6 = week4.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.next();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = regularTimePeriod7.getMiddleMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59101405200000L) + "'", long6 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = week16.getLastMillisecond(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        long long4 = regularTimePeriod3.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61127182800001L) + "'", long4 == (-61127182800001L));
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week2.getMiddleMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, 2);
        java.lang.String str3 = week2.toString();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 9, 2" + "'", str3, "Week 9, 2");
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        java.util.Date date23 = week15.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date23, timeZone30);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.previous();
        int int37 = week35.getYearValue();
        java.util.Date date38 = week35.getStart();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date38, timeZone39);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date23, timeZone39);
        java.util.Locale locale42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date5, timeZone39, locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        int int32 = week31.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        java.util.Date date23 = week15.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date23, timeZone30);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.previous();
        int int37 = week35.getYearValue();
        java.util.Date date38 = week35.getStart();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date38, timeZone39);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date23, timeZone39);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date5, timeZone39);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        int int50 = week45.getYearValue();
        long long51 = week45.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass52 = week45.getClass();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.next();
        int int61 = week59.getYearValue();
        java.util.TimeZone timeZone62 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int63 = week59.compareTo((java.lang.Object) timeZone62);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass52, date56, timeZone62);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week67.next();
        java.lang.Class<?> wildcardClass69 = week67.getClass();
        java.lang.Class class70 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass69);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date74 = week73.getStart();
        java.lang.Class class75 = null;
        java.util.Date date76 = null;
        java.util.TimeZone timeZone77 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance(class75, date76, timeZone77);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass69, date74, timeZone77);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date83 = week82.getStart();
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date83);
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass69, date83, timeZone85);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date56, timeZone85);
        java.util.Locale locale88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(date5, timeZone85, locale88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60506053200001L) + "'", long51 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(class70);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone77);
// flaky:         org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod86);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        java.util.Date date5 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        int int14 = week12.getYearValue();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int16 = week12.compareTo((java.lang.Object) timeZone15);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date9, timeZone15);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date5, timeZone15);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year19 = week18.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        int int6 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str7 = week6.toString();
        long long8 = week6.getMiddleMillisecond();
        long long9 = week6.getLastMillisecond();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        int int16 = week6.compareTo((java.lang.Object) wildcardClass14);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        java.lang.Class<?> wildcardClass22 = week20.getClass();
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        java.lang.Class class28 = null;
        java.util.Date date29 = null;
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = org.jfree.data.time.RegularTimePeriod.createInstance(class28, date29, timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass22, date27, timeZone30);
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = org.jfree.data.time.RegularTimePeriod.createInstance(class17, date27, timeZone33);
        java.util.Locale locale35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date3, timeZone33, locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60505750800001L) + "'", long9 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod34);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getStart();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        long long27 = regularTimePeriod26.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-60506053200001L) + "'", long27 == (-60506053200001L));
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year4 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date3 = week2.getEnd();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 28 23:59:59 CET 11");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getMiddleMillisecond();
        long long15 = week2.getSerialIndex();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getMiddleMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        long long6 = week2.getLastMillisecond();
        int int7 = week2.getYearValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59100800400001L) + "'", long6 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week2.getFirstMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            week4.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year5 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.previous();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getFirstMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getMiddleMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        java.util.Date date0 = null;
        java.lang.Class class1 = null;
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week4.next();
        int int6 = week4.getYearValue();
        java.util.TimeZone timeZone7 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int8 = week4.compareTo((java.lang.Object) timeZone7);
        int int9 = week4.getYearValue();
        int int11 = week4.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week4.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week4.next();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        boolean boolean21 = week4.equals((java.lang.Object) wildcardClass18);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date26 = week25.getStart();
        java.util.Date date27 = week25.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date37 = week36.getStart();
        java.lang.Class class38 = null;
        java.util.Date date39 = null;
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = org.jfree.data.time.RegularTimePeriod.createInstance(class38, date39, timeZone40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date37, timeZone40);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date27, timeZone40);
        java.lang.Class class44 = null;
        java.util.Date date45 = null;
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance(class44, date45, timeZone46);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date27, timeZone46);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        java.lang.Class<?> wildcardClass53 = week51.getClass();
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass53);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        java.lang.Class class59 = null;
        java.util.Date date60 = null;
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = org.jfree.data.time.RegularTimePeriod.createInstance(class59, date60, timeZone61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass53, date58, timeZone61);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date67 = week66.getStart();
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date67);
        java.util.TimeZone timeZone69 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass53, date67, timeZone69);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class1, date27, timeZone69);
        java.util.Locale locale72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date0, timeZone69, locale72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod47);
        org.junit.Assert.assertNull(regularTimePeriod48);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNull(regularTimePeriod71);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        java.util.Calendar calendar29 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long30 = week28.getFirstMillisecond(calendar29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getSerialIndex();
        int int15 = week2.compareTo((java.lang.Object) 0.0d);
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getMiddleMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week11.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getFirstMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        boolean boolean8 = week6.equals((java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week4.getFirstMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        java.util.Date date4 = week2.getStart();
        long long5 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Oct 31 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 44L + "'", long5 == 44L);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = week19.getMiddleMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        int int3 = week0.getWeek();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week0.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week9.previous();
        int int18 = week9.getYearValue();
        long long19 = week9.getLastMillisecond();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        java.lang.Class<?> wildcardClass24 = week22.getClass();
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        boolean boolean26 = week9.equals((java.lang.Object) wildcardClass24);
        boolean boolean27 = week2.equals((java.lang.Object) wildcardClass24);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.util.Date date32 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        int int40 = week35.getYearValue();
        long long41 = week35.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass42 = week35.getClass();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date46, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date73 = week72.getStart();
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date73);
        java.util.TimeZone timeZone75 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date73, timeZone75);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date46, timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass24, date32, timeZone75);
        java.lang.Class<?> wildcardClass79 = date32.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60505750800001L) + "'", long19 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-60506053200001L) + "'", long41 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getLastMillisecond();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week4.getMiddleMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59100800400001L) + "'", long5 == (-59100800400001L));
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.previous();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year22 = week19.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        java.util.Calendar calendar22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = week20.getFirstMillisecond(calendar22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.lang.String str6 = week2.toString();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getFirstMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 9, 97" + "'", str6, "Week 9, 97");
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        int int34 = week29.getYearValue();
        int int36 = week29.compareTo((java.lang.Object) 9);
        int int37 = week29.getYearValue();
        long long38 = week29.getLastMillisecond();
        int int39 = week29.getWeek();
        java.util.Date date40 = week29.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date44 = week43.getStart();
        java.util.Date date45 = week43.getEnd();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        java.lang.Class<?> wildcardClass50 = week48.getClass();
        java.lang.Class class51 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date55 = week54.getStart();
        java.lang.Class class56 = null;
        java.util.Date date57 = null;
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance(class56, date57, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass50, date55, timeZone58);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date45, timeZone58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date40, timeZone58);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str66 = week65.toString();
        long long67 = week65.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week65.next();
        java.util.Date date69 = regularTimePeriod68.getEnd();
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date73 = week72.getStart();
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week76.next();
        int int78 = week76.getYearValue();
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int80 = week76.compareTo((java.lang.Object) timeZone79);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date73, timeZone79);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date69, timeZone79);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date40, timeZone79);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date17, timeZone79);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date17);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-60505750800001L) + "'", long38 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(class51);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Week 35, 52" + "'", str66, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2791L + "'", long67 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        int int3 = week0.getWeek();
        long long4 = week0.getLastMillisecond();
        long long5 = week0.getFirstMillisecond();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week0.getLastMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1638053999999L + "'", long4 == 1638053999999L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 53);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str6 = week5.toString();
        long long7 = week5.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week5.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week5.previous();
        long long10 = week5.getSerialIndex();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = week2.compareTo((java.lang.Object) week5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '4', year5);
        java.lang.String str9 = week8.toString();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 52, 2021" + "'", str9, "Week 52, 2021");
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getMiddleMillisecond();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week2.getFirstMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        long long75 = week73.getSerialIndex();
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date79 = week78.getStart();
        java.util.Date date80 = week78.getEnd();
        int int81 = week78.getYearValue();
        java.util.Date date82 = week78.getStart();
        int int83 = week78.getWeek();
        int int84 = week73.compareTo((java.lang.Object) int83);
        java.util.Calendar calendar85 = null;
        // The following exception was thrown during execution in test generation
        try {
            week73.peg(calendar85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2791L + "'", long75 == 2791L);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 97 + "'", int81 == 97);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        long long14 = week11.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        int int21 = week11.compareTo((java.lang.Object) wildcardClass19);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        java.lang.Class<?> wildcardClass27 = week25.getClass();
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.lang.Class class33 = null;
        java.util.Date date34 = null;
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance(class33, date34, timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date32, timeZone35);
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date32, timeZone38);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date6, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        long long49 = week43.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass50 = week43.getClass();
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date54 = week53.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        int int59 = week57.getYearValue();
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int61 = week57.compareTo((java.lang.Object) timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass50, date54, timeZone60);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        java.lang.Class<?> wildcardClass67 = week65.getClass();
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass67);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date72 = week71.getStart();
        java.lang.Class class73 = null;
        java.util.Date date74 = null;
        java.util.TimeZone timeZone75 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance(class73, date74, timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass67, date72, timeZone75);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date81 = week80.getStart();
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date81);
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass67, date81, timeZone83);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date54, timeZone83);
        java.util.Locale locale86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date6, timeZone83, locale86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60506053200001L) + "'", long49 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod84);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year5 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506355600000L) + "'", long4 == (-60506355600000L));
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.util.Date date11 = week7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getMiddleMillisecond();
        long long19 = week16.getLastMillisecond();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        java.lang.Class<?> wildcardClass24 = week22.getClass();
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        int int26 = week16.compareTo((java.lang.Object) wildcardClass24);
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date37 = week36.getStart();
        java.lang.Class class38 = null;
        java.util.Date date39 = null;
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = org.jfree.data.time.RegularTimePeriod.createInstance(class38, date39, timeZone40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date37, timeZone40);
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = org.jfree.data.time.RegularTimePeriod.createInstance(class27, date37, timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date11, timeZone43);
        java.util.Locale locale46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date3, timeZone43, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60505750800001L) + "'", long19 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod44);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.lang.String str16 = week2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year17 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getMiddleMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((-1969), year4);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            week7.peg(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date7 = week6.getStart();
        int int8 = week6.getYearValue();
        java.util.Date date9 = week6.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        java.util.Date date27 = week19.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date27, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.previous();
        int int41 = week39.getYearValue();
        java.util.Date date42 = week39.getStart();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date42, timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date27, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date9, timeZone43);
        boolean boolean47 = week2.equals((java.lang.Object) date9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week2.previous();
        java.util.Calendar calendar49 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long50 = regularTimePeriod48.getMiddleMillisecond(calendar49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 52, 2021");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the week.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week2.getLastMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year8);
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str14 = week13.toString();
        long long15 = week13.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week13.next();
        java.util.Date date17 = week13.getEnd();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        java.util.Date date20 = week18.getEnd();
        java.util.TimeZone timeZone21 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date20, timeZone21);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date10, timeZone21);
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date3, timeZone21, locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506053200001L) + "'", long15 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        boolean boolean11 = week2.equals((java.lang.Object) date10);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getMiddleMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        java.util.Date date14 = week12.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        java.lang.Class class25 = null;
        java.util.Date date26 = null;
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance(class25, date26, timeZone27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date24, timeZone27);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date14, timeZone27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date9, timeZone27);
        java.util.Locale locale32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(date3, timeZone27, locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getSerialIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year14 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        java.lang.Class<?> wildcardClass79 = week77.getClass();
        java.lang.Class class80 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass79);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date84 = week83.getStart();
        java.lang.Class class85 = null;
        java.util.Date date86 = null;
        java.util.TimeZone timeZone87 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = org.jfree.data.time.RegularTimePeriod.createInstance(class85, date86, timeZone87);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass79, date84, timeZone87);
        java.util.Locale locale90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date31, timeZone87, locale90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(class80);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone87);
// flaky:         org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod88);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        long long74 = week73.getFirstMillisecond();
        java.util.Calendar calendar75 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long76 = week73.getMiddleMillisecond(calendar75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-60506355600000L) + "'", long74 == (-60506355600000L));
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        long long74 = week73.getFirstMillisecond();
        java.util.Calendar calendar75 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long76 = week73.getLastMillisecond(calendar75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-60506355600000L) + "'", long74 == (-60506355600000L));
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        long long19 = week2.getFirstMillisecond();
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = week2.getLastMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506355600000L) + "'", long19 == (-60506355600000L));
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getLastMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year6 = week4.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59100800400001L) + "'", long5 == (-59100800400001L));
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = regularTimePeriod8.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        int int11 = week2.getYearValue();
        int int12 = week2.getYearValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year13 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        java.util.TimeZone timeZone32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(date23, timeZone32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getFirstMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            week17.peg(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(53, year4);
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = year4.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        int int10 = week5.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week5.next();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            week5.peg(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getYearValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59101405200000L) + "'", long5 == (-59101405200000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date5, timeZone6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week();
        long long10 = week9.getFirstMillisecond();
        org.jfree.data.time.Year year11 = week9.getYear();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(0, year11);
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week16.next();
        java.util.Date date20 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.util.Date date23 = week21.getEnd();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date23, timeZone24);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date13, timeZone24);
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date5, timeZone24, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1637449200000L + "'", long10 == 1637449200000L);
        org.junit.Assert.assertNotNull(year11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date5, timeZone6);
        int int8 = week7.getYearValue();
        java.lang.String str9 = week7.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year10 = week7.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        java.lang.String str75 = week73.toString();
        int int76 = week73.getWeek();
        java.util.Calendar calendar77 = null;
        // The following exception was thrown during execution in test generation
        try {
            week73.peg(calendar77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Week 35, 52" + "'", str75, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = year3.getMiddleMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.lang.String str12 = week2.toString();
        long long13 = week2.getFirstMillisecond();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week2.getFirstMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506355600000L) + "'", long13 == (-60506355600000L));
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.lang.String str9 = week7.toString();
        java.lang.Class<?> wildcardClass10 = week7.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.previous();
        java.util.Calendar calendar22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = week19.getFirstMillisecond(calendar22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        java.lang.String str6 = week2.toString();
        java.util.Date date7 = week2.getEnd();
        java.lang.Class<?> wildcardClass8 = date7.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getMiddleMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        long long5 = week2.getLastMillisecond();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getFirstMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59100800400001L) + "'", long5 == (-59100800400001L));
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        java.lang.Class<?> wildcardClass73 = timeZone70.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        int int25 = week16.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week16.next();
        java.lang.Class<?> wildcardClass27 = regularTimePeriod26.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        java.util.Date date45 = week37.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date45, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str58 = week57.toString();
        long long59 = week57.getMiddleMillisecond();
        long long60 = week57.getLastMillisecond();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        int int67 = week57.compareTo((java.lang.Object) wildcardClass65);
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        java.lang.Class<?> wildcardClass73 = week71.getClass();
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.lang.Class class79 = null;
        java.util.Date date80 = null;
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date80, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass73, date78, timeZone81);
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date78, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date45, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date13, timeZone84);
        java.util.Calendar calendar88 = null;
        // The following exception was thrown during execution in test generation
        try {
            week87.peg(calendar88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week2.getLastMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        long long11 = week2.getSerialIndex();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5150L + "'", long11 == 5150L);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year6 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date39 = week38.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date43 = week42.getStart();
        int int44 = week42.getYearValue();
        java.util.Date date45 = week42.getEnd();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        java.lang.Class<?> wildcardClass50 = week48.getClass();
        java.lang.Class class51 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        int int57 = week55.getYearValue();
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int59 = week55.compareTo((java.lang.Object) timeZone58);
        int int60 = week55.getYearValue();
        int int62 = week55.compareTo((java.lang.Object) 9);
        java.util.Date date63 = week55.getStart();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date63);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week67.next();
        int int69 = week67.getYearValue();
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int71 = week67.compareTo((java.lang.Object) timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass50, date63, timeZone70);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.previous();
        int int77 = week75.getYearValue();
        java.util.Date date78 = week75.getStart();
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date78, timeZone79);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date63, timeZone79);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date45, timeZone79);
        boolean boolean83 = week38.equals((java.lang.Object) date45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = week38.previous();
        // The following exception was thrown during execution in test generation
        try {
            int int85 = week35.compareTo((java.lang.Object) week38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(class51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod84);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week2.getMiddleMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        long long5 = week2.getSerialIndex();
        int int6 = week2.getWeek();
        int int7 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1748L + "'", long5 == 1748L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year6);
        java.lang.Class<?> wildcardClass8 = week7.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        long long7 = week2.getLastMillisecond();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getEnd();
        java.util.Date date7 = week2.getStart();
        long long8 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-59100800400001L) + "'", long8 == (-59100800400001L));
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        long long3 = week2.getFirstMillisecond();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getLastMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62167741200000L) + "'", long3 == (-62167741200000L));
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        boolean boolean6 = week2.equals((java.lang.Object) 11);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        long long13 = week2.getSerialIndex();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week2.getLastMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getYearValue();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getFirstMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        java.util.Date date18 = week10.getStart();
        int int20 = week10.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        java.lang.Class<?> wildcardClass25 = week23.getClass();
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        java.util.Date date38 = week30.getStart();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date38);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass25, date38, timeZone45);
        java.util.Date date48 = regularTimePeriod47.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        int int53 = week51.getYearValue();
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int55 = week51.compareTo((java.lang.Object) timeZone54);
        int int56 = week51.getYearValue();
        int int58 = week51.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week51.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week51.next();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        java.lang.Class class67 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        boolean boolean68 = week51.equals((java.lang.Object) wildcardClass65);
        java.lang.Class class69 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date73 = week72.getStart();
        java.util.Date date74 = week72.getEnd();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        java.lang.Class<?> wildcardClass79 = week77.getClass();
        java.lang.Class class80 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass79);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date84 = week83.getStart();
        java.lang.Class class85 = null;
        java.util.Date date86 = null;
        java.util.TimeZone timeZone87 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = org.jfree.data.time.RegularTimePeriod.createInstance(class85, date86, timeZone87);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass79, date84, timeZone87);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date74, timeZone87);
        java.lang.Class class91 = null;
        java.util.Date date92 = null;
        java.util.TimeZone timeZone93 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance(class91, date92, timeZone93);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod95 = org.jfree.data.time.RegularTimePeriod.createInstance(class69, date74, timeZone93);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date48, timeZone93);
        int int97 = week10.compareTo((java.lang.Object) timeZone93);
        java.util.Locale locale98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week99 = new org.jfree.data.time.Week(date6, timeZone93, locale98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertNotNull(class67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(class69);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(class80);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone87);
// flaky:         org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod88);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertNotNull(timeZone93);
// flaky:         org.junit.Assert.assertEquals(timeZone93.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod94);
        org.junit.Assert.assertNull(regularTimePeriod95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 9, 97" + "'", str6, "Week 9, 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getMiddleMillisecond();
        long long14 = week2.getLastMillisecond();
        long long15 = week2.getLastMillisecond();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getFirstMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60505750800001L) + "'", long15 == (-60505750800001L));
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week7.getLastMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getMiddleMillisecond();
        java.lang.String str14 = week2.toString();
        int int15 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(date3, timeZone12);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date3);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        long long74 = week73.getFirstMillisecond();
        long long75 = week73.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-60506355600000L) + "'", long74 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-60506053200001L) + "'", long75 == (-60506053200001L));
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((-1969), year4);
        long long8 = year4.getMiddleMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = year4.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1625223599999L + "'", long8 == 1625223599999L);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getMiddleMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year4 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (-1) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        java.util.Date date10 = week7.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date14, timeZone20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date10, timeZone20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date4, timeZone20);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date4);
        long long26 = week25.getMiddleMillisecond();
        java.lang.Object obj27 = null;
        boolean boolean28 = week25.equals(obj27);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506053200001L) + "'", long26 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = week17.getLastMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        int int34 = week29.getYearValue();
        int int36 = week29.compareTo((java.lang.Object) 9);
        java.util.Date date37 = week29.getStart();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date37);
        long long39 = week38.getFirstMillisecond();
        java.util.Date date40 = week38.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date44 = week43.getStart();
        int int45 = week43.getYearValue();
        java.util.Date date46 = week43.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        java.lang.Class class53 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        int int58 = week56.getYearValue();
        java.util.TimeZone timeZone59 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int60 = week56.compareTo((java.lang.Object) timeZone59);
        int int61 = week56.getYearValue();
        int int63 = week56.compareTo((java.lang.Object) 9);
        java.util.Date date64 = week56.getStart();
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.next();
        int int70 = week68.getYearValue();
        java.util.TimeZone timeZone71 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int72 = week68.compareTo((java.lang.Object) timeZone71);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass51, date64, timeZone71);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week76.previous();
        int int78 = week76.getYearValue();
        java.util.Date date79 = week76.getStart();
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date79, timeZone80);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date64, timeZone80);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date46, timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date40, timeZone80);
        java.lang.Class<?> wildcardClass85 = date40.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60506355600000L) + "'", long39 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(class53);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.TimeZone timeZone14 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int15 = week11.compareTo((java.lang.Object) timeZone14);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date8, timeZone14);
        java.util.Date date17 = week16.getEnd();
        boolean boolean18 = week2.equals((java.lang.Object) week16);
        long long19 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-61126880400000L) + "'", long19 == (-61126880400000L));
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(48, 0);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week2.getMiddleMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        long long5 = week2.getFirstMillisecond();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getLastMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-61126880400000L) + "'", long5 == (-61126880400000L));
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        java.lang.Class class7 = null;
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date11 = week10.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.util.Date date16 = week14.getEnd();
        int int17 = week14.getYearValue();
        long long18 = week14.getLastMillisecond();
        java.lang.Class<?> wildcardClass19 = week14.getClass();
        java.util.Date date20 = null;
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date24 = week23.getStart();
        int int25 = week23.getYearValue();
        java.util.Date date26 = week23.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        java.util.Date date44 = week36.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date44, timeZone51);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.previous();
        int int58 = week56.getYearValue();
        java.util.Date date59 = week56.getStart();
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date59, timeZone60);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date44, timeZone60);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date26, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date20, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance(class7, date11, timeZone60);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date6, timeZone60);
        java.util.Calendar calendar67 = null;
        // The following exception was thrown during execution in test generation
        try {
            week66.peg(calendar67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-59100800400001L) + "'", long18 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod64);
        org.junit.Assert.assertNull(regularTimePeriod65);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week10.previous();
        int int19 = week10.getYearValue();
        long long20 = week10.getLastMillisecond();
        int int21 = week10.getWeek();
        int int22 = week10.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week10.next();
        int int24 = week10.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week10.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week10.next();
        boolean boolean27 = week2.equals((java.lang.Object) regularTimePeriod26);
        java.util.Calendar calendar28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long29 = week2.getLastMillisecond(calendar28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60505750800001L) + "'", long20 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.previous();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = regularTimePeriod12.getMiddleMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(48, (int) (byte) 0);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        java.util.Date date32 = week31.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str36 = week35.toString();
        long long37 = week35.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week35.next();
        java.util.Date date39 = week35.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date39);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date44 = week43.getStart();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.next();
        int int49 = week47.getYearValue();
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int51 = week47.compareTo((java.lang.Object) timeZone50);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date44, timeZone50);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date39, timeZone50);
        java.util.Locale locale54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date32, timeZone50, locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Week 35, 52" + "'", str36, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year23 = week20.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        boolean boolean11 = week2.equals((java.lang.Object) date10);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year12 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        long long10 = week7.getLastMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        int int17 = week7.compareTo((java.lang.Object) wildcardClass15);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        boolean boolean19 = week4.equals((java.lang.Object) wildcardClass15);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertNotNull(class22);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week2.getFirstMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        int int11 = week2.getYearValue();
        int int12 = week2.getYearValue();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getMiddleMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        java.lang.String str19 = week2.toString();
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = week2.getMiddleMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        int int15 = week2.getWeek();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getMiddleMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getSerialIndex();
        int int15 = week2.compareTo((java.lang.Object) 0.0d);
        java.util.Date date16 = week2.getEnd();
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = week2.getFirstMillisecond(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int15 = week2.compareTo((java.lang.Object) 0);
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week12.getFirstMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str6 = week5.toString();
        long long7 = week5.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week5.next();
        boolean boolean9 = week2.equals((java.lang.Object) regularTimePeriod8);
        int int10 = week2.getYearValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year11 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (-1) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date8 = week7.getStart();
        int int9 = week7.getYearValue();
        java.util.Date date10 = week7.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        int int27 = week20.compareTo((java.lang.Object) 9);
        java.util.Date date28 = week20.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date28, timeZone35);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.previous();
        int int42 = week40.getYearValue();
        java.util.Date date43 = week40.getStart();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date43, timeZone44);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date28, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date10, timeZone44);
        long long48 = week47.getLastMillisecond();
        java.lang.String str49 = week47.toString();
        boolean boolean50 = week2.equals((java.lang.Object) str49);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-60505750800001L) + "'", long48 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Week 35, 52" + "'", str49, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        java.util.Date date36 = week35.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        java.util.Calendar calendar38 = null;
        // The following exception was thrown during execution in test generation
        try {
            week37.peg(calendar38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        long long19 = week2.getFirstMillisecond();
        java.lang.Object obj20 = null;
        boolean boolean21 = week2.equals(obj20);
        java.util.Calendar calendar22 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506355600000L) + "'", long19 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getFirstMillisecond();
        long long8 = week2.getSerialIndex();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year18 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        long long12 = week11.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year13 = week11.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-59101405200000L) + "'", long12 == (-59101405200000L));
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week((int) (byte) 100, year3);
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week4.getMiddleMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getFirstMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getSerialIndex();
        int int15 = week2.compareTo((java.lang.Object) 0.0d);
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = week17.getMiddleMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date9 = year5.getEnd();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = year5.getMiddleMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Dec 31 23:59:59 CET 2021");
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 100, 100");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getFirstMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week();
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(52, year12);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) (byte) -1, year12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(0, year12);
        int int16 = week2.compareTo((java.lang.Object) week15);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.previous();
        java.lang.String str21 = week19.toString();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date25 = week24.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(date25, timeZone31);
        java.util.Date date34 = week33.getEnd();
        boolean boolean35 = week19.equals((java.lang.Object) week33);
        boolean boolean36 = week2.equals((java.lang.Object) week33);
        long long37 = week2.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1637449200000L + "'", long11 == 1637449200000L);
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1969) + "'", int16 == (-1969));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Week 52, 32" + "'", str21, "Week 52, 32");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int15 = week2.compareTo((java.lang.Object) 0);
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getFirstMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week2.getFirstMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 6);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getFirstMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 1, 35);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        int int3 = week2.getWeek();
        java.util.Date date4 = week2.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year5 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (100) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Nov 21 00:00:00 CET 101");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.previous();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year33 = week31.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        long long6 = week2.getLastMillisecond();
        java.lang.Class<?> wildcardClass7 = week2.getClass();
        java.util.Date date8 = null;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date12 = week11.getStart();
        int int13 = week11.getYearValue();
        java.util.Date date14 = week11.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        int int26 = week24.getYearValue();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int28 = week24.compareTo((java.lang.Object) timeZone27);
        int int29 = week24.getYearValue();
        int int31 = week24.compareTo((java.lang.Object) 9);
        java.util.Date date32 = week24.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(date32);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date32, timeZone39);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.previous();
        int int46 = week44.getYearValue();
        java.util.Date date47 = week44.getStart();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date47, timeZone48);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date32, timeZone48);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date14, timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass7, date8, timeZone48);
        java.lang.Class class53 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59100800400001L) + "'", long6 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(class53);
        org.junit.Assert.assertNotNull(class54);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getLastMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(4, year5);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            week8.peg(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        java.util.Date date13 = regularTimePeriod12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        long long22 = week16.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass23 = week16.getClass();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date27, timeZone33);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        java.lang.Class<?> wildcardClass40 = week38.getClass();
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.lang.Class class46 = null;
        java.util.Date date47 = null;
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = org.jfree.data.time.RegularTimePeriod.createInstance(class46, date47, timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date45, timeZone48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date54 = week53.getStart();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date54);
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date54, timeZone56);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date27, timeZone56);
        java.util.Locale locale59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date13, timeZone56, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60506053200001L) + "'", long22 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, year5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getEnd();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date7);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            week8.peg(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Calendar calendar74 = null;
        // The following exception was thrown during execution in test generation
        try {
            week73.peg(calendar74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week3.next();
        int int5 = week3.getYearValue();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int7 = week3.compareTo((java.lang.Object) timeZone6);
        int int8 = week3.getYearValue();
        long long9 = week3.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass10 = week3.getClass();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date14, timeZone20);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        java.lang.Class<?> wildcardClass27 = week25.getClass();
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.lang.Class class33 = null;
        java.util.Date date34 = null;
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance(class33, date34, timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date32, timeZone35);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date41, timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date14, timeZone43);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date0, timeZone43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        java.lang.String str19 = week2.toString();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week();
        long long21 = week20.getFirstMillisecond();
        org.jfree.data.time.Year year22 = week20.getYear();
        long long23 = week20.getLastMillisecond();
        long long24 = week20.getMiddleMillisecond();
        boolean boolean25 = week2.equals((java.lang.Object) long24);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1637449200000L + "'", long21 == 1637449200000L);
        org.junit.Assert.assertNotNull(year22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1638053999999L + "'", long23 == 1638053999999L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1637751599999L + "'", long24 == 1637751599999L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        int int8 = week2.getWeek();
        long long9 = week2.getFirstMillisecond();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week2.getFirstMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-59101405200000L) + "'", long9 == (-59101405200000L));
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getMiddleMillisecond();
        java.lang.String str14 = week2.toString();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week();
        long long18 = week17.getFirstMillisecond();
        org.jfree.data.time.Year year19 = week17.getYear();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) (byte) 100, year19);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) (short) 10, year19);
        long long22 = week21.getLastMillisecond();
        int int23 = week2.compareTo((java.lang.Object) long22);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        int int28 = week26.getYearValue();
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int30 = week26.compareTo((java.lang.Object) timeZone29);
        int int31 = week26.getYearValue();
        int int33 = week26.compareTo((java.lang.Object) 9);
        int int34 = week26.getYearValue();
        long long35 = week26.getLastMillisecond();
        int int36 = week26.getWeek();
        java.util.Date date37 = week26.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        java.util.Date date42 = week40.getEnd();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        java.lang.Class<?> wildcardClass47 = week45.getClass();
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.lang.Class class53 = null;
        java.util.Date date54 = null;
        java.util.TimeZone timeZone55 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance(class53, date54, timeZone55);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass47, date52, timeZone55);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date42, timeZone55);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date37, timeZone55);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str63 = week62.toString();
        long long64 = week62.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week62.next();
        java.util.Date date66 = regularTimePeriod65.getEnd();
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date70 = week69.getStart();
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.next();
        int int75 = week73.getYearValue();
        java.util.TimeZone timeZone76 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int77 = week73.compareTo((java.lang.Object) timeZone76);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date70, timeZone76);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date66, timeZone76);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date37, timeZone76);
        boolean boolean81 = week2.equals((java.lang.Object) timeZone76);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1637449200000L + "'", long18 == 1637449200000L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1615071599999L + "'", long22 == 1615071599999L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60505750800001L) + "'", long35 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Week 35, 52" + "'", str63, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 2791L + "'", long64 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        int int7 = week2.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        int int15 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.previous();
        long long17 = regularTimePeriod16.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506658000001L) + "'", long17 == (-60506658000001L));
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        java.lang.Class<?> wildcardClass8 = regularTimePeriod7.getClass();
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass8);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(class9);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        long long6 = week4.getFirstMillisecond();
        long long7 = week4.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1608418800000L + "'", long6 == 1608418800000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1608721199999L + "'", long7 == 1608721199999L);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        java.util.Date date32 = week31.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        int int40 = week35.getYearValue();
        int int42 = week35.compareTo((java.lang.Object) 9);
        java.util.Date date43 = week35.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        java.lang.Class<?> wildcardClass48 = week46.getClass();
        java.lang.Class class49 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass48);
        java.lang.Class class50 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        int int58 = week53.getYearValue();
        int int60 = week53.compareTo((java.lang.Object) 9);
        java.util.Date date61 = week53.getStart();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date61);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        int int67 = week65.getYearValue();
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int69 = week65.compareTo((java.lang.Object) timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass48, date61, timeZone68);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.previous();
        int int75 = week73.getYearValue();
        java.util.Date date76 = week73.getStart();
        java.util.TimeZone timeZone77 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date76, timeZone77);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date61, timeZone77);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date43, timeZone77);
        java.util.Locale locale81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date32, timeZone77, locale81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(class49);
        org.junit.Assert.assertNotNull(class50);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone77);
// flaky:         org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        java.lang.Class class0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str4 = week3.toString();
        long long5 = week3.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week3.next();
        java.util.Date date7 = week3.getEnd();
        long long8 = week3.getLastMillisecond();
        java.util.Date date9 = week3.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str13 = week12.toString();
        long long14 = week12.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week12.next();
        java.util.Date date16 = week12.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.util.Date date19 = week17.getEnd();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date19, timeZone20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date9, timeZone20);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str26 = week25.toString();
        long long27 = week25.getMiddleMillisecond();
        long long28 = week25.getLastMillisecond();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        java.lang.Class<?> wildcardClass33 = week31.getClass();
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        int int35 = week25.compareTo((java.lang.Object) wildcardClass33);
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize(class36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week();
        long long40 = week39.getFirstMillisecond();
        org.jfree.data.time.Year year41 = week39.getYear();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(0, year41);
        java.util.Date date43 = week42.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        java.util.Date date48 = week46.getEnd();
        int int49 = week46.getYearValue();
        long long50 = week46.getLastMillisecond();
        java.lang.Class<?> wildcardClass51 = week46.getClass();
        java.util.Date date52 = null;
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date56 = week55.getStart();
        int int57 = week55.getYearValue();
        java.util.Date date58 = week55.getEnd();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        java.lang.Class<?> wildcardClass63 = week61.getClass();
        java.lang.Class class64 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass63);
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass63);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.next();
        int int70 = week68.getYearValue();
        java.util.TimeZone timeZone71 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int72 = week68.compareTo((java.lang.Object) timeZone71);
        int int73 = week68.getYearValue();
        int int75 = week68.compareTo((java.lang.Object) 9);
        java.util.Date date76 = week68.getStart();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date76);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = week80.next();
        int int82 = week80.getYearValue();
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int84 = week80.compareTo((java.lang.Object) timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass63, date76, timeZone83);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = week88.previous();
        int int90 = week88.getYearValue();
        java.util.Date date91 = week88.getStart();
        java.util.TimeZone timeZone92 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date91, timeZone92);
        org.jfree.data.time.Week week94 = new org.jfree.data.time.Week(date76, timeZone92);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date58, timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod96 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass51, date52, timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod97 = org.jfree.data.time.RegularTimePeriod.createInstance(class37, date43, timeZone92);
        java.util.Locale locale98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week99 = new org.jfree.data.time.Week(date9, timeZone92, locale98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 35, 52" + "'", str4, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506053200001L) + "'", long5 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Week 35, 52" + "'", str26, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-60506053200001L) + "'", long27 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60505750800001L) + "'", long28 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1637449200000L + "'", long40 == 1637449200000L);
        org.junit.Assert.assertNotNull(year41);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-59100800400001L) + "'", long50 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(class64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 52 + "'", int90 == 52);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod96);
        org.junit.Assert.assertNotNull(regularTimePeriod97);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        java.util.Date date4 = week2.getStart();
        long long5 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Oct 31 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-62141130000000L) + "'", long5 == (-62141130000000L));
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        long long5 = week2.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year6 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        boolean boolean6 = week2.equals((java.lang.Object) 11);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week9.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week9.previous();
        boolean boolean17 = week2.equals((java.lang.Object) regularTimePeriod16);
        long long18 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2791L + "'", long18 == 2791L);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        java.util.Date date13 = regularTimePeriod12.getStart();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = regularTimePeriod12.getMiddleMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 27 00:00:00 CET 52");
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        long long13 = week11.getMiddleMillisecond();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-62198888400001L) + "'", long13 == (-62198888400001L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.lang.String str7 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        long long9 = week2.getLastMillisecond();
        java.lang.Class<?> wildcardClass10 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60505750800001L) + "'", long9 == (-60505750800001L));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year7 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getMiddleMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        int int3 = week0.getWeek();
        int int4 = week0.getWeek();
        long long5 = week0.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637751599999L + "'", long5 == 1637751599999L);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) 'a', 8);
        long long3 = week2.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 521L + "'", long3 == 521L);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        java.util.Date date5 = week2.getEnd();
        int int7 = week2.compareTo((java.lang.Object) 10L);
        java.lang.String str8 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week2.getMiddleMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 9, 97" + "'", str8, "Week 9, 97");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        java.util.Date date18 = week2.getEnd();
        java.lang.String str19 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year6);
        java.util.Date date11 = week10.getEnd();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week10.getFirstMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 26 23:59:59 CET 2022");
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 100, 36);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.previous();
        java.util.Date date40 = week38.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        int int50 = week43.compareTo((java.lang.Object) 9);
        int int51 = week43.getYearValue();
        long long52 = week43.getLastMillisecond();
        int int53 = week43.getWeek();
        java.util.Date date54 = week43.getEnd();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        java.util.Date date59 = week57.getEnd();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        java.lang.Class<?> wildcardClass64 = week62.getClass();
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date69 = week68.getStart();
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass64, date69, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date59, timeZone72);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date54, timeZone72);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone72);
        java.util.Locale locale78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date13, timeZone72, locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60505750800001L) + "'", long52 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        long long17 = week2.getSerialIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2791L + "'", long17 == 2791L);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        int int16 = week14.getYearValue();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int18 = week14.compareTo((java.lang.Object) timeZone17);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date11, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        long long29 = week23.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass30 = week23.getClass();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass30, date34, timeZone40);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date34);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        int int48 = week46.getYearValue();
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int50 = week46.compareTo((java.lang.Object) timeZone49);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date34, timeZone49);
        int int52 = week20.compareTo((java.lang.Object) timeZone49);
        java.util.Locale locale53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date7, timeZone49, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        long long4 = week2.getSerialIndex();
        int int5 = week2.getWeek();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getMiddleMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1), (int) (byte) 0);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        long long75 = week73.getSerialIndex();
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date79 = week78.getStart();
        java.util.Date date80 = week78.getEnd();
        int int81 = week78.getYearValue();
        java.util.Date date82 = week78.getStart();
        int int83 = week78.getWeek();
        int int84 = week73.compareTo((java.lang.Object) int83);
        java.lang.Class<?> wildcardClass85 = week73.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2791L + "'", long75 == 2791L);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 97 + "'", int81 == 97);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.util.Date date7 = regularTimePeriod6.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 13 00:00:00 CET 52");
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        int int27 = week22.getYearValue();
        int int29 = week22.compareTo((java.lang.Object) 9);
        java.util.Date date30 = week22.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass17, date30, timeZone37);
        java.util.Date date40 = regularTimePeriod39.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        int int50 = week43.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week43.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week43.next();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        java.lang.Class<?> wildcardClass57 = week55.getClass();
        java.lang.Class class58 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        boolean boolean60 = week43.equals((java.lang.Object) wildcardClass57);
        java.lang.Class class61 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date65 = week64.getStart();
        java.util.Date date66 = week64.getEnd();
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.next();
        java.lang.Class<?> wildcardClass71 = week69.getClass();
        java.lang.Class class72 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass71);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date76 = week75.getStart();
        java.lang.Class class77 = null;
        java.util.Date date78 = null;
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = org.jfree.data.time.RegularTimePeriod.createInstance(class77, date78, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass71, date76, timeZone79);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date66, timeZone79);
        java.lang.Class class83 = null;
        java.util.Date date84 = null;
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance(class83, date84, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance(class61, date66, timeZone85);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date40, timeZone85);
        int int89 = week2.compareTo((java.lang.Object) timeZone85);
        long long90 = week2.getMiddleMillisecond();
        java.util.Calendar calendar91 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(class58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(class61);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(class72);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod80);
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod86);
        org.junit.Assert.assertNull(regularTimePeriod87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-60506053200001L) + "'", long90 == (-60506053200001L));
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        java.lang.Object obj21 = null;
        int int22 = week2.compareTo(obj21);
        long long23 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60506355600000L) + "'", long23 == (-60506355600000L));
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.previous();
        java.util.Date date48 = week46.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        java.util.Date date54 = week51.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        int int63 = week61.getYearValue();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int65 = week61.compareTo((java.lang.Object) timeZone64);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date58, timeZone64);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date54, timeZone64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date48, timeZone64);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date42, timeZone64);
        int int70 = week69.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.lang.String str9 = week7.toString();
        long long10 = week7.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506053200001L) + "'", long10 == (-60506053200001L));
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        long long7 = week2.getLastMillisecond();
        long long8 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        java.util.Date date5 = week2.getEnd();
        int int7 = week2.compareTo((java.lang.Object) 10L);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year8 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            week7.peg(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        long long7 = week2.getLastMillisecond();
        java.util.Date date8 = week2.getEnd();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.TimeZone timeZone14 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int15 = week11.compareTo((java.lang.Object) timeZone14);
        int int16 = week11.getYearValue();
        int int18 = week11.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week11.previous();
        int int20 = week11.getYearValue();
        long long21 = week11.getLastMillisecond();
        int int22 = week11.getWeek();
        int int23 = week11.getYearValue();
        long long24 = week11.getSerialIndex();
        java.util.Date date25 = week11.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date25);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = week2.compareTo((java.lang.Object) week26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2791L + "'", long24 == 2791L);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.next();
        long long24 = week2.getMiddleMillisecond();
        long long25 = week2.getLastMillisecond();
        java.util.Calendar calendar26 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = week2.getLastMillisecond(calendar26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60506053200001L) + "'", long24 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60505750800001L) + "'", long25 == (-60505750800001L));
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.TimeZone timeZone21 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date4, timeZone21);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str26 = week25.toString();
        long long27 = week25.getMiddleMillisecond();
        long long28 = week25.getLastMillisecond();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        java.lang.Class<?> wildcardClass33 = week31.getClass();
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        int int35 = week25.compareTo((java.lang.Object) wildcardClass33);
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        java.lang.Class<?> wildcardClass41 = week39.getClass();
        java.lang.Class class42 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        java.lang.Class class47 = null;
        java.util.Date date48 = null;
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance(class47, date48, timeZone49);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass41, date46, timeZone49);
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class36, date46, timeZone52);
        java.util.Locale locale54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date4, timeZone52, locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Central European Time");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Week 35, 52" + "'", str26, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-60506053200001L) + "'", long27 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60505750800001L) + "'", long28 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        java.util.Date date15 = week2.getEnd();
        long long16 = week2.getSerialIndex();
        long long17 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506355600000L) + "'", long17 == (-60506355600000L));
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(6, (int) (byte) 10);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week4.getFirstMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.lang.String str12 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        java.lang.String str6 = week2.toString();
        java.util.Date date7 = week2.getEnd();
        long long8 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        java.util.Date date23 = week15.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date23, timeZone30);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.previous();
        int int37 = week35.getYearValue();
        java.util.Date date38 = week35.getStart();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date38, timeZone39);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date23, timeZone39);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date5, timeZone39);
        long long43 = week42.getLastMillisecond();
        java.lang.String str44 = week42.toString();
        java.util.Calendar calendar45 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long46 = week42.getMiddleMillisecond(calendar45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60505750800001L) + "'", long43 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getFirstMillisecond();
        int int6 = week2.compareTo((java.lang.Object) false);
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getFirstMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506355600000L) + "'", long4 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        long long24 = week16.getLastMillisecond();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week();
        long long28 = week27.getFirstMillisecond();
        org.jfree.data.time.Year year29 = week27.getYear();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) (byte) 100, year29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(100, year29);
        int int32 = week16.compareTo((java.lang.Object) week31);
        java.util.Calendar calendar33 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long34 = week16.getLastMillisecond(calendar33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1637449200000L + "'", long28 == 1637449200000L);
        org.junit.Assert.assertNotNull(year29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1969) + "'", int32 == (-1969));
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 1, year5);
        java.lang.Class<?> wildcardClass9 = week8.getClass();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        java.util.Date date10 = week7.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date14, timeZone20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date10, timeZone20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date4, timeZone20);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = week24.compareTo((java.lang.Object) week27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (-1) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getYearValue();
        int int8 = week2.getWeek();
        int int9 = week2.getWeek();
        int int10 = week2.getWeek();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        int int21 = week13.getYearValue();
        long long22 = week13.getLastMillisecond();
        boolean boolean23 = week2.equals((java.lang.Object) long22);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.util.Date date6 = week5.getEnd();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            week5.peg(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        long long20 = week2.getSerialIndex();
        java.util.Date date21 = week2.getEnd();
        long long22 = week2.getLastMillisecond();
        java.util.Date date23 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2791L + "'", long20 == 2791L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getFirstMillisecond();
        long long8 = week2.getSerialIndex();
        long long9 = week2.getFirstMillisecond();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week2.getFirstMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506355600000L) + "'", long9 == (-60506355600000L));
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        int int11 = week2.getYearValue();
        int int12 = week2.getYearValue();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week15.next();
        java.util.Date date19 = week15.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date19);
        long long21 = week20.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week20.next();
        boolean boolean23 = week2.equals((java.lang.Object) regularTimePeriod22);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.previous();
        java.util.Date date28 = week26.getEnd();
        long long29 = week26.getSerialIndex();
        int int30 = week26.getWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = week2.compareTo((java.lang.Object) week26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2791L + "'", long29 == 2791L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        long long4 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getFirstMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61126275600001L) + "'", long4 == (-61126275600001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.util.Date date10 = week8.getEnd();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        long long12 = week11.getLastMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = week2.compareTo((java.lang.Object) week11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-59100800400001L) + "'", long12 == (-59100800400001L));
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506355600000L) + "'", long14 == (-60506355600000L));
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.TimeZone timeZone21 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date4, timeZone21);
        java.lang.Class<?> wildcardClass23 = date4.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date18, timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date18);
        long long23 = week22.getLastMillisecond();
        long long24 = week22.getFirstMillisecond();
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = week22.getLastMillisecond(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-59100800400001L) + "'", long23 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-59101405200000L) + "'", long24 == (-59101405200000L));
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        java.util.Date date9 = regularTimePeriod8.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str13 = week12.toString();
        long long14 = week12.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week12.next();
        java.util.Date date16 = regularTimePeriod15.getEnd();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date20 = week19.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date20, timeZone26);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date16, timeZone26);
        java.util.Locale locale30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date9, timeZone26, locale30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 19 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2791L + "'", long14 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        long long21 = week15.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass22 = week15.getClass();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date26 = week25.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass22, date26, timeZone32);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date26);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date26, timeZone41);
        int int44 = week12.compareTo((java.lang.Object) timeZone41);
        java.util.Calendar calendar45 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long46 = week12.getFirstMillisecond(calendar45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506053200001L) + "'", long21 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        java.util.Date date5 = week2.getEnd();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getLastMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.previous();
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = week15.getFirstMillisecond(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        int int22 = week17.getYearValue();
        int int24 = week17.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week17.previous();
        int int26 = week17.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week17.next();
        java.lang.Class<?> wildcardClass28 = regularTimePeriod27.getClass();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        java.lang.Class<?> wildcardClass33 = week31.getClass();
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        java.lang.Class class35 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        int int43 = week38.getYearValue();
        int int45 = week38.compareTo((java.lang.Object) 9);
        java.util.Date date46 = week38.getStart();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date46);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date46, timeZone53);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str59 = week58.toString();
        long long60 = week58.getMiddleMillisecond();
        long long61 = week58.getLastMillisecond();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.next();
        java.lang.Class<?> wildcardClass66 = week64.getClass();
        java.lang.Class class67 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass66);
        int int68 = week58.compareTo((java.lang.Object) wildcardClass66);
        java.lang.Class class69 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass66);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.next();
        java.lang.Class<?> wildcardClass74 = week72.getClass();
        java.lang.Class class75 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass74);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date79 = week78.getStart();
        java.lang.Class class80 = null;
        java.util.Date date81 = null;
        java.util.TimeZone timeZone82 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance(class80, date81, timeZone82);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass74, date79, timeZone82);
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance(class69, date79, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date46, timeZone85);
        java.util.TimeZone timeZone88 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date46, timeZone88);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(class35);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Week 35, 52" + "'", str59, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60506053200001L) + "'", long60 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-60505750800001L) + "'", long61 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(class67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(class69);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(class75);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertNull(regularTimePeriod89);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year11 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        java.lang.String str75 = week73.toString();
        java.lang.Class<?> wildcardClass76 = week73.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Week 35, 52" + "'", str75, "Week 35, 52");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getMiddleMillisecond();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date16);
        java.lang.String str19 = week18.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date5, timeZone6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        java.util.Date date18 = week10.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.previous();
        int int50 = week48.getYearValue();
        java.util.Date date51 = week48.getStart();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date51, timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date36, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date5, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week();
        long long58 = week57.getFirstMillisecond();
        long long59 = week57.getSerialIndex();
        int int60 = week57.getYearValue();
        java.util.Date date61 = week57.getEnd();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date65 = week64.getStart();
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date65);
        java.util.Date date67 = week66.getStart();
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.next();
        int int72 = week70.getYearValue();
        java.util.TimeZone timeZone73 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int74 = week70.compareTo((java.lang.Object) timeZone73);
        int int75 = week70.getYearValue();
        long long76 = week70.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass77 = week70.getClass();
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date81 = week80.getStart();
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = week84.next();
        int int86 = week84.getYearValue();
        java.util.TimeZone timeZone87 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int88 = week84.compareTo((java.lang.Object) timeZone87);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass77, date81, timeZone87);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date67, timeZone87);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date61, timeZone87);
        java.util.Locale locale92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date5, timeZone87, locale92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1637449200000L + "'", long58 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 107161L + "'", long59 == 107161L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2021 + "'", int60 == 2021);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sat Nov 27 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-60506053200001L) + "'", long76 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 52 + "'", int86 == 52);
        org.junit.Assert.assertNotNull(timeZone87);
// flaky:         org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        java.util.Date date12 = week8.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(date12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.util.Date date15 = week13.getEnd();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date15, timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date5, timeZone16);
        java.util.Date date19 = week18.getStart();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506053200001L) + "'", long10 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 20 00:00:00 CET 2020");
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week15.getLastMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.lang.String str7 = week2.toString();
        long long8 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        long long3 = week2.getSerialIndex();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (short) 10, 6);
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 630L + "'", long3 == 630L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getSerialIndex();
        int int15 = week2.compareTo((java.lang.Object) 0.0d);
        java.util.Date date16 = week2.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year17 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        long long19 = week2.getFirstMillisecond();
        java.lang.Object obj20 = null;
        boolean boolean21 = week2.equals(obj20);
        java.lang.Class<?> wildcardClass22 = week2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506355600000L) + "'", long19 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 0, (int) (byte) -1);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Calendar calendar74 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long75 = week73.getFirstMillisecond(calendar74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str23 = week22.toString();
        long long24 = week22.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week22.next();
        java.util.Date date26 = regularTimePeriod25.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date30, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date26, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date6, timeZone36);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        long long49 = week43.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass50 = week43.getClass();
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date54 = week53.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        int int59 = week57.getYearValue();
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int61 = week57.compareTo((java.lang.Object) timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass50, date54, timeZone60);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        java.lang.Class<?> wildcardClass67 = week65.getClass();
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass67);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date72 = week71.getStart();
        java.lang.Class class73 = null;
        java.util.Date date74 = null;
        java.util.TimeZone timeZone75 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance(class73, date74, timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass67, date72, timeZone75);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date81 = week80.getStart();
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date81);
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass67, date81, timeZone83);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date54, timeZone83);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date6, timeZone83);
        java.lang.Class<?> wildcardClass87 = week86.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Week 35, 52" + "'", str23, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2791L + "'", long24 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60506053200001L) + "'", long49 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year6);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        long long21 = week13.getMiddleMillisecond();
        boolean boolean22 = week10.equals((java.lang.Object) week13);
        java.util.Calendar calendar23 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long24 = week13.getLastMillisecond(calendar23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506053200001L) + "'", long21 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        long long12 = week11.getFirstMillisecond();
        java.util.Date date13 = week11.getEnd();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week11.getFirstMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getMiddleMillisecond();
        java.util.Date date15 = week2.getEnd();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str19 = week18.toString();
        long long20 = week18.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week18.next();
        java.util.Date date22 = week18.getEnd();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date22);
        boolean boolean24 = week2.equals((java.lang.Object) date22);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week6.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year6);
        java.util.Date date8 = year6.getStart();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        int int13 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.previous();
        int int10 = week8.getYearValue();
        boolean boolean11 = week4.equals((java.lang.Object) int10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        long long7 = week6.getSerialIndex();
        org.jfree.data.time.Year year8 = week6.getYear();
        java.lang.Class<?> wildcardClass9 = year8.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 107124L + "'", long7 == 107124L);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getFirstMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, (int) '4');
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week((int) (byte) 100, year3);
        java.util.Date date5 = week4.getEnd();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 26 23:59:59 CET 2022");
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.lang.String str12 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        int int43 = week38.getYearValue();
        int int45 = week38.compareTo((java.lang.Object) 9);
        int int46 = week38.getYearValue();
        long long47 = week38.getLastMillisecond();
        int int48 = week38.getWeek();
        java.util.Date date49 = week38.getEnd();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date53 = week52.getStart();
        java.util.Date date54 = week52.getEnd();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date54, timeZone67);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date49, timeZone67);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str75 = week74.toString();
        long long76 = week74.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week74.next();
        java.util.Date date78 = regularTimePeriod77.getEnd();
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date82 = week81.getStart();
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = week85.next();
        int int87 = week85.getYearValue();
        java.util.TimeZone timeZone88 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int89 = week85.compareTo((java.lang.Object) timeZone88);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date82, timeZone88);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date78, timeZone88);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date49, timeZone88);
        java.util.Locale locale93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week94 = new org.jfree.data.time.Week(date13, timeZone88, locale93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-60505750800001L) + "'", long47 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Week 35, 52" + "'", str75, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 2791L + "'", long76 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertNotNull(timeZone88);
// flaky:         org.junit.Assert.assertEquals(timeZone88.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week7.next();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            week7.peg(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        java.lang.Class class7 = null;
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date11 = week10.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.util.Date date16 = week14.getEnd();
        int int17 = week14.getYearValue();
        long long18 = week14.getLastMillisecond();
        java.lang.Class<?> wildcardClass19 = week14.getClass();
        java.util.Date date20 = null;
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date24 = week23.getStart();
        int int25 = week23.getYearValue();
        java.util.Date date26 = week23.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        java.util.Date date44 = week36.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date44, timeZone51);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.previous();
        int int58 = week56.getYearValue();
        java.util.Date date59 = week56.getStart();
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date59, timeZone60);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date44, timeZone60);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date26, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date20, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance(class7, date11, timeZone60);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date6, timeZone60);
        long long67 = week66.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-59100800400001L) + "'", long18 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod64);
        org.junit.Assert.assertNull(regularTimePeriod65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-60505750800000L) + "'", long67 == (-60505750800000L));
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        java.util.Date date6 = week4.getEnd();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week4.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Dec 26 23:59:59 CET 2020");
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, (int) (short) -1);
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        java.lang.Class<?> wildcardClass8 = week6.getClass();
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass8);
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass8);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date14, timeZone20);
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date14, timeZone23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.previous();
        int int29 = week27.getYearValue();
        java.util.Date date30 = week27.getStart();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date14, timeZone31);
        java.util.Locale locale34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date3, timeZone31, locale34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 16 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod33);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        int int3 = week2.getWeek();
        java.util.Date date4 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.previous();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        int int14 = week12.getYearValue();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int16 = week12.compareTo((java.lang.Object) timeZone15);
        int int17 = week12.getYearValue();
        int int19 = week12.compareTo((java.lang.Object) 9);
        int int20 = week12.getYearValue();
        long long21 = week12.getLastMillisecond();
        int int22 = week12.getWeek();
        java.util.Date date23 = week12.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        java.util.Date date28 = week26.getEnd();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        java.lang.Class<?> wildcardClass33 = week31.getClass();
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.lang.Class class39 = null;
        java.util.Date date40 = null;
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance(class39, date40, timeZone41);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date38, timeZone41);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date28, timeZone41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date23, timeZone41);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date9, timeZone41);
        java.util.Locale locale47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date4, timeZone41, locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Nov 21 00:00:00 CET 101");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Date date74 = week73.getEnd();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        int int79 = week77.getYearValue();
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int81 = week77.compareTo((java.lang.Object) timeZone80);
        int int82 = week77.getYearValue();
        int int84 = week77.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = week77.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = week77.next();
        java.util.Date date87 = week77.getStart();
        java.lang.String str88 = week77.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = week77.previous();
        // The following exception was thrown during execution in test generation
        try {
            int int90 = week73.compareTo((java.lang.Object) regularTimePeriod89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Week 35, 52" + "'", str88, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod89);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        long long6 = week4.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.next();
        long long8 = week4.getLastMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59101405200000L) + "'", long6 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-59100800400001L) + "'", long8 == (-59100800400001L));
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.lang.String str7 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = regularTimePeriod8.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        int int14 = week2.getWeek();
        java.lang.String str15 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date13, timeZone19);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        int int26 = week24.getYearValue();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int28 = week24.compareTo((java.lang.Object) timeZone27);
        int int29 = week24.getYearValue();
        int int31 = week24.compareTo((java.lang.Object) 9);
        java.util.Date date32 = week24.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        int int47 = week42.getYearValue();
        int int49 = week42.compareTo((java.lang.Object) 9);
        java.util.Date date50 = week42.getStart();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass37, date50, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.previous();
        int int64 = week62.getYearValue();
        java.util.Date date65 = week62.getStart();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date65, timeZone66);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date50, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date32, timeZone66);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date13, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.next();
        java.util.Date date72 = regularTimePeriod71.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Mar 05 00:00:00 CET 97");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getEnd();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date7);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week8.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.Class<?> wildcardClass6 = regularTimePeriod5.getClass();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        int int27 = week22.getYearValue();
        int int29 = week22.compareTo((java.lang.Object) 9);
        java.util.Date date30 = week22.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass17, date30, timeZone37);
        java.util.Date date40 = regularTimePeriod39.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        int int50 = week43.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week43.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week43.next();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        java.lang.Class<?> wildcardClass57 = week55.getClass();
        java.lang.Class class58 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        boolean boolean60 = week43.equals((java.lang.Object) wildcardClass57);
        java.lang.Class class61 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date65 = week64.getStart();
        java.util.Date date66 = week64.getEnd();
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.next();
        java.lang.Class<?> wildcardClass71 = week69.getClass();
        java.lang.Class class72 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass71);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date76 = week75.getStart();
        java.lang.Class class77 = null;
        java.util.Date date78 = null;
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = org.jfree.data.time.RegularTimePeriod.createInstance(class77, date78, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass71, date76, timeZone79);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date66, timeZone79);
        java.lang.Class class83 = null;
        java.util.Date date84 = null;
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance(class83, date84, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance(class61, date66, timeZone85);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date40, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass6, date11, timeZone85);
        java.lang.Class<?> wildcardClass90 = timeZone85.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(class58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(class61);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(class72);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod80);
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod86);
        org.junit.Assert.assertNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 10, (int) (byte) 100);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getFirstMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        int int25 = week16.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week16.next();
        java.lang.Class<?> wildcardClass27 = regularTimePeriod26.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        java.util.Date date45 = week37.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date45, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str58 = week57.toString();
        long long59 = week57.getMiddleMillisecond();
        long long60 = week57.getLastMillisecond();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        int int67 = week57.compareTo((java.lang.Object) wildcardClass65);
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        java.lang.Class<?> wildcardClass73 = week71.getClass();
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.lang.Class class79 = null;
        java.util.Date date80 = null;
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date80, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass73, date78, timeZone81);
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date78, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date45, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date13, timeZone84);
        int int88 = week87.getWeek();
        int int89 = week87.getYearValue();
        java.lang.Class<?> wildcardClass90 = week87.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date18, timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date18);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        int int30 = week25.getYearValue();
        int int32 = week25.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week25.previous();
        int int34 = week25.getYearValue();
        long long35 = week25.getLastMillisecond();
        int int36 = week25.getWeek();
        int int37 = week25.getYearValue();
        int int38 = week22.compareTo((java.lang.Object) int37);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60505750800001L) + "'", long35 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getFirstMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        int int14 = week2.getYearValue();
        long long15 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60505750800001L) + "'", long15 == (-60505750800001L));
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getFirstMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week4.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        int int22 = week17.getYearValue();
        int int24 = week17.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week17.previous();
        int int26 = week17.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week17.next();
        java.lang.Class<?> wildcardClass28 = regularTimePeriod27.getClass();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        int int36 = week31.getYearValue();
        int int38 = week31.compareTo((java.lang.Object) 9);
        int int39 = week31.getYearValue();
        long long40 = week31.getLastMillisecond();
        int int41 = week31.getWeek();
        java.util.Date date42 = week31.getEnd();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        java.util.Date date47 = week45.getEnd();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        java.lang.Class<?> wildcardClass52 = week50.getClass();
        java.lang.Class class53 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date57 = week56.getStart();
        java.lang.Class class58 = null;
        java.util.Date date59 = null;
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance(class58, date59, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass52, date57, timeZone60);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date47, timeZone60);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date42, timeZone60);
        java.util.Date date65 = week64.getStart();
        java.lang.Class class66 = null;
        java.util.Date date67 = null;
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance(class66, date67, timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date65, timeZone68);
        java.util.Locale locale71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(date13, timeZone68, locale71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-60505750800001L) + "'", long40 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(class53);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        long long16 = week15.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week15.next();
        java.util.Date date18 = regularTimePeriod17.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5150L + "'", long16 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 11 23:59:59 CET 97");
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        int int16 = week4.getYearValue();
        int int17 = week4.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date18 = week17.getStart();
        int int19 = week17.getYearValue();
        java.util.Date date20 = week17.getEnd();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        int int31 = week23.getYearValue();
        long long32 = week23.getLastMillisecond();
        int int33 = week23.getWeek();
        java.util.Date date34 = week23.getEnd();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.lang.Class class50 = null;
        java.util.Date date51 = null;
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date51, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date49, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date39, timeZone52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date34, timeZone52);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str60 = week59.toString();
        long long61 = week59.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week59.next();
        java.util.Date date63 = regularTimePeriod62.getEnd();
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date67 = week66.getStart();
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.next();
        int int72 = week70.getYearValue();
        java.util.TimeZone timeZone73 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int74 = week70.compareTo((java.lang.Object) timeZone73);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date67, timeZone73);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date63, timeZone73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date34, timeZone73);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date20, timeZone73);
        java.util.TimeZone timeZone79 = null;
        java.util.Locale locale80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date20, timeZone79, locale80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60505750800001L) + "'", long32 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Week 35, 52" + "'", str60, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 2791L + "'", long61 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week();
        long long14 = week13.getFirstMillisecond();
        org.jfree.data.time.Year year15 = week13.getYear();
        int int16 = week13.getWeek();
        int int17 = week13.getWeek();
        int int18 = week2.compareTo((java.lang.Object) week13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week13.next();
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = regularTimePeriod19.getMiddleMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1637449200000L + "'", long14 == 1637449200000L);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1969) + "'", int18 == (-1969));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        java.util.Date date23 = week15.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date23, timeZone30);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.previous();
        int int37 = week35.getYearValue();
        java.util.Date date38 = week35.getStart();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date38, timeZone39);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date23, timeZone39);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date5, timeZone39);
        java.util.Date date43 = week42.getEnd();
        long long44 = week42.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60506053200001L) + "'", long44 == (-60506053200001L));
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        java.lang.Class<?> wildcardClass29 = week27.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        int int39 = week34.getYearValue();
        int int41 = week34.compareTo((java.lang.Object) 9);
        java.util.Date date42 = week34.getStart();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        int int48 = week46.getYearValue();
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int50 = week46.compareTo((java.lang.Object) timeZone49);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass29, date42, timeZone49);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date55 = week54.getStart();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date55);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.next();
        java.lang.Class<?> wildcardClass61 = week59.getClass();
        java.lang.Class class62 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass61);
        java.lang.Class class63 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass61);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.next();
        int int68 = week66.getYearValue();
        java.util.TimeZone timeZone69 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int70 = week66.compareTo((java.lang.Object) timeZone69);
        int int71 = week66.getYearValue();
        int int73 = week66.compareTo((java.lang.Object) 9);
        java.util.Date date74 = week66.getStart();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date74);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = week78.next();
        int int80 = week78.getYearValue();
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int82 = week78.compareTo((java.lang.Object) timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass61, date74, timeZone81);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week86.previous();
        int int88 = week86.getYearValue();
        java.util.Date date89 = week86.getStart();
        java.util.TimeZone timeZone90 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date89, timeZone90);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date74, timeZone90);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass29, date55, timeZone90);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance(class20, date24, timeZone90);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(class62);
        org.junit.Assert.assertNotNull(class63);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone90);
// flaky:         org.junit.Assert.assertEquals(timeZone90.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod93);
        org.junit.Assert.assertNull(regularTimePeriod94);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, 2022);
        long long3 = week2.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1700348400000L + "'", long3 == 1700348400000L);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(class15);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        java.util.Date date8 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date12 = week11.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date12, timeZone18);
        java.util.Locale locale21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date8, timeZone18, locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        java.lang.String str13 = week2.toString();
        long long14 = week2.getMiddleMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year15 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        long long75 = week73.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week73.next();
        java.util.Calendar calendar77 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long78 = regularTimePeriod76.getMiddleMillisecond(calendar77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2791L + "'", long75 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, (int) (short) -1);
        long long3 = week2.getMiddleMillisecond();
        int int4 = week2.getWeek();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62194654800001L) + "'", long3 == (-62194654800001L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(52, year3);
        java.util.Date date5 = year3.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str10 = week9.toString();
        long long11 = week9.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        java.util.Date date13 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date18 = week17.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.util.Date date23 = week21.getEnd();
        int int24 = week21.getYearValue();
        long long25 = week21.getLastMillisecond();
        java.lang.Class<?> wildcardClass26 = week21.getClass();
        java.util.Date date27 = null;
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date31 = week30.getStart();
        int int32 = week30.getYearValue();
        java.util.Date date33 = week30.getEnd();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        java.lang.Class<?> wildcardClass38 = week36.getClass();
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass38);
        java.lang.Class class40 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        int int50 = week43.compareTo((java.lang.Object) 9);
        java.util.Date date51 = week43.getStart();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date51);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        int int57 = week55.getYearValue();
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int59 = week55.compareTo((java.lang.Object) timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass38, date51, timeZone58);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.previous();
        int int65 = week63.getYearValue();
        java.util.Date date66 = week63.getStart();
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date66, timeZone67);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date51, timeZone67);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date33, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date27, timeZone67);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(date18, timeZone67);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date13, timeZone67);
        java.util.Locale locale74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date5, timeZone67, locale74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-59100800400001L) + "'", long25 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertNotNull(class40);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(52, year3);
        java.util.Date date5 = year3.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        java.util.TimeZone timeZone7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date5, timeZone7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week7.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date9 = year5.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week10.getLastMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Dec 31 23:59:59 CET 2021");
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.lang.String str9 = week7.toString();
        long long10 = week7.getSerialIndex();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            week7.peg(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 0);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getFirstMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        org.junit.Assert.assertNull(regularTimePeriod3);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        java.lang.Class<?> wildcardClass8 = regularTimePeriod7.getClass();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date12 = week11.getStart();
        java.util.Date date13 = week11.getEnd();
        int int14 = week11.getYearValue();
        java.util.Date date15 = week11.getStart();
        int int16 = week11.getWeek();
        java.util.Date date17 = week11.getStart();
        java.util.TimeZone timeZone18 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass8, date17, timeZone18);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNull(regularTimePeriod19);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        java.util.Date date9 = regularTimePeriod8.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 13 00:00:00 CET 52");
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        java.lang.String str8 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize(class73);
        java.lang.Class class75 = org.jfree.data.time.RegularTimePeriod.downsize(class74);
        java.lang.Class class76 = org.jfree.data.time.RegularTimePeriod.downsize(class75);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(class75);
        org.junit.Assert.assertNotNull(class76);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((-1969), year4);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week7.getFirstMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getLastMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        long long14 = week2.getLastMillisecond();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week2.getFirstMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        java.util.Date date21 = week13.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        boolean boolean24 = week7.equals((java.lang.Object) week22);
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            week7.peg(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date3);
        java.lang.Class<?> wildcardClass13 = date3.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        long long20 = week2.getSerialIndex();
        java.util.Date date21 = week2.getEnd();
        java.lang.Class class22 = null;
        java.util.Date date23 = null;
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date23, timeZone24);
        java.util.Locale locale26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date21, timeZone24, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2791L + "'", long20 == 2791L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod25);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year8 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(48, 5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = regularTimePeriod3.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 21 23:59:59 CET 5");
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        int int13 = week2.getYearValue();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week2.getMiddleMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week30.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week30.next();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        boolean boolean47 = week30.equals((java.lang.Object) wildcardClass44);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        java.lang.Class class64 = null;
        java.util.Date date65 = null;
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date65, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date63, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date53, timeZone66);
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date53, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date27, timeZone72);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = week81.next();
        long long83 = week81.getMiddleMillisecond();
        java.lang.String str84 = week81.toString();
        boolean boolean85 = week78.equals((java.lang.Object) week81);
        int int86 = week81.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week81.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = week81.previous();
        boolean boolean89 = week75.equals((java.lang.Object) week81);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year90 = week75.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-60506053200001L) + "'", long83 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Week 35, 52" + "'", str84, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.next();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week2.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year19 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str7 = week6.toString();
        long long8 = week6.getMiddleMillisecond();
        long long9 = week6.getLastMillisecond();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        int int16 = week6.compareTo((java.lang.Object) wildcardClass14);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        java.lang.Class<?> wildcardClass22 = week20.getClass();
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        java.lang.Class class28 = null;
        java.util.Date date29 = null;
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = org.jfree.data.time.RegularTimePeriod.createInstance(class28, date29, timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass22, date27, timeZone30);
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = org.jfree.data.time.RegularTimePeriod.createInstance(class17, date27, timeZone33);
        java.util.Locale locale35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date3, timeZone33, locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60505750800001L) + "'", long9 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod34);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        boolean boolean7 = week2.equals((java.lang.Object) 0L);
        long long8 = week2.getLastMillisecond();
        long long9 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-59100800400001L) + "'", long8 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-59100800400001L) + "'", long9 == (-59100800400001L));
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getSerialIndex();
        int int3 = week0.getYearValue();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week0.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107161L + "'", long2 == 107161L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2021 + "'", int3 == 2021);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        java.util.Date date19 = week2.getEnd();
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        java.util.Date date13 = week2.getStart();
        int int14 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Nov 22 00:00:00 CET 11");
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        long long16 = week10.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass17 = week10.getClass();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        int int26 = week24.getYearValue();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int28 = week24.compareTo((java.lang.Object) timeZone27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass17, date21, timeZone27);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        int int37 = week32.getYearValue();
        int int39 = week32.compareTo((java.lang.Object) 9);
        java.util.Date date40 = week32.getStart();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date21, timeZone74);
        java.util.Locale locale79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date7, timeZone74, locale79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            week11.peg(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int15 = week2.compareTo((java.lang.Object) 0);
        long long16 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506355600000L) + "'", long16 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        long long3 = week2.getMiddleMillisecond();
        long long4 = week2.getFirstMillisecond();
        int int5 = week2.getWeek();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-60506053200001L) + "'", long3 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506355600000L) + "'", long4 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 0, 2022);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week3.next();
        int int5 = week3.getYearValue();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int7 = week3.compareTo((java.lang.Object) timeZone6);
        int int8 = week3.getYearValue();
        long long9 = week3.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass10 = week3.getClass();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date14, timeZone20);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date26 = week25.getStart();
        java.util.Date date27 = week25.getEnd();
        java.util.Date date28 = week25.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.util.Date date33 = week31.getEnd();
        java.util.Date date34 = week31.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        int int43 = week41.getYearValue();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int45 = week41.compareTo((java.lang.Object) timeZone44);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date38, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date34, timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date28, timeZone44);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date0, timeZone44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        java.lang.String str75 = week73.toString();
        int int76 = week73.getWeek();
        java.util.Date date77 = week73.getStart();
        java.util.Calendar calendar78 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long79 = week73.getMiddleMillisecond(calendar78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Week 35, 52" + "'", str75, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        int int15 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year6);
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            week10.peg(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        long long4 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.util.Date date6 = week5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        long long13 = week9.getLastMillisecond();
        boolean boolean14 = week5.equals((java.lang.Object) week9);
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week9.getFirstMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-59100800400001L) + "'", long13 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) 'a', 8);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getYearValue();
        int int6 = week2.getWeek();
        long long7 = week2.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        long long6 = regularTimePeriod5.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59101707600001L) + "'", long6 == (-59101707600001L));
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) 'a', 0);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        long long5 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59101405200000L) + "'", long5 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date31);
        java.util.Date date75 = week74.getEnd();
        java.util.Calendar calendar76 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long77 = week74.getFirstMillisecond(calendar76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2, (int) (byte) 0);
        java.lang.String str3 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 2, 0" + "'", str3, "Week 2, 0");
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.previous();
        long long22 = week19.getSerialIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2792L + "'", long22 == 2792L);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week2.previous();
        java.util.Date date22 = regularTimePeriod21.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Aug 13 00:00:00 CET 52");
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year6);
        long long8 = week7.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week7.next();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1667080800000L + "'", long8 == 1667080800000L);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) (byte) 100, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (short) 10, year4);
        long long7 = week6.getLastMillisecond();
        long long8 = week6.getSerialIndex();
        int int9 = week6.getYearValue();
        java.util.Date date10 = week6.getStart();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1615071599999L + "'", long7 == 1615071599999L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 107123L + "'", long8 == 107123L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2021 + "'", int9 == 2021);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 28 00:00:00 CET 2021");
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Year year8 = week7.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (byte) 100, year8);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(year8);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.lang.Class class16 = null;
        java.util.Date date17 = null;
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date17, timeZone18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date15, timeZone18);
        java.lang.Class<?> wildcardClass21 = timeZone18.getClass();
        boolean boolean22 = week2.equals((java.lang.Object) wildcardClass21);
        java.util.Date date23 = week2.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date23);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week6.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        int int13 = week2.getYearValue();
        long long14 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getWeek();
        int int17 = week2.getWeek();
        java.lang.String str18 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getFirstMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date10 = week9.getStart();
        int int11 = week9.getYearValue();
        java.util.Date date12 = week9.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.previous();
        int int17 = week15.getYearValue();
        java.util.Date date18 = week15.getStart();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date18, timeZone19);
        java.lang.Class<?> wildcardClass21 = timeZone19.getClass();
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str26 = week25.toString();
        long long27 = week25.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week25.next();
        java.util.Date date29 = regularTimePeriod28.getEnd();
        java.util.Date date30 = regularTimePeriod28.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str34 = week33.toString();
        long long35 = week33.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week33.next();
        java.util.Date date37 = week33.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        java.util.Date date43 = week42.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        int int48 = week46.getYearValue();
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int50 = week46.compareTo((java.lang.Object) timeZone49);
        int int51 = week46.getYearValue();
        long long52 = week46.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass53 = week46.getClass();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date57 = week56.getStart();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.next();
        int int62 = week60.getYearValue();
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int64 = week60.compareTo((java.lang.Object) timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass53, date57, timeZone63);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date43, timeZone63);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date37, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date30, timeZone63);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date12, timeZone63);
        int int70 = week69.getYearValue();
        int int71 = week2.compareTo((java.lang.Object) int70);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Week 35, 52" + "'", str26, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2791L + "'", long27 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Week 35, 52" + "'", str34, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60506053200001L) + "'", long35 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60506053200001L) + "'", long52 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.previous();
        long long20 = regularTimePeriod19.getMiddleMillisecond();
        long long21 = regularTimePeriod19.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506658000001L) + "'", long20 == (-60506658000001L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506658000001L) + "'", long21 == (-60506658000001L));
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        long long16 = week14.getMiddleMillisecond();
        int int17 = week14.getWeek();
        long long18 = week14.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = week2.compareTo((java.lang.Object) week14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        int int3 = week0.getWeek();
        long long4 = week0.getLastMillisecond();
        long long5 = week0.getFirstMillisecond();
        java.util.Date date6 = week0.getEnd();
        org.jfree.data.time.Year year7 = week0.getYear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1638053999999L + "'", long4 == 1638053999999L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 27 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(year7);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        int int13 = week2.getYearValue();
        long long14 = week2.getLastMillisecond();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week2.getMiddleMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        long long6 = week4.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.previous();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1608721199999L + "'", long6 == 1608721199999L);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        int int8 = week2.getWeek();
        java.util.Date date9 = week2.getStart();
        java.util.Date date10 = week2.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str14 = week13.toString();
        long long15 = week13.getMiddleMillisecond();
        long long16 = week13.getLastMillisecond();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        java.lang.Class<?> wildcardClass21 = week19.getClass();
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        int int23 = week13.compareTo((java.lang.Object) wildcardClass21);
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date29 = week28.getStart();
        int int30 = week28.getYearValue();
        java.util.Date date31 = week28.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        int int39 = week34.getYearValue();
        int int41 = week34.compareTo((java.lang.Object) 9);
        int int42 = week34.getYearValue();
        long long43 = week34.getLastMillisecond();
        int int44 = week34.getWeek();
        java.util.Date date45 = week34.getEnd();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.util.Date date50 = week48.getEnd();
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        java.lang.Class<?> wildcardClass55 = week53.getClass();
        java.lang.Class class56 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass55);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date60 = week59.getStart();
        java.lang.Class class61 = null;
        java.util.Date date62 = null;
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance(class61, date62, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass55, date60, timeZone63);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date50, timeZone63);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date45, timeZone63);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str71 = week70.toString();
        long long72 = week70.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week70.next();
        java.util.Date date74 = regularTimePeriod73.getEnd();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = week81.next();
        int int83 = week81.getYearValue();
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int85 = week81.compareTo((java.lang.Object) timeZone84);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date78, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date74, timeZone84);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date45, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass21, date31, timeZone84);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date10, timeZone84);
        long long91 = week90.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod92 = week90.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506053200001L) + "'", long15 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60505750800001L) + "'", long43 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(class56);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Week 35, 52" + "'", str71, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 2791L + "'", long72 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-60506355600000L) + "'", long91 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod92);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.lang.String str12 = week2.toString();
        long long13 = week2.getFirstMillisecond();
        java.lang.String str14 = week2.toString();
        int int15 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506355600000L) + "'", long13 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        java.lang.Class<?> wildcardClass15 = regularTimePeriod14.getClass();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        long long19 = week18.getSerialIndex();
        java.util.Date date20 = week18.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str24 = week23.toString();
        long long25 = week23.getMiddleMillisecond();
        long long26 = week23.getLastMillisecond();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        int int33 = week23.compareTo((java.lang.Object) wildcardClass31);
        long long34 = week23.getMiddleMillisecond();
        java.util.Date date35 = week23.getEnd();
        int int36 = week23.getWeek();
        long long37 = week23.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week23.next();
        long long39 = week23.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week23.next();
        java.util.Date date41 = week23.getStart();
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.next();
        int int46 = week44.getYearValue();
        java.util.TimeZone timeZone47 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int48 = week44.compareTo((java.lang.Object) timeZone47);
        int int49 = week44.getYearValue();
        int int51 = week44.compareTo((java.lang.Object) 9);
        java.util.Date date52 = week44.getStart();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        java.lang.Class<?> wildcardClass57 = week55.getClass();
        java.lang.Class class58 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        int int67 = week62.getYearValue();
        int int69 = week62.compareTo((java.lang.Object) 9);
        java.util.Date date70 = week62.getStart();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date70);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = week74.next();
        int int76 = week74.getYearValue();
        java.util.TimeZone timeZone77 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int78 = week74.compareTo((java.lang.Object) timeZone77);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass57, date70, timeZone77);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = week82.previous();
        int int84 = week82.getYearValue();
        java.util.Date date85 = week82.getStart();
        java.util.TimeZone timeZone86 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date85, timeZone86);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date70, timeZone86);
        org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(date52, timeZone86);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date41, timeZone86);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod91 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date20, timeZone86);
        java.lang.Class class92 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1748L + "'", long19 == 1748L);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Week 35, 52" + "'", str24, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60506053200001L) + "'", long25 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60505750800001L) + "'", long26 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60506053200001L) + "'", long34 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60505750800001L) + "'", long37 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60506355600000L) + "'", long39 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(class58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertNotNull(timeZone77);
// flaky:         org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone86);
// flaky:         org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod91);
        org.junit.Assert.assertNotNull(class92);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        long long10 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 1, year4);
        long long7 = week6.getMiddleMillisecond();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week6.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1609325999999L + "'", long7 == 1609325999999L);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        long long14 = week2.getFirstMillisecond();
        java.lang.String str15 = week2.toString();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506355600000L) + "'", long14 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        long long10 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        long long12 = week2.getMiddleMillisecond();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getFirstMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 10);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week4.next();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 30 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        java.util.Date date8 = week2.getStart();
        long long9 = week2.getMiddleMillisecond();
        int int10 = week2.getYearValue();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week2.getLastMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-59101102800001L) + "'", long9 == (-59101102800001L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(12, (int) (short) 0);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        java.util.Date date5 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.lang.Class class16 = null;
        java.util.Date date17 = null;
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date17, timeZone18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date15, timeZone18);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date15);
        long long22 = week21.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week21.next();
        java.lang.Class<?> wildcardClass24 = regularTimePeriod23.getClass();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        int int32 = week27.getYearValue();
        int int34 = week27.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week27.previous();
        int int36 = week27.getYearValue();
        long long37 = week27.getLastMillisecond();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        java.lang.Class<?> wildcardClass42 = week40.getClass();
        java.lang.Class class43 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass42);
        boolean boolean44 = week27.equals((java.lang.Object) wildcardClass42);
        int int45 = week27.getYearValue();
        java.lang.Object obj46 = null;
        int int47 = week27.compareTo(obj46);
        long long48 = week27.getSerialIndex();
        java.util.Date date49 = week27.getEnd();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str53 = week52.toString();
        long long54 = week52.getMiddleMillisecond();
        long long55 = week52.getLastMillisecond();
        long long56 = week52.getFirstMillisecond();
        java.util.Date date57 = week52.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week52.next();
        java.util.Date date59 = week52.getEnd();
        java.util.Date date60 = week52.getStart();
        java.lang.Class class61 = null;
        java.util.Date date62 = null;
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance(class61, date62, timeZone63);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date60, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass24, date49, timeZone63);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date5, timeZone63);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 12, 0" + "'", str4, "Week 12, 0");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 14 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5150L + "'", long22 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60505750800001L) + "'", long37 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(class43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2791L + "'", long48 == 2791L);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Week 35, 52" + "'", str53, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-60506053200001L) + "'", long54 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-60505750800001L) + "'", long55 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-60506355600000L) + "'", long56 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date13, timeZone19);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        java.lang.Class<?> wildcardClass26 = week24.getClass();
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass26);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.lang.Class class32 = null;
        java.util.Date date33 = null;
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance(class32, date33, timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date31, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date40 = week39.getStart();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date40);
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date40, timeZone42);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date13, timeZone42);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date13);
        java.lang.String str46 = week45.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Week 9, 97" + "'", str46, "Week 9, 97");
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        long long16 = week14.getMiddleMillisecond();
        java.lang.String str17 = week14.toString();
        boolean boolean18 = week11.equals((java.lang.Object) week14);
        java.util.Date date19 = week11.getStart();
        int int20 = week2.compareTo((java.lang.Object) date19);
        long long21 = week2.getSerialIndex();
        java.util.Calendar calendar22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = week2.getLastMillisecond(calendar22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2791L + "'", long21 == 2791L);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        java.lang.Class<?> wildcardClass13 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(12, (int) (short) 0);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        java.util.Date date5 = week2.getStart();
        long long6 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 12, 0" + "'", str4, "Week 12, 0");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 14 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-62160483600001L) + "'", long6 == (-62160483600001L));
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(32, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        long long75 = week73.getSerialIndex();
        long long76 = week73.getLastMillisecond();
        long long77 = week73.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week73.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2791L + "'", long75 == 2791L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-60505750800001L) + "'", long76 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-60505750800001L) + "'", long77 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod78);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        int int36 = week31.getYearValue();
        int int38 = week31.compareTo((java.lang.Object) 9);
        int int39 = week31.getYearValue();
        java.lang.String str40 = week31.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week31.next();
        java.util.Date date42 = week31.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        int int50 = week45.getYearValue();
        long long51 = week45.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass52 = week45.getClass();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.next();
        int int61 = week59.getYearValue();
        java.util.TimeZone timeZone62 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int63 = week59.compareTo((java.lang.Object) timeZone62);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass52, date56, timeZone62);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date68 = week67.getStart();
        java.util.Date date69 = week67.getEnd();
        java.util.Date date70 = week67.getStart();
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date74 = week73.getStart();
        java.util.Date date75 = week73.getEnd();
        java.util.Date date76 = week73.getStart();
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date80 = week79.getStart();
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = week83.next();
        int int85 = week83.getYearValue();
        java.util.TimeZone timeZone86 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int87 = week83.compareTo((java.lang.Object) timeZone86);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date80, timeZone86);
        org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(date76, timeZone86);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod90 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass52, date70, timeZone86);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date42, timeZone86);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date17, timeZone86);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Week 35, 52" + "'", str40, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60506053200001L) + "'", long51 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertNotNull(timeZone86);
// flaky:         org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod90);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 4);
        long long3 = week2.getFirstMillisecond();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62041942800000L) + "'", long3 == (-62041942800000L));
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        java.lang.String str8 = week2.toString();
        java.util.Date date9 = week2.getEnd();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        long long19 = week2.getLastMillisecond();
        int int20 = week2.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60505750800001L) + "'", long19 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        java.util.Date date25 = week23.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        java.lang.Class class36 = null;
        java.util.Date date37 = null;
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance(class36, date37, timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass30, date35, timeZone38);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date25, timeZone38);
        java.lang.Class class42 = null;
        java.util.Date date43 = null;
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance(class42, date43, timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance(class20, date25, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date25);
        long long48 = week47.getMiddleMillisecond();
        long long49 = week47.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod45);
        org.junit.Assert.assertNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-59101102800001L) + "'", long48 == (-59101102800001L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 5150L + "'", long49 == 5150L);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getYearValue();
        int int8 = week2.getWeek();
        int int9 = week2.getWeek();
        int int10 = week2.getWeek();
        long long11 = week2.getSerialIndex();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date15 = week14.getStart();
        int int16 = week14.getYearValue();
        java.util.Date date17 = week14.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        java.lang.Class<?> wildcardClass22 = week20.getClass();
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        int int32 = week27.getYearValue();
        int int34 = week27.compareTo((java.lang.Object) 9);
        java.util.Date date35 = week27.getStart();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date35);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        int int41 = week39.getYearValue();
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int43 = week39.compareTo((java.lang.Object) timeZone42);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass22, date35, timeZone42);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.previous();
        int int49 = week47.getYearValue();
        java.util.Date date50 = week47.getStart();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date50, timeZone51);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date35, timeZone51);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date17, timeZone51);
        java.util.Date date55 = week54.getEnd();
        boolean boolean56 = week2.equals((java.lang.Object) date55);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2791L + "'", long11 == 2791L);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        int int12 = week9.getYearValue();
        java.util.Date date13 = week9.getStart();
        long long14 = week9.getLastMillisecond();
        boolean boolean15 = week2.equals((java.lang.Object) week9);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year16 = week9.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-59100800400001L) + "'", long14 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week30.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week30.next();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        boolean boolean47 = week30.equals((java.lang.Object) wildcardClass44);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        java.lang.Class class64 = null;
        java.util.Date date65 = null;
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date65, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date63, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date53, timeZone66);
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date53, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date27, timeZone72);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = week81.next();
        long long83 = week81.getMiddleMillisecond();
        java.lang.String str84 = week81.toString();
        boolean boolean85 = week78.equals((java.lang.Object) week81);
        int int86 = week81.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week81.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = week81.previous();
        boolean boolean89 = week75.equals((java.lang.Object) week81);
        long long90 = week81.getLastMillisecond();
        java.lang.String str91 = week81.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod92 = week81.next();
        int int93 = week81.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-60506053200001L) + "'", long83 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Week 35, 52" + "'", str84, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-60505750800001L) + "'", long90 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Week 35, 52" + "'", str91, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 52 + "'", int93 == 52);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(32, (int) (short) 100);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.next();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = regularTimePeriod4.getMiddleMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 08 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week8.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week8.next();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        java.lang.Class<?> wildcardClass22 = week20.getClass();
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        boolean boolean25 = week8.equals((java.lang.Object) wildcardClass22);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        boolean boolean27 = week2.equals((java.lang.Object) class26);
        long long28 = week2.getLastMillisecond();
        int int29 = week2.getYearValue();
        java.util.Calendar calendar30 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long31 = week2.getMiddleMillisecond(calendar30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-61126275600001L) + "'", long28 == (-61126275600001L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week16.next();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        boolean boolean33 = week16.equals((java.lang.Object) wildcardClass30);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.lang.Class class50 = null;
        java.util.Date date51 = null;
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date51, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date49, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date39, timeZone52);
        java.lang.Class class56 = null;
        java.util.Date date57 = null;
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance(class56, date57, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date39, timeZone58);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date13, timeZone58);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str65 = week64.toString();
        long long66 = week64.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week64.next();
        java.util.Date date68 = regularTimePeriod67.getEnd();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date72 = week71.getStart();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        int int77 = week75.getYearValue();
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int79 = week75.compareTo((java.lang.Object) timeZone78);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date72, timeZone78);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date68, timeZone78);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date13, timeZone78);
        long long83 = week82.getFirstMillisecond();
        java.lang.String str84 = week82.toString();
        long long85 = week82.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod59);
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Week 35, 52" + "'", str65, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2791L + "'", long66 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-60506355600000L) + "'", long83 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Week 35, 52" + "'", str84, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-60506355600000L) + "'", long85 == (-60506355600000L));
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 35, -1");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-2019), 35);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int6 = week2.getYearValue();
        java.util.Date date7 = week2.getEnd();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.lang.String str16 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        java.lang.String str18 = week2.toString();
        java.lang.Class<?> wildcardClass19 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.previous();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        java.util.Date date14 = week12.getEnd();
        java.util.Date date15 = week12.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date19, timeZone25);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date15, timeZone25);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date9, timeZone25);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date9);
        java.lang.Class<?> wildcardClass31 = week30.getClass();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(0, 0);
        long long35 = week34.getLastMillisecond();
        long long36 = week34.getLastMillisecond();
        java.util.Date date37 = week34.getStart();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        int int43 = week42.getWeek();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.util.Date date46 = null;
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.previous();
        int int51 = week49.getYearValue();
        java.util.Date date52 = week49.getStart();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date52, timeZone53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = org.jfree.data.time.RegularTimePeriod.createInstance(class45, date46, timeZone53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date37, timeZone53);
        java.util.Locale locale57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date3, timeZone53, locale57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-62167741200001L) + "'", long35 == (-62167741200001L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-62167741200001L) + "'", long36 == (-62167741200001L));
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 21 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.lang.Object obj14 = null;
        int int15 = week2.compareTo(obj14);
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getMiddleMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date13, timeZone19);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        java.lang.Class<?> wildcardClass26 = week24.getClass();
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass26);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.lang.Class class32 = null;
        java.util.Date date33 = null;
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance(class32, date33, timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date31, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date40 = week39.getStart();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date40);
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date40, timeZone42);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date13, timeZone42);
        int int45 = week44.getYearValue();
        int int46 = week44.getWeek();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        long long51 = week49.getMiddleMillisecond();
        java.lang.String str52 = week49.toString();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        java.lang.Class<?> wildcardClass57 = week55.getClass();
        java.lang.Class class58 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date62 = week61.getStart();
        java.lang.Class class63 = null;
        java.util.Date date64 = null;
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance(class63, date64, timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass57, date62, timeZone65);
        java.lang.Class<?> wildcardClass68 = timeZone65.getClass();
        boolean boolean69 = week49.equals((java.lang.Object) wildcardClass68);
        java.lang.Class class70 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass68);
        int int71 = week44.compareTo((java.lang.Object) wildcardClass68);
        java.lang.Class class72 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass68);
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize(class72);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60506053200001L) + "'", long51 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Week 35, 52" + "'", str52, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(class58);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod66);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(class70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(class72);
        org.junit.Assert.assertNotNull(class73);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        java.util.Date date7 = week6.getEnd();
        long long8 = week6.getMiddleMillisecond();
        long long9 = week6.getFirstMillisecond();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week6.getLastMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Mar 13 23:59:59 CET 2021");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1615373999999L + "'", long8 == 1615373999999L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1615071600000L + "'", long9 == 1615071600000L);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date9 = year5.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.previous();
        int int12 = week10.getYearValue();
        java.util.Date date13 = week10.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week16.next();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        boolean boolean33 = week16.equals((java.lang.Object) wildcardClass30);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.lang.Class class50 = null;
        java.util.Date date51 = null;
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date51, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date49, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date39, timeZone52);
        java.lang.Class class56 = null;
        java.util.Date date57 = null;
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance(class56, date57, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date39, timeZone58);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.previous();
        int int65 = week63.getYearValue();
        java.util.Date date66 = week63.getEnd();
        long long67 = week63.getMiddleMillisecond();
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.next();
        int int72 = week70.getYearValue();
        java.util.TimeZone timeZone73 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int74 = week70.compareTo((java.lang.Object) timeZone73);
        int int75 = week70.getYearValue();
        int int77 = week70.compareTo((java.lang.Object) 9);
        java.util.Date date78 = week70.getStart();
        boolean boolean79 = week63.equals((java.lang.Object) date78);
        java.util.Date date80 = week63.getEnd();
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = week83.next();
        java.lang.Class<?> wildcardClass85 = week83.getClass();
        java.lang.Class class86 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass85);
        java.lang.Class class87 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass85);
        java.lang.Class class88 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass85);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date92 = week91.getStart();
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date92);
        java.util.TimeZone timeZone94 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod95 = org.jfree.data.time.RegularTimePeriod.createInstance(class88, date92, timeZone94);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date80, timeZone94);
        org.jfree.data.time.Week week97 = new org.jfree.data.time.Week(date39, timeZone94);
        org.jfree.data.time.Week week98 = new org.jfree.data.time.Week(date13, timeZone94);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod99 = week98.next();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 26 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod59);
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-60506053200001L) + "'", long67 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(class86);
        org.junit.Assert.assertNotNull(class87);
        org.junit.Assert.assertNotNull(class88);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone94);
// flaky:         org.junit.Assert.assertEquals(timeZone94.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod95);
        org.junit.Assert.assertNotNull(regularTimePeriod99);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        java.util.Date date20 = week2.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        int int43 = week41.getYearValue();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int45 = week41.compareTo((java.lang.Object) timeZone44);
        int int46 = week41.getYearValue();
        int int48 = week41.compareTo((java.lang.Object) 9);
        java.util.Date date49 = week41.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date49, timeZone56);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.previous();
        int int63 = week61.getYearValue();
        java.util.Date date64 = week61.getStart();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date64, timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date49, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date31, timeZone65);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date20, timeZone65);
        java.util.Calendar calendar70 = null;
        // The following exception was thrown during execution in test generation
        try {
            week69.peg(calendar70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        int int18 = week2.getYearValue();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        long long23 = week21.getMiddleMillisecond();
        java.lang.String str24 = week21.toString();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        java.lang.Class<?> wildcardClass29 = week27.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        java.lang.Class class35 = null;
        java.util.Date date36 = null;
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance(class35, date36, timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass29, date34, timeZone37);
        java.lang.Class<?> wildcardClass40 = timeZone37.getClass();
        boolean boolean41 = week21.equals((java.lang.Object) wildcardClass40);
        int int42 = week2.compareTo((java.lang.Object) wildcardClass40);
        int int43 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60506053200001L) + "'", long23 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Week 35, 52" + "'", str24, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        java.util.Date date8 = year6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(97, year6);
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week();
        long long18 = week17.getFirstMillisecond();
        org.jfree.data.time.Year year19 = week17.getYear();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(0, year19);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(11, year19);
        long long22 = week21.getSerialIndex();
        org.jfree.data.time.Year year23 = week21.getYear();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) (short) 1, year23);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(4, year23);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(32, year23);
        boolean boolean27 = week10.equals((java.lang.Object) year23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(52, year23);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1667080800000L + "'", long11 == 1667080800000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1637449200000L + "'", long18 == 1637449200000L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 107124L + "'", long22 == 107124L);
        org.junit.Assert.assertNotNull(year23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) (byte) 100, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (short) 10, year4);
        long long7 = week6.getMiddleMillisecond();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week10.next();
        java.util.Date date14 = week10.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date14);
        int int16 = week15.getWeek();
        boolean boolean18 = week15.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        long long26 = week24.getMiddleMillisecond();
        java.lang.String str27 = week24.toString();
        boolean boolean28 = week21.equals((java.lang.Object) week24);
        int int29 = week24.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week24.next();
        boolean boolean31 = week15.equals((java.lang.Object) week24);
        long long32 = week24.getLastMillisecond();
        java.lang.String str33 = week24.toString();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str37 = week36.toString();
        long long38 = week36.getMiddleMillisecond();
        long long39 = week36.getLastMillisecond();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        int int46 = week36.compareTo((java.lang.Object) wildcardClass44);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize(class47);
        java.lang.Class class49 = org.jfree.data.time.RegularTimePeriod.downsize(class47);
        java.lang.Class class50 = org.jfree.data.time.RegularTimePeriod.downsize(class49);
        int int51 = week24.compareTo((java.lang.Object) class49);
        int int52 = week6.compareTo((java.lang.Object) class49);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1614769199999L + "'", long7 == 1614769199999L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506053200001L) + "'", long26 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Week 35, 52" + "'", str27, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60505750800001L) + "'", long32 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Week 35, 52" + "'", str33, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Week 35, 52" + "'", str37, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-60506053200001L) + "'", long38 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60505750800001L) + "'", long39 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(class49);
        org.junit.Assert.assertNotNull(class50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(7, (int) (short) 10);
        long long3 = week2.getFirstMillisecond();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-61848406800000L) + "'", long3 == (-61848406800000L));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str4 = week3.toString();
        long long5 = week3.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week3.next();
        java.lang.String str7 = week3.toString();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week();
        long long12 = week11.getFirstMillisecond();
        org.jfree.data.time.Year year13 = week11.getYear();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(52, year13);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) (byte) -1, year13);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(0, year13);
        int int17 = week3.compareTo((java.lang.Object) week16);
        org.jfree.data.time.Year year18 = week16.getYear();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) (byte) 10, year18);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 35, 52" + "'", str4, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506053200001L) + "'", long5 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1637449200000L + "'", long12 == 1637449200000L);
        org.junit.Assert.assertNotNull(year13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1969) + "'", int17 == (-1969));
        org.junit.Assert.assertNotNull(year18);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        long long16 = week2.getSerialIndex();
        java.util.Date date17 = week2.getEnd();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        java.lang.Class<?> wildcardClass19 = date17.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str21 = week20.toString();
        long long22 = week20.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week20.next();
        java.util.Date date24 = week20.getEnd();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date24);
        long long26 = week25.getLastMillisecond();
        java.util.Date date27 = week25.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week28.next();
        java.util.Date date31 = week28.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        long long42 = week36.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass43 = week36.getClass();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass43, date47, timeZone53);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date47);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.next();
        int int61 = week59.getYearValue();
        java.util.TimeZone timeZone62 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int63 = week59.compareTo((java.lang.Object) timeZone62);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date47, timeZone62);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date31, timeZone62);
        java.util.Locale locale66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date16, timeZone62, locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Week 35, 52" + "'", str21, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60506053200001L) + "'", long22 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60505750800001L) + "'", long26 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60506053200001L) + "'", long42 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.previous();
        java.util.Date date40 = week38.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        int int50 = week43.compareTo((java.lang.Object) 9);
        int int51 = week43.getYearValue();
        long long52 = week43.getLastMillisecond();
        int int53 = week43.getWeek();
        java.util.Date date54 = week43.getEnd();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        java.util.Date date59 = week57.getEnd();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        java.lang.Class<?> wildcardClass64 = week62.getClass();
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date69 = week68.getStart();
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass64, date69, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date59, timeZone72);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date54, timeZone72);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone72);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date13, timeZone72);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date13);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60505750800001L) + "'", long52 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.util.Date date6 = week5.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week();
        long long8 = week7.getFirstMillisecond();
        long long9 = week7.getSerialIndex();
        int int10 = week7.getYearValue();
        java.util.Date date11 = week7.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date15);
        java.util.Date date17 = week16.getStart();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        long long26 = week20.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass27 = week20.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date31, timeZone37);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date17, timeZone37);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date11, timeZone37);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date6, timeZone37);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year43 = week42.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1637449200000L + "'", long8 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107161L + "'", long9 == 107161L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2021 + "'", int10 == 2021);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 27 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506053200001L) + "'", long26 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        long long11 = week2.getSerialIndex();
        java.lang.String str12 = week2.toString();
        java.lang.String str13 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2791L + "'", long11 == 2791L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        java.lang.String str15 = week14.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        java.util.Date date8 = year6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(100, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(35, year6);
        java.util.Date date11 = year6.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(45, year6);
        long long13 = week12.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1636239599999L + "'", long13 == 1636239599999L);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        java.lang.Class<?> wildcardClass15 = timeZone12.getClass();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        int int20 = week18.getYearValue();
        java.util.TimeZone timeZone21 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int22 = week18.compareTo((java.lang.Object) timeZone21);
        int int23 = week18.getYearValue();
        int int25 = week18.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week18.previous();
        int int27 = week18.getYearValue();
        long long28 = week18.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week18.previous();
        java.util.Date date30 = week18.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        int int38 = week33.getYearValue();
        int int40 = week33.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week33.previous();
        int int42 = week33.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week33.next();
        java.lang.Class<?> wildcardClass44 = regularTimePeriod43.getClass();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.next();
        int int49 = week47.getYearValue();
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int51 = week47.compareTo((java.lang.Object) timeZone50);
        int int52 = week47.getYearValue();
        int int54 = week47.compareTo((java.lang.Object) 9);
        int int55 = week47.getYearValue();
        long long56 = week47.getLastMillisecond();
        int int57 = week47.getWeek();
        java.util.Date date58 = week47.getEnd();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date62 = week61.getStart();
        java.util.Date date63 = week61.getEnd();
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.next();
        java.lang.Class<?> wildcardClass68 = week66.getClass();
        java.lang.Class class69 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass68);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date73 = week72.getStart();
        java.lang.Class class74 = null;
        java.util.Date date75 = null;
        java.util.TimeZone timeZone76 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance(class74, date75, timeZone76);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass68, date73, timeZone76);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date63, timeZone76);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date58, timeZone76);
        java.util.Date date81 = week80.getStart();
        java.lang.Class class82 = null;
        java.util.Date date83 = null;
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class82, date83, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date81, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date30, timeZone84);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60505750800001L) + "'", long28 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-60505750800001L) + "'", long56 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(class69);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertNull(regularTimePeriod87);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.next();
        java.util.Date date5 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getFirstMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) -1, (int) (short) 0);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str6 = week5.toString();
        long long7 = week5.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week5.next();
        java.util.Date date9 = week5.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        long long11 = week10.getLastMillisecond();
        java.lang.String str12 = week10.toString();
        long long13 = week10.getSerialIndex();
        boolean boolean14 = week2.equals((java.lang.Object) long13);
        long long15 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.previous();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-62168346000001L) + "'", long15 == (-62168346000001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getFirstMillisecond();
        java.lang.String str8 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.util.Date date10 = week2.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        java.lang.String str11 = week2.toString();
        java.util.Date date12 = week2.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        long long3 = week2.getSerialIndex();
        java.util.Date date4 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        long long10 = week7.getLastMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        int int17 = week7.compareTo((java.lang.Object) wildcardClass15);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize(class18);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week();
        long long22 = week21.getFirstMillisecond();
        org.jfree.data.time.Year year23 = week21.getYear();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(0, year23);
        java.util.Date date25 = week24.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date29 = week28.getStart();
        java.util.Date date30 = week28.getEnd();
        int int31 = week28.getYearValue();
        long long32 = week28.getLastMillisecond();
        java.lang.Class<?> wildcardClass33 = week28.getClass();
        java.util.Date date34 = null;
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date38 = week37.getStart();
        int int39 = week37.getYearValue();
        java.util.Date date40 = week37.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date34, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance(class19, date25, timeZone74);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date4, timeZone74);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = week83.next();
        java.lang.Class<?> wildcardClass85 = week83.getClass();
        java.lang.Class class86 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass85);
        java.lang.Class class87 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass85);
        java.lang.Class class88 = org.jfree.data.time.RegularTimePeriod.downsize(class87);
        java.lang.Class class89 = org.jfree.data.time.RegularTimePeriod.downsize(class88);
        java.lang.Class class90 = org.jfree.data.time.RegularTimePeriod.downsize(class88);
        int int91 = week80.compareTo((java.lang.Object) class90);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1748L + "'", long3 == 1748L);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1637449200000L + "'", long22 == 1637449200000L);
        org.junit.Assert.assertNotNull(year23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-59100800400001L) + "'", long32 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(class86);
        org.junit.Assert.assertNotNull(class87);
        org.junit.Assert.assertNotNull(class88);
        org.junit.Assert.assertNotNull(class89);
        org.junit.Assert.assertNotNull(class90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        java.util.Date date6 = year5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        java.lang.Class class22 = null;
        java.util.Date date23 = null;
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date23, timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date21, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date11, timeZone24);
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date11, timeZone28);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date6, timeZone28);
        java.util.Calendar calendar31 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long32 = week30.getLastMillisecond(calendar31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week7.previous();
        int int16 = week7.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week7.next();
        java.lang.Class<?> wildcardClass18 = regularTimePeriod17.getClass();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        int int28 = week21.compareTo((java.lang.Object) 9);
        int int29 = week21.getYearValue();
        long long30 = week21.getLastMillisecond();
        int int31 = week21.getWeek();
        java.util.Date date32 = week21.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date36 = week35.getStart();
        java.util.Date date37 = week35.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        java.lang.Class<?> wildcardClass42 = week40.getClass();
        java.lang.Class class43 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        java.lang.Class class48 = null;
        java.util.Date date49 = null;
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date49, timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date47, timeZone50);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date37, timeZone50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date32, timeZone50);
        java.util.Date date55 = week54.getStart();
        java.lang.Class class56 = null;
        java.util.Date date57 = null;
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance(class56, date57, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date55, timeZone58);
        int int61 = week2.compareTo((java.lang.Object) wildcardClass18);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60505750800001L) + "'", long30 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(class43);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(48, 5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = regularTimePeriod3.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week16.next();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        boolean boolean33 = week16.equals((java.lang.Object) wildcardClass30);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.lang.Class class50 = null;
        java.util.Date date51 = null;
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date51, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date49, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date39, timeZone52);
        java.lang.Class class56 = null;
        java.util.Date date57 = null;
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance(class56, date57, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date39, timeZone58);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date13, timeZone58);
        long long62 = week61.getFirstMillisecond();
        java.lang.String str63 = week61.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod59);
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-60506355600000L) + "'", long62 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Week 35, 52" + "'", str63, "Week 35, 52");
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week3.next();
        int int5 = week3.getYearValue();
        long long6 = week3.getLastMillisecond();
        java.util.Date date7 = week3.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week10.next();
        java.util.Date date14 = week10.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date14);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date19 = week18.getEnd();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.util.Date date24 = week22.getEnd();
        int int25 = week22.getYearValue();
        long long26 = week22.getLastMillisecond();
        java.lang.Class<?> wildcardClass27 = week22.getClass();
        java.util.Date date28 = null;
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date32 = week31.getStart();
        int int33 = week31.getYearValue();
        java.util.Date date34 = week31.getEnd();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        java.lang.Class<?> wildcardClass39 = week37.getClass();
        java.lang.Class class40 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass39);
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass39);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.next();
        int int46 = week44.getYearValue();
        java.util.TimeZone timeZone47 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int48 = week44.compareTo((java.lang.Object) timeZone47);
        int int49 = week44.getYearValue();
        int int51 = week44.compareTo((java.lang.Object) 9);
        java.util.Date date52 = week44.getStart();
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        int int58 = week56.getYearValue();
        java.util.TimeZone timeZone59 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int60 = week56.compareTo((java.lang.Object) timeZone59);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass39, date52, timeZone59);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.previous();
        int int66 = week64.getYearValue();
        java.util.Date date67 = week64.getStart();
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date67, timeZone68);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date52, timeZone68);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date34, timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date28, timeZone68);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date19, timeZone68);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date14, timeZone68);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date7, timeZone68);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date0, timeZone68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-59100800400001L) + "'", long26 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(class40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod72);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date13, timeZone19);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        int int26 = week24.getYearValue();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int28 = week24.compareTo((java.lang.Object) timeZone27);
        int int29 = week24.getYearValue();
        int int31 = week24.compareTo((java.lang.Object) 9);
        java.util.Date date32 = week24.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        int int47 = week42.getYearValue();
        int int49 = week42.compareTo((java.lang.Object) 9);
        java.util.Date date50 = week42.getStart();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass37, date50, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.previous();
        int int64 = week62.getYearValue();
        java.util.Date date65 = week62.getStart();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date65, timeZone66);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date50, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date32, timeZone66);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date13, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.next();
        java.util.Date date72 = week70.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year73 = week70.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        java.lang.String str7 = week2.toString();
        int int9 = week2.compareTo((java.lang.Object) 630L);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week2.getLastMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        java.util.Date date7 = week6.getEnd();
        java.lang.String str8 = week6.toString();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Mar 13 23:59:59 CET 2021");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 11, 2021" + "'", str8, "Week 11, 2021");
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str10 = week9.toString();
        long long11 = week9.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        java.util.Date date13 = week9.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        int int25 = week16.getYearValue();
        long long26 = week16.getLastMillisecond();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        boolean boolean33 = week16.equals((java.lang.Object) wildcardClass31);
        boolean boolean34 = week9.equals((java.lang.Object) wildcardClass31);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        int int47 = week42.getYearValue();
        long long48 = week42.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass49 = week42.getClass();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date53 = week52.getStart();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        int int58 = week56.getYearValue();
        java.util.TimeZone timeZone59 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int60 = week56.compareTo((java.lang.Object) timeZone59);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass49, date53, timeZone59);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.next();
        java.lang.Class<?> wildcardClass66 = week64.getClass();
        java.lang.Class class67 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass66);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date71 = week70.getStart();
        java.lang.Class class72 = null;
        java.util.Date date73 = null;
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = org.jfree.data.time.RegularTimePeriod.createInstance(class72, date73, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass66, date71, timeZone74);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date80 = week79.getStart();
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date80);
        java.util.TimeZone timeZone82 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass66, date80, timeZone82);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date53, timeZone82);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date39, timeZone82);
        boolean boolean86 = week2.equals((java.lang.Object) timeZone82);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60505750800001L) + "'", long26 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-60506053200001L) + "'", long48 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(class67);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod75);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week10.next();
        java.util.Date date13 = week10.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        int int22 = week17.getYearValue();
        int int24 = week17.compareTo((java.lang.Object) 9);
        int int25 = week17.getYearValue();
        java.lang.String str26 = week17.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week17.next();
        java.util.Date date28 = week17.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        int int36 = week31.getYearValue();
        long long37 = week31.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass38 = week31.getClass();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date42 = week41.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass38, date42, timeZone48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date54 = week53.getStart();
        java.util.Date date55 = week53.getEnd();
        java.util.Date date56 = week53.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date60 = week59.getStart();
        java.util.Date date61 = week59.getEnd();
        java.util.Date date62 = week59.getStart();
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date66 = week65.getStart();
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.next();
        int int71 = week69.getYearValue();
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int73 = week69.compareTo((java.lang.Object) timeZone72);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date66, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date62, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass38, date56, timeZone72);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date28, timeZone72);
        java.util.Locale locale78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date13, timeZone72, locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Week 35, 52" + "'", str26, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        java.util.Date date8 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        long long14 = week11.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        int int21 = week11.compareTo((java.lang.Object) wildcardClass19);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        java.lang.Class<?> wildcardClass27 = week25.getClass();
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.lang.Class class33 = null;
        java.util.Date date34 = null;
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance(class33, date34, timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date32, timeZone35);
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date32, timeZone38);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date32);
        boolean boolean41 = week2.equals((java.lang.Object) week40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week40.next();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        long long44 = week2.getMiddleMillisecond();
        int int45 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week2.previous();
        java.util.Date date47 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60506053200001L) + "'", long44 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod48);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        long long6 = week2.getMiddleMillisecond();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date7);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.previous();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, 32);
        int int3 = week2.getWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 10, 2022);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 10);
        java.util.Date date3 = week2.getEnd();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getLastMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 30 23:59:59 CET 10");
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        long long6 = week5.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week5.next();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = regularTimePeriod7.getMiddleMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59100800400001L) + "'", long6 == (-59100800400001L));
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        java.lang.Class class75 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(class75);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.previous();
        java.util.Date date20 = week2.getEnd();
        boolean boolean22 = week2.equals((java.lang.Object) 44L);
        long long23 = week2.getSerialIndex();
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2791L + "'", long23 == 2791L);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        long long6 = year5.getMiddleMillisecond();
        java.util.Date date7 = year5.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date7);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1625223599999L + "'", long6 == 1625223599999L);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Dec 31 23:59:59 CET 2021");
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(5, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date7 = week6.getStart();
        java.lang.Class<?> wildcardClass8 = date7.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 19 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(10, (int) (short) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        long long12 = week11.getFirstMillisecond();
        java.util.Date date13 = week11.getEnd();
        long long14 = week11.getFirstMillisecond();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week11.getFirstMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506355600000L) + "'", long14 == (-60506355600000L));
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        long long5 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getWeek();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(35, 12);
        boolean boolean10 = week2.equals((java.lang.Object) 35);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        java.lang.String str15 = week7.toString();
        long long16 = week7.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week7.next();
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = week7.getMiddleMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        java.lang.String str7 = week2.toString();
        int int8 = week2.getYearValue();
        int int9 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.next();
        int int11 = week2.getYearValue();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getFirstMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week2.previous();
        long long15 = week2.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60505750800001L) + "'", long15 == (-60505750800001L));
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((-1969), year4);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week7.next();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(7, 1);
        int int11 = week2.compareTo((java.lang.Object) 7);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        long long10 = week7.getLastMillisecond();
        long long11 = week7.getFirstMillisecond();
        int int12 = week7.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506355600000L) + "'", long11 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date5, timeZone6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        java.util.Date date18 = week10.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.previous();
        int int50 = week48.getYearValue();
        java.util.Date date51 = week48.getStart();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date51, timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date36, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date5, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date5);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year58 = week57.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week7.previous();
        java.lang.Class<?> wildcardClass10 = regularTimePeriod9.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        java.util.Date date20 = week2.getStart();
        java.util.Date date21 = week2.getEnd();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date21);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date21);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Date date74 = week73.getStart();
        java.util.Date date75 = week73.getEnd();
        long long76 = week73.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-60505750800001L) + "'", long76 == (-60505750800001L));
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getWeek();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        int int21 = week13.getYearValue();
        long long22 = week13.getLastMillisecond();
        int int23 = week13.getWeek();
        java.util.Date date24 = week13.getEnd();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.util.Date date29 = week27.getEnd();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        java.lang.Class<?> wildcardClass34 = week32.getClass();
        java.lang.Class class35 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass34);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date39 = week38.getStart();
        java.lang.Class class40 = null;
        java.util.Date date41 = null;
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance(class40, date41, timeZone42);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass34, date39, timeZone42);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date29, timeZone42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date24, timeZone42);
        long long47 = week46.getLastMillisecond();
        boolean boolean48 = week9.equals((java.lang.Object) week46);
        boolean boolean49 = week2.equals((java.lang.Object) week46);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(class35);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-60505750800001L) + "'", long47 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        int int13 = week12.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week12.previous();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        long long19 = week17.getMiddleMillisecond();
        int int20 = week17.getWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = week12.compareTo((java.lang.Object) week17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506053200001L) + "'", long19 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week16.next();
        java.util.Date date20 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date25 = week24.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date29 = week28.getStart();
        java.util.Date date30 = week28.getEnd();
        int int31 = week28.getYearValue();
        long long32 = week28.getLastMillisecond();
        java.lang.Class<?> wildcardClass33 = week28.getClass();
        java.util.Date date34 = null;
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date38 = week37.getStart();
        int int39 = week37.getYearValue();
        java.util.Date date40 = week37.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date34, timeZone74);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date25, timeZone74);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date20, timeZone74);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date13, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = week81.previous();
        java.util.Date date83 = week81.getStart();
        java.util.Date date84 = week81.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-59100800400001L) + "'", long32 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getMiddleMillisecond();
        long long9 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2791L + "'", long9 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getFirstMillisecond();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getMiddleMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.lang.Class class16 = null;
        java.util.Date date17 = null;
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date17, timeZone18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date15, timeZone18);
        java.lang.Class<?> wildcardClass21 = timeZone18.getClass();
        boolean boolean22 = week2.equals((java.lang.Object) wildcardClass21);
        java.util.Date date23 = week2.getStart();
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year6);
        java.util.Date date11 = week10.getEnd();
        java.util.Date date12 = week10.getStart();
        int int13 = week10.getYearValue();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week10.getMiddleMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 26 23:59:59 CET 2022");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Nov 20 00:00:00 CET 2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2021 + "'", int13 == 2021);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 10, 48);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-2019), year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.lang.String str9 = week2.toString();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        java.util.Date date14 = week12.getEnd();
        java.util.Date date15 = week12.getStart();
        long long16 = week12.getLastMillisecond();
        java.util.Date date17 = week12.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-59100800400001L) + "'", long16 == (-59100800400001L));
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.String str13 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week2.previous();
        int int15 = week2.getYearValue();
        int int16 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date18, timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date18);
        long long23 = week22.getLastMillisecond();
        java.lang.Class<?> wildcardClass24 = week22.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-59100800400001L) + "'", long23 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int15 = week2.compareTo((java.lang.Object) 0);
        long long16 = week2.getFirstMillisecond();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.previous();
        java.util.Date date21 = week19.getEnd();
        long long22 = week19.getSerialIndex();
        int int23 = week19.getWeek();
        boolean boolean24 = week2.equals((java.lang.Object) int23);
        java.lang.String str25 = week2.toString();
        java.util.Calendar calendar26 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = week2.getLastMillisecond(calendar26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506355600000L) + "'", long16 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2791L + "'", long22 == 2791L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Week 35, 52" + "'", str25, "Week 35, 52");
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        long long6 = week2.getMiddleMillisecond();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date7);
        long long9 = week8.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(4, year5);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week8.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        java.util.Date date25 = week23.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        java.lang.Class class36 = null;
        java.util.Date date37 = null;
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance(class36, date37, timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass30, date35, timeZone38);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date25, timeZone38);
        java.lang.Class class42 = null;
        java.util.Date date43 = null;
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance(class42, date43, timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance(class20, date25, timeZone44);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        java.lang.Class class53 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date58, timeZone60);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date25, timeZone60);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod45);
        org.junit.Assert.assertNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(class53);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod61);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        java.util.Date date4 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week7.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week7.next();
        java.util.Date date17 = week7.getStart();
        java.util.Date date18 = week7.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        int int28 = week21.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week21.previous();
        int int30 = week21.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week21.next();
        java.lang.Class<?> wildcardClass32 = regularTimePeriod31.getClass();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        int int47 = week42.getYearValue();
        int int49 = week42.compareTo((java.lang.Object) 9);
        java.util.Date date50 = week42.getStart();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass37, date50, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str63 = week62.toString();
        long long64 = week62.getMiddleMillisecond();
        long long65 = week62.getLastMillisecond();
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.next();
        java.lang.Class<?> wildcardClass70 = week68.getClass();
        java.lang.Class class71 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass70);
        int int72 = week62.compareTo((java.lang.Object) wildcardClass70);
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass70);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week76.next();
        java.lang.Class<?> wildcardClass78 = week76.getClass();
        java.lang.Class class79 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass78);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date83 = week82.getStart();
        java.lang.Class class84 = null;
        java.util.Date date85 = null;
        java.util.TimeZone timeZone86 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance(class84, date85, timeZone86);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass78, date83, timeZone86);
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod90 = org.jfree.data.time.RegularTimePeriod.createInstance(class73, date83, timeZone89);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod91 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date50, timeZone89);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date18, timeZone89);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date4, timeZone89);
        int int94 = week93.getWeek();
        java.util.Calendar calendar95 = null;
        // The following exception was thrown during execution in test generation
        try {
            week93.peg(calendar95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Oct 31 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Week 35, 52" + "'", str63, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-60506053200001L) + "'", long64 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-60505750800001L) + "'", long65 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(class71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(class79);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone86);
// flaky:         org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod90);
        org.junit.Assert.assertNotNull(regularTimePeriod91);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 45 + "'", int94 == 45);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        long long7 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-59101102800001L) + "'", long7 == (-59101102800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) -1, (int) (short) 0);
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.previous();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        boolean boolean8 = week2.equals((java.lang.Object) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year9 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (0) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62168950800000L) + "'", long3 == (-62168950800000L));
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        java.util.Date date7 = week2.getEnd();
        long long8 = week2.getMiddleMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        long long4 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61126275600001L) + "'", long4 == (-61126275600001L));
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(53, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '4', year7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) ' ', year7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(11, year7);
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week12.getFirstMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(5, year3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week4.next();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        long long12 = week11.getFirstMillisecond();
        java.util.Date date13 = week11.getStart();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-59101405200000L) + "'", long12 == (-59101405200000L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getMiddleMillisecond();
        long long15 = week2.getSerialIndex();
        int int16 = week2.getWeek();
        java.lang.String str17 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 0, 6");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        int int5 = week2.getYearValue();
        java.lang.String str6 = week2.toString();
        long long7 = week2.getMiddleMillisecond();
        long long8 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 52, 32" + "'", str6, "Week 52, 32");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-61126578000001L) + "'", long7 == (-61126578000001L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1748L + "'", long8 == 1748L);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 100);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.previous();
        int int7 = week5.getYearValue();
        java.util.Date date8 = week5.getEnd();
        long long9 = week5.getMiddleMillisecond();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        int int14 = week12.getYearValue();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int16 = week12.compareTo((java.lang.Object) timeZone15);
        int int17 = week12.getYearValue();
        int int19 = week12.compareTo((java.lang.Object) 9);
        java.util.Date date20 = week12.getStart();
        boolean boolean21 = week5.equals((java.lang.Object) date20);
        java.util.Date date22 = week5.getEnd();
        boolean boolean23 = week2.equals((java.lang.Object) week5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week2.next();
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = regularTimePeriod24.getMiddleMillisecond(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(4, year5);
        java.util.Date date9 = year5.getStart();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(5, (-1969));
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Date date74 = week73.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = week73.previous();
        java.lang.Class<?> wildcardClass76 = regularTimePeriod75.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(11, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(3, year7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 100, year7);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        int int16 = week14.getYearValue();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int18 = week14.compareTo((java.lang.Object) timeZone17);
        int int19 = week14.getYearValue();
        int int21 = week14.compareTo((java.lang.Object) 9);
        long long22 = week14.getMiddleMillisecond();
        boolean boolean23 = week11.equals((java.lang.Object) week14);
        org.jfree.data.time.Year year24 = week11.getYear();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(35, year24);
        java.util.Date date26 = year24.getEnd();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60506053200001L) + "'", long22 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Dec 31 23:59:59 CET 2021");
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        java.lang.String str14 = week2.toString();
        int int15 = week2.getWeek();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getMiddleMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.previous();
        long long20 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506355600000L) + "'", long20 == (-60506355600000L));
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        java.lang.Class<?> wildcardClass7 = week2.getClass();
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(class9);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(12, year4);
        org.jfree.data.time.Year year7 = week6.getYear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year7);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        long long3 = week2.getSerialIndex();
        java.util.Date date4 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.util.Date date11 = week7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date16 = week15.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date16, timeZone22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date11, timeZone22);
        java.lang.Class class26 = null;
        java.util.Date date27 = null;
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance(class26, date27, timeZone28);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date11, timeZone28);
        java.util.Locale locale31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date4, timeZone28, locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1748L + "'", long3 == 1748L);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod29);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getSerialIndex();
        int int15 = week2.compareTo((java.lang.Object) 0.0d);
        long long16 = week2.getLastMillisecond();
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = week2.getLastMillisecond(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        long long6 = year4.getMiddleMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year4);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week7.getFirstMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1625223599999L + "'", long6 == 1625223599999L);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        long long9 = week8.getSerialIndex();
        org.jfree.data.time.Year year10 = week8.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 1, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(4, year10);
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date13);
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week15.getFirstMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107124L + "'", long9 == 107124L);
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 17 00:00:00 CET 2021");
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = regularTimePeriod15.getMiddleMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getLastMillisecond();
        int int5 = week2.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60505750800001L) + "'", long4 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.previous();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date8 = week7.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date12 = week11.getStart();
        int int13 = week11.getYearValue();
        java.util.Date date14 = week11.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        int int26 = week24.getYearValue();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int28 = week24.compareTo((java.lang.Object) timeZone27);
        int int29 = week24.getYearValue();
        int int31 = week24.compareTo((java.lang.Object) 9);
        java.util.Date date32 = week24.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(date32);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date32, timeZone39);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.previous();
        int int46 = week44.getYearValue();
        java.util.Date date47 = week44.getStart();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date47, timeZone48);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date32, timeZone48);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date14, timeZone48);
        boolean boolean52 = week7.equals((java.lang.Object) date14);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.next();
        int int61 = week59.getYearValue();
        java.util.TimeZone timeZone62 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int63 = week59.compareTo((java.lang.Object) timeZone62);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date56, timeZone62);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date56);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.next();
        int int70 = week68.getYearValue();
        java.util.TimeZone timeZone71 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int72 = week68.compareTo((java.lang.Object) timeZone71);
        int int73 = week68.getYearValue();
        long long74 = week68.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass75 = week68.getClass();
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date79 = week78.getStart();
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = week82.next();
        int int84 = week82.getYearValue();
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int86 = week82.compareTo((java.lang.Object) timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass75, date79, timeZone85);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date79);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod92 = week91.next();
        int int93 = week91.getYearValue();
        java.util.TimeZone timeZone94 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int95 = week91.compareTo((java.lang.Object) timeZone94);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date79, timeZone94);
        int int97 = week65.compareTo((java.lang.Object) timeZone94);
        org.jfree.data.time.Week week98 = new org.jfree.data.time.Week(date14, timeZone94);
        boolean boolean99 = week2.equals((java.lang.Object) date14);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-60506053200001L) + "'", long74 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 52 + "'", int93 == 52);
        org.junit.Assert.assertNotNull(timeZone94);
// flaky:         org.junit.Assert.assertEquals(timeZone94.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Year year8 = week7.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) 'a', year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, year8);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            week11.peg(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(year8);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getSerialIndex();
        int int3 = week0.getYearValue();
        java.lang.String str4 = week0.toString();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week0.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107161L + "'", long2 == 107161L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2021 + "'", int3 == 2021);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 48, 2021" + "'", str4, "Week 48, 2021");
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, 2022);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getLastMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.TimeZone timeZone14 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int15 = week11.compareTo((java.lang.Object) timeZone14);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date8, timeZone14);
        java.util.Date date17 = week16.getEnd();
        boolean boolean18 = week2.equals((java.lang.Object) week16);
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = week16.getMiddleMillisecond(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (byte) 100, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 10, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(1, year8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) ' ', year8);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) (short) 0, year8);
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week14.getLastMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(52, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.previous();
        int int34 = week32.getYearValue();
        java.util.Date date35 = week32.getStart();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date35, timeZone36);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date27, timeZone36);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(53, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '4', year8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(52, year8);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(2021, year8);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(0, year8);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(7, (int) (short) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getLastMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(date8);
        long long10 = week9.getSerialIndex();
        long long11 = week9.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = week2.compareTo((java.lang.Object) regularTimePeriod12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61847802000001L) + "'", long4 == (-61847802000001L));
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 5150L + "'", long10 == 5150L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-59101405200000L) + "'", long11 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        java.lang.Class class0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date4 = week3.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        int int10 = week7.getYearValue();
        long long11 = week7.getLastMillisecond();
        java.lang.Class<?> wildcardClass12 = week7.getClass();
        java.util.Date date13 = null;
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date17 = week16.getStart();
        int int18 = week16.getYearValue();
        java.util.Date date19 = week16.getEnd();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        java.lang.Class<?> wildcardClass24 = week22.getClass();
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        int int34 = week29.getYearValue();
        int int36 = week29.compareTo((java.lang.Object) 9);
        java.util.Date date37 = week29.getStart();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date37);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        int int43 = week41.getYearValue();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int45 = week41.compareTo((java.lang.Object) timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass24, date37, timeZone44);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.previous();
        int int51 = week49.getYearValue();
        java.util.Date date52 = week49.getStart();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date52, timeZone53);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date37, timeZone53);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date19, timeZone53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass12, date13, timeZone53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date4, timeZone53);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        int int63 = week61.getYearValue();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int65 = week61.compareTo((java.lang.Object) timeZone64);
        int int66 = week61.getYearValue();
        int int68 = week61.compareTo((java.lang.Object) 9);
        int int69 = week61.getYearValue();
        long long70 = week61.getLastMillisecond();
        int int71 = week61.getWeek();
        java.util.Date date72 = week61.getEnd();
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week();
        long long76 = week75.getFirstMillisecond();
        org.jfree.data.time.Year year77 = week75.getYear();
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(0, year77);
        java.util.Date date79 = week78.getStart();
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str83 = week82.toString();
        long long84 = week82.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = week82.next();
        java.util.Date date86 = week82.getEnd();
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date86);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = week87.next();
        java.util.Date date89 = week87.getEnd();
        java.util.TimeZone timeZone90 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date89, timeZone90);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date79, timeZone90);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date72, timeZone90);
        org.jfree.data.time.Week week94 = new org.jfree.data.time.Week(date4, timeZone90);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod95 = week94.previous();
        long long96 = week94.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-59100800400001L) + "'", long11 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod57);
        org.junit.Assert.assertNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-60505750800001L) + "'", long70 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1637449200000L + "'", long76 == 1637449200000L);
        org.junit.Assert.assertNotNull(year77);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Week 35, 52" + "'", str83, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-60506053200001L) + "'", long84 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone90);
// flaky:         org.junit.Assert.assertEquals(timeZone90.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-61792160400000L) + "'", long96 == (-61792160400000L));
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str23 = week22.toString();
        long long24 = week22.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week22.next();
        java.util.Date date26 = regularTimePeriod25.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date30, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date26, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date6, timeZone36);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date44 = week43.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        java.util.Date date46 = week45.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        int int54 = week49.getYearValue();
        long long55 = week49.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass56 = week49.getClass();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date60 = week59.getStart();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        int int65 = week63.getYearValue();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int67 = week63.compareTo((java.lang.Object) timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass56, date60, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date46, timeZone66);
        java.util.Locale locale70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date6, timeZone66, locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Week 35, 52" + "'", str23, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2791L + "'", long24 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-60506053200001L) + "'", long55 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(11, 36);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week10.next();
        java.util.Date date13 = week10.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        int int15 = week14.getYearValue();
        long long16 = week14.getFirstMillisecond();
        java.lang.Class<?> wildcardClass17 = week14.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506355600000L) + "'", long16 == (-60506355600000L));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        java.util.Date date23 = week15.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date23, timeZone30);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.previous();
        int int37 = week35.getYearValue();
        java.util.Date date38 = week35.getStart();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date38, timeZone39);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date23, timeZone39);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date5, timeZone39);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week();
        long long48 = week47.getFirstMillisecond();
        org.jfree.data.time.Year year49 = week47.getYear();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(52, year49);
        java.util.Date date51 = year49.getStart();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(100, year49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(35, year49);
        java.util.Date date54 = year49.getStart();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(52, year49);
        boolean boolean56 = week42.equals((java.lang.Object) year49);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1637449200000L + "'", long48 == 1637449200000L);
        org.junit.Assert.assertNotNull(year49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1969), (-1));
        java.lang.Object obj3 = null;
        int int4 = week2.compareTo(obj3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getLastMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) 100, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(12, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(7, year6);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 10, 2);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        int int7 = week5.getYearValue();
        java.util.TimeZone timeZone8 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int9 = week5.compareTo((java.lang.Object) timeZone8);
        int int10 = week5.getYearValue();
        int int12 = week5.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week5.previous();
        int int14 = week5.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week5.next();
        java.lang.Class<?> wildcardClass16 = regularTimePeriod15.getClass();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        java.lang.Class<?> wildcardClass21 = week19.getClass();
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        int int28 = week26.getYearValue();
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int30 = week26.compareTo((java.lang.Object) timeZone29);
        int int31 = week26.getYearValue();
        int int33 = week26.compareTo((java.lang.Object) 9);
        java.util.Date date34 = week26.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date34);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass21, date34, timeZone41);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str47 = week46.toString();
        long long48 = week46.getMiddleMillisecond();
        long long49 = week46.getLastMillisecond();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.next();
        java.lang.Class<?> wildcardClass54 = week52.getClass();
        java.lang.Class class55 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass54);
        int int56 = week46.compareTo((java.lang.Object) wildcardClass54);
        java.lang.Class class57 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass54);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.next();
        java.lang.Class<?> wildcardClass62 = week60.getClass();
        java.lang.Class class63 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass62);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date67 = week66.getStart();
        java.lang.Class class68 = null;
        java.util.Date date69 = null;
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date69, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass62, date67, timeZone70);
        java.util.TimeZone timeZone73 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class57, date67, timeZone73);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date34, timeZone73);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date34);
        int int77 = week76.getYearValue();
        long long78 = week76.getSerialIndex();
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date82 = week81.getStart();
        java.util.Date date83 = week81.getEnd();
        int int84 = week81.getYearValue();
        java.util.Date date85 = week81.getStart();
        int int86 = week81.getWeek();
        int int87 = week76.compareTo((java.lang.Object) int86);
        int int88 = week76.getYearValue();
        int int89 = week2.compareTo((java.lang.Object) int88);
        java.lang.Class<?> wildcardClass90 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Week 35, 52" + "'", str47, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-60506053200001L) + "'", long48 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60505750800001L) + "'", long49 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(class55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(class57);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(class63);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 2791L + "'", long78 == 2791L);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((-1969), year4);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week7.previous();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2021, (int) (short) 10);
        long long3 = week2.getFirstMillisecond();
        java.util.Date date4 = week2.getStart();
        long long5 = week2.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year6 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (10) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-61868970000000L) + "'", long3 == (-61868970000000L));
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Jun 16 00:00:00 CET 9");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-61868970000000L) + "'", long5 == (-61868970000000L));
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.next();
        java.util.Date date24 = week2.getStart();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.previous();
        java.util.Date date29 = week27.getEnd();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.util.Date date34 = week32.getEnd();
        java.util.Date date35 = week32.getStart();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date39 = week38.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date39, timeZone45);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date35, timeZone45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date29, timeZone45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date29);
        java.lang.Class<?> wildcardClass51 = week50.getClass();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(0, 0);
        long long55 = week54.getLastMillisecond();
        long long56 = week54.getLastMillisecond();
        java.util.Date date57 = week54.getStart();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date61 = week60.getStart();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date61);
        int int63 = week62.getWeek();
        java.lang.Class<?> wildcardClass64 = week62.getClass();
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass64);
        java.util.Date date66 = null;
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.previous();
        int int71 = week69.getYearValue();
        java.util.Date date72 = week69.getStart();
        java.util.TimeZone timeZone73 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date72, timeZone73);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone73);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass51, date57, timeZone73);
        boolean boolean77 = week2.equals((java.lang.Object) timeZone73);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-62167741200001L) + "'", long55 == (-62167741200001L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-62167741200001L) + "'", long56 == (-62167741200001L));
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Dec 21 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod75);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.previous();
        java.util.Date date48 = week46.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        java.util.Date date54 = week51.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        int int63 = week61.getYearValue();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int65 = week61.compareTo((java.lang.Object) timeZone64);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date58, timeZone64);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date54, timeZone64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date48, timeZone64);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date42, timeZone64);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.next();
        java.util.Date date71 = week69.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.lang.String str16 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        java.util.Date date18 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2021, (int) (short) 10);
        long long3 = week2.getFirstMillisecond();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-61868970000000L) + "'", long3 == (-61868970000000L));
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        java.lang.String str15 = week7.toString();
        long long16 = week7.getLastMillisecond();
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = week7.getLastMillisecond(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        java.util.Date date6 = week4.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        int int17 = week9.getYearValue();
        long long18 = week9.getLastMillisecond();
        long long19 = week9.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week9.next();
        long long21 = week9.getFirstMillisecond();
        java.lang.String str22 = week9.toString();
        boolean boolean23 = week4.equals((java.lang.Object) week9);
        int int24 = week9.getWeek();
        java.util.Date date25 = week9.getStart();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Dec 26 23:59:59 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2791L + "'", long19 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506355600000L) + "'", long21 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        int int18 = week2.getWeek();
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = week2.getMiddleMillisecond(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date5, timeZone6);
        java.lang.Class<?> wildcardClass8 = timeZone6.getClass();
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str13 = week12.toString();
        long long14 = week12.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week12.next();
        java.util.Date date16 = regularTimePeriod15.getEnd();
        java.util.Date date17 = regularTimePeriod15.getStart();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str21 = week20.toString();
        long long22 = week20.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week20.next();
        java.util.Date date24 = week20.getEnd();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date28);
        java.util.Date date30 = week29.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        int int38 = week33.getYearValue();
        long long39 = week33.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass40 = week33.getClass();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date44 = week43.getStart();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.next();
        int int49 = week47.getYearValue();
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int51 = week47.compareTo((java.lang.Object) timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date44, timeZone50);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date30, timeZone50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date24, timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = org.jfree.data.time.RegularTimePeriod.createInstance(class9, date17, timeZone50);
        java.lang.Class class56 = org.jfree.data.time.RegularTimePeriod.downsize(class9);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2791L + "'", long14 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Week 35, 52" + "'", str21, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60506053200001L) + "'", long22 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60506053200001L) + "'", long39 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(class56);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize(class73);
        java.lang.Class class75 = org.jfree.data.time.RegularTimePeriod.downsize(class74);
        java.lang.Class class76 = org.jfree.data.time.RegularTimePeriod.downsize(class74);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(class75);
        org.junit.Assert.assertNotNull(class76);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date10, timeZone19);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.previous();
        int int25 = week23.getYearValue();
        java.util.Date date26 = week23.getStart();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date26, timeZone27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance(class6, date10, timeZone27);
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize(class6);
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize(class30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize(class31);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.TimeZone timeZone21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date4, timeZone21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        long long17 = week2.getSerialIndex();
        long long18 = week2.getFirstMillisecond();
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = week2.getMiddleMillisecond(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2791L + "'", long17 == 2791L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '4', year5);
        int int9 = week8.getWeek();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        long long14 = week2.getLastMillisecond();
        int int15 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.next();
        java.util.Date date17 = regularTimePeriod16.getEnd();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Sep 02 23:59:59 CET 52");
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        int int18 = week2.getYearValue();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        long long23 = week21.getMiddleMillisecond();
        java.lang.String str24 = week21.toString();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        java.lang.Class<?> wildcardClass29 = week27.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        java.lang.Class class35 = null;
        java.util.Date date36 = null;
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance(class35, date36, timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass29, date34, timeZone37);
        java.lang.Class<?> wildcardClass40 = timeZone37.getClass();
        boolean boolean41 = week21.equals((java.lang.Object) wildcardClass40);
        int int42 = week2.compareTo((java.lang.Object) wildcardClass40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60506053200001L) + "'", long23 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Week 35, 52" + "'", str24, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(97, year5);
        long long10 = week9.getFirstMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week();
        long long17 = week16.getFirstMillisecond();
        org.jfree.data.time.Year year18 = week16.getYear();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(0, year18);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(11, year18);
        long long21 = week20.getSerialIndex();
        org.jfree.data.time.Year year22 = week20.getYear();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) (short) 1, year22);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(4, year22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(32, year22);
        boolean boolean26 = week9.equals((java.lang.Object) year22);
        long long27 = week9.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1667080800000L + "'", long10 == 1667080800000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1637449200000L + "'", long17 == 1637449200000L);
        org.junit.Assert.assertNotNull(year18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 107124L + "'", long21 == 107124L);
        org.junit.Assert.assertNotNull(year22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 107210L + "'", long27 == 107210L);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getYearValue();
        long long8 = week2.getLastMillisecond();
        long long9 = week2.getSerialIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2791L + "'", long9 == 2791L);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Date date74 = week73.getStart();
        java.util.Date date75 = week73.getEnd();
        java.util.Calendar calendar76 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long77 = week73.getLastMillisecond(calendar76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(52, year3);
        java.util.Date date5 = year3.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        java.util.Date date7 = week6.getStart();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 27 00:00:00 CET 2020");
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(32, (int) (short) 100);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        java.lang.Class<?> wildcardClass6 = week2.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 08 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        java.util.Date date6 = week4.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.next();
        org.jfree.data.time.Year year8 = week4.getYear();
        long long9 = week4.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1608418800000L + "'", long9 == 1608418800000L);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        java.util.Date date4 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date14);
        long long21 = week20.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week20.next();
        java.lang.Class<?> wildcardClass23 = regularTimePeriod22.getClass();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        int int28 = week26.getYearValue();
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int30 = week26.compareTo((java.lang.Object) timeZone29);
        int int31 = week26.getYearValue();
        int int33 = week26.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week26.previous();
        int int35 = week26.getYearValue();
        long long36 = week26.getLastMillisecond();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        java.lang.Class<?> wildcardClass41 = week39.getClass();
        java.lang.Class class42 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass41);
        boolean boolean43 = week26.equals((java.lang.Object) wildcardClass41);
        int int44 = week26.getYearValue();
        java.lang.Object obj45 = null;
        int int46 = week26.compareTo(obj45);
        long long47 = week26.getSerialIndex();
        java.util.Date date48 = week26.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str52 = week51.toString();
        long long53 = week51.getMiddleMillisecond();
        long long54 = week51.getLastMillisecond();
        long long55 = week51.getFirstMillisecond();
        java.util.Date date56 = week51.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week51.next();
        java.util.Date date58 = week51.getEnd();
        java.util.Date date59 = week51.getStart();
        java.lang.Class class60 = null;
        java.util.Date date61 = null;
        java.util.TimeZone timeZone62 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = org.jfree.data.time.RegularTimePeriod.createInstance(class60, date61, timeZone62);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date59, timeZone62);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date48, timeZone62);
        java.util.Locale locale66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date4, timeZone62, locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Oct 31 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5150L + "'", long21 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60505750800001L) + "'", long36 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2791L + "'", long47 == 2791L);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Week 35, 52" + "'", str52, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-60506053200001L) + "'", long53 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-60505750800001L) + "'", long54 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-60506355600000L) + "'", long55 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year6);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        long long21 = week13.getMiddleMillisecond();
        boolean boolean22 = week10.equals((java.lang.Object) week13);
        long long23 = week10.getMiddleMillisecond();
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = week10.getLastMillisecond(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506053200001L) + "'", long21 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1669201199999L + "'", long23 == 1669201199999L);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        long long9 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2791L + "'", long9 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.previous();
        java.util.Date date12 = week10.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date16 = week15.getStart();
        java.util.Date date17 = week15.getEnd();
        java.util.Date date18 = week15.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date22, timeZone28);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date18, timeZone28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date12, timeZone28);
        int int33 = week2.compareTo((java.lang.Object) date12);
        java.util.Calendar calendar34 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long35 = week2.getLastMillisecond(calendar34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        int int8 = week2.getWeek();
        long long9 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.next();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((-1), 35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.previous();
        java.util.Date date15 = regularTimePeriod14.getStart();
        boolean boolean16 = week2.equals((java.lang.Object) date15);
        long long17 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-59101405200000L) + "'", long9 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 05 00:00:00 CET 34");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-59100800400001L) + "'", long17 == (-59100800400001L));
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year9 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, (int) ' ');
        java.util.Date date3 = week2.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year4 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (32) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Feb 23 23:59:59 CET 32");
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date13, timeZone19);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        java.lang.Class<?> wildcardClass26 = week24.getClass();
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass26);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.lang.Class class32 = null;
        java.util.Date date33 = null;
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance(class32, date33, timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date31, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date40 = week39.getStart();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date40);
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date40, timeZone42);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date13, timeZone42);
        long long45 = week44.getFirstMillisecond();
        long long46 = week44.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-59101405200000L) + "'", long45 == (-59101405200000L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-59100800400001L) + "'", long46 == (-59100800400001L));
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        java.util.Calendar calendar44 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long45 = week2.getFirstMillisecond(calendar44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        long long44 = week2.getMiddleMillisecond();
        int int45 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week2.previous();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year47 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60506053200001L) + "'", long44 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (short) 10, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(3, year5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, 2021);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 1, 4);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        java.lang.Object obj3 = null;
        boolean boolean4 = week2.equals(obj3);
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        java.util.Date date19 = week2.getEnd();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.previous();
        int int24 = week22.getYearValue();
        java.util.Date date25 = week22.getEnd();
        long long26 = week22.getMiddleMillisecond();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        int int34 = week29.getYearValue();
        int int36 = week29.compareTo((java.lang.Object) 9);
        java.util.Date date37 = week29.getStart();
        boolean boolean38 = week22.equals((java.lang.Object) date37);
        java.util.Date date39 = week22.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date51);
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance(class47, date51, timeZone53);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date39, timeZone53);
        java.util.Locale locale56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date19, timeZone53, locale56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506053200001L) + "'", long26 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod54);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getLastMillisecond();
        int int6 = week4.getYearValue();
        java.lang.String str7 = week4.toString();
        long long8 = week4.getSerialIndex();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week4.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59100800400001L) + "'", long5 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 9, 97" + "'", str7, "Week 9, 97");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 5150L + "'", long8 == 5150L);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Date date74 = week73.getStart();
        java.util.Date date75 = week73.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week73.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.util.Date date6 = week5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        long long13 = week9.getLastMillisecond();
        boolean boolean14 = week5.equals((java.lang.Object) week9);
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            week5.peg(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-59100800400001L) + "'", long13 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        java.util.Date date4 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week7.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week7.next();
        java.util.Date date17 = week7.getStart();
        java.util.Date date18 = week7.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        int int28 = week21.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week21.previous();
        int int30 = week21.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week21.next();
        java.lang.Class<?> wildcardClass32 = regularTimePeriod31.getClass();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        int int47 = week42.getYearValue();
        int int49 = week42.compareTo((java.lang.Object) 9);
        java.util.Date date50 = week42.getStart();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass37, date50, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str63 = week62.toString();
        long long64 = week62.getMiddleMillisecond();
        long long65 = week62.getLastMillisecond();
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.next();
        java.lang.Class<?> wildcardClass70 = week68.getClass();
        java.lang.Class class71 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass70);
        int int72 = week62.compareTo((java.lang.Object) wildcardClass70);
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass70);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week76.next();
        java.lang.Class<?> wildcardClass78 = week76.getClass();
        java.lang.Class class79 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass78);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date83 = week82.getStart();
        java.lang.Class class84 = null;
        java.util.Date date85 = null;
        java.util.TimeZone timeZone86 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance(class84, date85, timeZone86);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass78, date83, timeZone86);
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod90 = org.jfree.data.time.RegularTimePeriod.createInstance(class73, date83, timeZone89);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod91 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date50, timeZone89);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date18, timeZone89);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date4, timeZone89);
        java.util.Date date94 = week93.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Oct 31 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Week 35, 52" + "'", str63, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-60506053200001L) + "'", long64 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-60505750800001L) + "'", long65 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(class71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(class79);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone86);
// flaky:         org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod90);
        org.junit.Assert.assertNotNull(regularTimePeriod91);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Nov 05 23:59:59 CET 1");
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        long long5 = week2.getLastMillisecond();
        java.lang.Class<?> wildcardClass6 = week2.getClass();
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week();
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(52, year12);
        java.util.Date date14 = year12.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(52, year12);
        int int16 = week15.getYearValue();
        java.util.Date date17 = week15.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        java.lang.Class<?> wildcardClass22 = week20.getClass();
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        int int32 = week27.getYearValue();
        int int34 = week27.compareTo((java.lang.Object) 9);
        java.util.Date date35 = week27.getStart();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date35);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        int int41 = week39.getYearValue();
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int43 = week39.compareTo((java.lang.Object) timeZone42);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass22, date35, timeZone42);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.previous();
        int int49 = week47.getYearValue();
        java.util.Date date50 = week47.getStart();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date50, timeZone51);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date35, timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass6, date17, timeZone51);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59100800400001L) + "'", long5 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1637449200000L + "'", long11 == 1637449200000L);
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2021 + "'", int16 == 2021);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Dec 25 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.lang.String str7 = week2.toString();
        long long8 = week2.getSerialIndex();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.lang.String str6 = week2.toString();
        int int7 = week2.getWeek();
        long long8 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 9, 97" + "'", str6, "Week 9, 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-59101405200000L) + "'", long8 == (-59101405200000L));
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1969), (-1));
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week10.next();
        java.util.Date date13 = week10.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week();
        long long17 = week16.getFirstMillisecond();
        org.jfree.data.time.Year year18 = week16.getYear();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(52, year18);
        java.util.Date date20 = year18.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(100, year18);
        boolean boolean22 = week10.equals((java.lang.Object) 100);
        long long23 = week10.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1637449200000L + "'", long17 == 1637449200000L);
        org.junit.Assert.assertNotNull(year18);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60505750800001L) + "'", long23 == (-60505750800001L));
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        int int15 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.previous();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        long long22 = week19.getLastMillisecond();
        java.util.Date date23 = week19.getEnd();
        long long24 = week19.getLastMillisecond();
        boolean boolean25 = week2.equals((java.lang.Object) long24);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getMiddleMillisecond();
        int int9 = week2.getWeek();
        long long10 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506355600000L) + "'", long10 == (-60506355600000L));
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            week11.peg(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        int int13 = week2.getWeek();
        int int14 = week2.getWeek();
        java.lang.String str15 = week2.toString();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getLastMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.util.Date date7 = week2.getEnd();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        long long16 = week15.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week15.next();
        java.util.Date date18 = week15.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        int int28 = week21.compareTo((java.lang.Object) 9);
        int int29 = week21.getYearValue();
        long long30 = week21.getLastMillisecond();
        int int31 = week21.getWeek();
        java.util.Date date32 = week21.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date36 = week35.getStart();
        java.util.Date date37 = week35.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        java.lang.Class<?> wildcardClass42 = week40.getClass();
        java.lang.Class class43 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        java.lang.Class class48 = null;
        java.util.Date date49 = null;
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date49, timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date47, timeZone50);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date37, timeZone50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date32, timeZone50);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone50);
        long long56 = week55.getFirstMillisecond();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(2021, (int) (short) 10);
        long long60 = week59.getFirstMillisecond();
        java.util.Date date61 = week59.getStart();
        java.lang.Class<?> wildcardClass62 = date61.getClass();
        boolean boolean63 = week55.equals((java.lang.Object) date61);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5150L + "'", long16 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60505750800001L) + "'", long30 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(class43);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-59101405200000L) + "'", long56 == (-59101405200000L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-61868970000000L) + "'", long60 == (-61868970000000L));
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Jun 16 00:00:00 CET 9");
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        int int11 = week2.getWeek();
        long long12 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        long long4 = week2.getFirstMillisecond();
        long long5 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61768573200000L) + "'", long4 == (-61768573200000L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-61767968400001L) + "'", long5 == (-61767968400001L));
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        int int5 = week2.getYearValue();
        int int6 = week2.getYearValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date16);
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            week19.peg(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        long long36 = week35.getLastMillisecond();
        long long37 = week35.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60505750800001L) + "'", long36 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60505750800001L) + "'", long37 == (-60505750800001L));
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        java.util.Date date5 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        long long14 = week8.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass15 = week8.getClass();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date19, timeZone25);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date19);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date19, timeZone34);
        boolean boolean37 = week2.equals((java.lang.Object) week36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week2.previous();
        java.lang.String str39 = week2.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Week 9, 97" + "'", str39, "Week 9, 97");
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1924), 53);
        long long3 = week2.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-60419869200001L) + "'", long3 == (-60419869200001L));
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week();
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(52, year12);
        java.util.Date date14 = year12.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((-1969), year12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week2.compareTo((java.lang.Object) week15);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1637449200000L + "'", long11 == 1637449200000L);
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1969) + "'", int17 == (-1969));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(97, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = week27.compareTo((java.lang.Object) week31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (10) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        long long10 = week7.getLastMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        int int17 = week7.compareTo((java.lang.Object) wildcardClass15);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        boolean boolean19 = week4.equals((java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass20 = week4.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.lang.Class class16 = null;
        java.util.Date date17 = null;
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date17, timeZone18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date15, timeZone18);
        java.lang.Class<?> wildcardClass21 = timeZone18.getClass();
        boolean boolean22 = week2.equals((java.lang.Object) wildcardClass21);
        java.util.Date date23 = week2.getStart();
        java.util.Date date24 = week2.getEnd();
        java.util.Date date25 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        long long23 = week20.getSerialIndex();
        java.util.Date date24 = week20.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date24);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date24);
        long long27 = week26.getLastMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5150L + "'", long23 == 5150L);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-59100800400001L) + "'", long27 == (-59100800400001L));
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 3);
        int int3 = week2.getYearValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year4 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (3) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date9 = year5.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        long long19 = week13.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass20 = week13.getClass();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass20, date24, timeZone30);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        int int40 = week35.getYearValue();
        int int42 = week35.compareTo((java.lang.Object) 9);
        java.util.Date date43 = week35.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        java.lang.Class<?> wildcardClass48 = week46.getClass();
        java.lang.Class class49 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass48);
        java.lang.Class class50 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        int int58 = week53.getYearValue();
        int int60 = week53.compareTo((java.lang.Object) 9);
        java.util.Date date61 = week53.getStart();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date61);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        int int67 = week65.getYearValue();
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int69 = week65.compareTo((java.lang.Object) timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass48, date61, timeZone68);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.previous();
        int int75 = week73.getYearValue();
        java.util.Date date76 = week73.getStart();
        java.util.TimeZone timeZone77 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date76, timeZone77);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date61, timeZone77);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date43, timeZone77);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date24, timeZone77);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date9, timeZone77);
        java.util.TimeZone timeZone83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date9, timeZone83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506053200001L) + "'", long19 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(class49);
        org.junit.Assert.assertNotNull(class50);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone77);
// flaky:         org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        long long14 = week2.getLastMillisecond();
        int int15 = week2.getYearValue();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date8 = week7.getEnd();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date12 = week11.getStart();
        java.util.Date date13 = week11.getEnd();
        int int14 = week11.getYearValue();
        long long15 = week11.getLastMillisecond();
        java.lang.Class<?> wildcardClass16 = week11.getClass();
        java.util.Date date17 = null;
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date21 = week20.getStart();
        int int22 = week20.getYearValue();
        java.util.Date date23 = week20.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        int int38 = week33.getYearValue();
        int int40 = week33.compareTo((java.lang.Object) 9);
        java.util.Date date41 = week33.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date41, timeZone48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.previous();
        int int55 = week53.getYearValue();
        java.util.Date date56 = week53.getStart();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date56, timeZone57);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date41, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date23, timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date17, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date8, timeZone57);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date3, timeZone57);
        long long64 = week63.getSerialIndex();
        java.util.Date date65 = week63.getStart();
        int int67 = week63.compareTo((java.lang.Object) "Week 0, 6");
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-59100800400001L) + "'", long15 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 5150L + "'", long64 == 5150L);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        java.util.Date date19 = week2.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date19);
        long long21 = week20.getFirstMillisecond();
        int int22 = week20.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506355600000L) + "'", long21 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        java.util.Date date8 = year6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(100, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(35, year6);
        java.util.Date date11 = year6.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(52, year6);
        java.lang.Object obj13 = null;
        int int14 = week12.compareTo(obj13);
        long long15 = week12.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1640170799999L + "'", long15 == 1640170799999L);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week();
        long long8 = week7.getFirstMillisecond();
        org.jfree.data.time.Year year9 = week7.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(0, year9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(53, year9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '4', year9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(52, year9);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(2021, year9);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(32, year9);
        org.jfree.data.time.Year year16 = week15.getYear();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(97, year16);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1637449200000L + "'", long8 == 1637449200000L);
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertNotNull(year16);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int15 = week2.compareTo((java.lang.Object) 0);
        int int16 = week2.getWeek();
        java.util.Date date17 = week2.getStart();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str21 = week20.toString();
        long long22 = week20.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week20.next();
        java.util.Date date24 = regularTimePeriod23.getEnd();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date28, timeZone34);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date24, timeZone34);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str41 = week40.toString();
        long long42 = week40.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week40.next();
        java.util.Date date44 = regularTimePeriod43.getEnd();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date48 = week47.getStart();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        int int53 = week51.getYearValue();
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int55 = week51.compareTo((java.lang.Object) timeZone54);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date48, timeZone54);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date44, timeZone54);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date24, timeZone54);
        java.util.Locale locale59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date17, timeZone54, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Week 35, 52" + "'", str21, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2791L + "'", long22 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Week 35, 52" + "'", str41, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2791L + "'", long42 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(10, 0);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        int int7 = week5.getYearValue();
        java.util.TimeZone timeZone8 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int9 = week5.compareTo((java.lang.Object) timeZone8);
        int int10 = week5.getYearValue();
        int int12 = week5.compareTo((java.lang.Object) 9);
        int int13 = week5.getYearValue();
        long long14 = week5.getLastMillisecond();
        int int15 = week5.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week5.previous();
        java.util.Date date17 = week5.getEnd();
        boolean boolean18 = week2.equals((java.lang.Object) week5);
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = week5.getMiddleMillisecond(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        java.lang.String str19 = week2.toString();
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = week2.getLastMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, 100);
        long long3 = week2.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-58952019600000L) + "'", long3 == (-58952019600000L));
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        java.lang.String str6 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        java.util.Date date6 = week2.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year7 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.lang.String str9 = week2.toString();
        java.lang.String str10 = week2.toString();
        java.util.Date date11 = week2.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str15 = week14.toString();
        long long16 = week14.getMiddleMillisecond();
        long long17 = week14.getLastMillisecond();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        java.lang.Class<?> wildcardClass22 = week20.getClass();
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        int int24 = week14.compareTo((java.lang.Object) wildcardClass22);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date30 = week29.getStart();
        int int31 = week29.getYearValue();
        java.util.Date date32 = week29.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        int int40 = week35.getYearValue();
        int int42 = week35.compareTo((java.lang.Object) 9);
        int int43 = week35.getYearValue();
        long long44 = week35.getLastMillisecond();
        int int45 = week35.getWeek();
        java.util.Date date46 = week35.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date50 = week49.getStart();
        java.util.Date date51 = week49.getEnd();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        java.lang.Class<?> wildcardClass56 = week54.getClass();
        java.lang.Class class57 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass56);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date61 = week60.getStart();
        java.lang.Class class62 = null;
        java.util.Date date63 = null;
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance(class62, date63, timeZone64);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass56, date61, timeZone64);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date51, timeZone64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date46, timeZone64);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str72 = week71.toString();
        long long73 = week71.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week71.next();
        java.util.Date date75 = regularTimePeriod74.getEnd();
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date79 = week78.getStart();
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = week82.next();
        int int84 = week82.getYearValue();
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int86 = week82.compareTo((java.lang.Object) timeZone85);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date79, timeZone85);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date75, timeZone85);
        org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(date46, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod90 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass22, date32, timeZone85);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date11, timeZone85);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60505750800001L) + "'", long17 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60505750800001L) + "'", long44 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(class57);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Week 35, 52" + "'", str72, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 2791L + "'", long73 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod90);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        long long13 = week2.getSerialIndex();
        int int14 = week2.getYearValue();
        long long15 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5150L + "'", long13 == 5150L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-59101405200000L) + "'", long15 == (-59101405200000L));
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        java.lang.String str7 = week2.toString();
        int int8 = week2.getYearValue();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        int int10 = week5.getWeek();
        long long11 = week5.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week5.next();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2791L + "'", long11 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getSerialIndex();
        int int3 = week0.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week0.previous();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107161L + "'", long2 == 107161L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2021 + "'", int3 == 2021);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(11, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(3, year7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 100, year7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) ' ', year7);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        java.util.Date date8 = year6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, year6);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (byte) -1, year6);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        java.util.Date date20 = week2.getStart();
        int int21 = week2.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        java.lang.Class<?> wildcardClass14 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.lang.String str13 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week2.previous();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year15 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        java.util.Date date16 = week8.getStart();
        long long17 = week8.getLastMillisecond();
        boolean boolean18 = week4.equals((java.lang.Object) long17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        int int28 = week21.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week21.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week21.next();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        java.lang.Class<?> wildcardClass35 = week33.getClass();
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass35);
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass35);
        boolean boolean38 = week21.equals((java.lang.Object) wildcardClass35);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.previous();
        int int43 = week41.getYearValue();
        java.util.Date date44 = week41.getEnd();
        java.lang.String str45 = week41.toString();
        java.util.Date date46 = week41.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str50 = week49.toString();
        long long51 = week49.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week49.next();
        java.util.Date date53 = week49.getEnd();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date53);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date53);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str59 = week58.toString();
        long long60 = week58.getMiddleMillisecond();
        long long61 = week58.getLastMillisecond();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.next();
        java.lang.Class<?> wildcardClass66 = week64.getClass();
        java.lang.Class class67 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass66);
        int int68 = week58.compareTo((java.lang.Object) wildcardClass66);
        java.lang.Class class69 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass66);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.next();
        java.lang.Class<?> wildcardClass74 = week72.getClass();
        java.lang.Class class75 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass74);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date79 = week78.getStart();
        java.lang.Class class80 = null;
        java.util.Date date81 = null;
        java.util.TimeZone timeZone82 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance(class80, date81, timeZone82);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass74, date79, timeZone82);
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance(class69, date79, timeZone85);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date53, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass35, date46, timeZone85);
        int int89 = week4.compareTo((java.lang.Object) timeZone85);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60505750800001L) + "'", long17 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Week 35, 52" + "'", str45, "Week 35, 52");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Week 35, 52" + "'", str50, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60506053200001L) + "'", long51 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Week 35, 52" + "'", str59, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60506053200001L) + "'", long60 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-60505750800001L) + "'", long61 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(class67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(class69);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(class75);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 4);
        long long3 = week2.getFirstMillisecond();
        int int4 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62041942800000L) + "'", long3 == (-62041942800000L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getFirstMillisecond();
        long long16 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(3, year4);
        java.util.Date date8 = week7.getStart();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Jan 10 00:00:00 CET 2021");
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(1, year5);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week9.getFirstMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, 2021);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 10, 32);
        long long3 = week2.getFirstMillisecond();
        java.lang.Object obj4 = null;
        int int5 = week2.compareTo(obj4);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-61152282000000L) + "'", long3 == (-61152282000000L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) -1, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(11, year6);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        int int10 = week5.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week5.next();
        long long12 = week5.getSerialIndex();
        long long13 = week5.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506355600000L) + "'", long13 == (-60506355600000L));
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getMiddleMillisecond();
        java.util.Date date15 = week2.getEnd();
        int int16 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        long long18 = week15.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        int int25 = week15.compareTo((java.lang.Object) wildcardClass23);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        boolean boolean27 = week12.equals((java.lang.Object) wildcardClass23);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.previous();
        int int32 = week30.getYearValue();
        java.util.Date date33 = week30.getStart();
        int int34 = week30.getYearValue();
        long long35 = week30.getSerialIndex();
        boolean boolean36 = week12.equals((java.lang.Object) week30);
        boolean boolean37 = week2.equals((java.lang.Object) boolean36);
        java.util.Calendar calendar38 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long39 = week2.getMiddleMillisecond(calendar38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2791L + "'", long35 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        java.util.Date date4 = week2.getStart();
        int int5 = week2.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Oct 31 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 1, (int) (byte) 0);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.previous();
        java.util.Date date20 = week18.getEnd();
        int int21 = week18.getWeek();
        boolean boolean22 = week4.equals((java.lang.Object) int21);
        long long23 = week4.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week4.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-59100800400001L) + "'", long23 == (-59100800400001L));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        long long14 = week2.getFirstMillisecond();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506355600000L) + "'", long14 == (-60506355600000L));
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        boolean boolean6 = week2.equals((java.lang.Object) 11);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week9.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week9.previous();
        boolean boolean17 = week2.equals((java.lang.Object) regularTimePeriod16);
        long long18 = week2.getFirstMillisecond();
        long long19 = week2.getMiddleMillisecond();
        long long20 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506053200001L) + "'", long19 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2791L + "'", long20 == 2791L);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        java.lang.Class<?> wildcardClass17 = week2.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        java.lang.Class<?> wildcardClass8 = week7.getClass();
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.previous();
        int int14 = week12.getYearValue();
        java.util.Date date15 = week12.getStart();
        java.util.TimeZone timeZone16 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass8, date15, timeZone16);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNull(regularTimePeriod17);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        int int7 = week5.getYearValue();
        java.util.TimeZone timeZone8 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int9 = week5.compareTo((java.lang.Object) timeZone8);
        int int10 = week5.getYearValue();
        int int12 = week5.compareTo((java.lang.Object) 9);
        java.util.Date date13 = week5.getStart();
        int int15 = week5.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week5.next();
        int int17 = week5.getWeek();
        boolean boolean18 = week2.equals((java.lang.Object) week5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(regularTimePeriod19);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        java.util.Date date8 = week7.getStart();
        long long9 = week7.getMiddleMillisecond();
        java.util.Date date10 = week7.getStart();
        java.lang.Class class11 = null;
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date15 = week14.getEnd();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        java.util.Date date20 = week18.getEnd();
        int int21 = week18.getYearValue();
        long long22 = week18.getLastMillisecond();
        java.lang.Class<?> wildcardClass23 = week18.getClass();
        java.util.Date date24 = null;
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date28 = week27.getStart();
        int int29 = week27.getYearValue();
        java.util.Date date30 = week27.getEnd();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        java.lang.Class<?> wildcardClass35 = week33.getClass();
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass35);
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass35);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        int int45 = week40.getYearValue();
        int int47 = week40.compareTo((java.lang.Object) 9);
        java.util.Date date48 = week40.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date48);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.next();
        int int54 = week52.getYearValue();
        java.util.TimeZone timeZone55 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int56 = week52.compareTo((java.lang.Object) timeZone55);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass35, date48, timeZone55);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.previous();
        int int62 = week60.getYearValue();
        java.util.Date date63 = week60.getStart();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date63, timeZone64);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date48, timeZone64);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date30, timeZone64);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date24, timeZone64);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance(class11, date15, timeZone64);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date10, timeZone64);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-59100800400001L) + "'", long22 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNull(regularTimePeriod69);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getLastMillisecond();
        int int6 = week4.getYearValue();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str10 = week9.toString();
        long long11 = week9.getMiddleMillisecond();
        long long12 = week9.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        int int19 = week9.compareTo((java.lang.Object) wildcardClass17);
        long long20 = week9.getMiddleMillisecond();
        java.util.Date date21 = week9.getEnd();
        int int22 = week9.getWeek();
        long long23 = week9.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week9.next();
        long long25 = week9.getFirstMillisecond();
        long long26 = week9.getFirstMillisecond();
        boolean boolean27 = week4.equals((java.lang.Object) long26);
        java.lang.String str28 = week4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year29 = week4.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59100800400001L) + "'", long5 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60505750800001L) + "'", long23 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60506355600000L) + "'", long25 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506355600000L) + "'", long26 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Week 9, 97" + "'", str28, "Week 9, 97");
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Year year8 = week7.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(97, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (byte) 100, year8);
        long long12 = week11.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1668898800000L + "'", long12 == 1668898800000L);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 10, 2);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getLastMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Year year9 = week8.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(3, year9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) 'a', year9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, year9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(35, year9);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(year9);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        int int23 = week15.getYearValue();
        long long24 = week15.getLastMillisecond();
        int int25 = week15.getWeek();
        java.util.Date date26 = week15.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        java.util.Date date31 = week29.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        java.lang.Class class42 = null;
        java.util.Date date43 = null;
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance(class42, date43, timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date41, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date31, timeZone44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date26, timeZone44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str52 = week51.toString();
        long long53 = week51.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week51.next();
        java.util.Date date55 = regularTimePeriod54.getEnd();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date59 = week58.getStart();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date59, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date55, timeZone65);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date26, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date3, timeZone65);
        java.util.Date date71 = week70.getEnd();
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(date71);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year73 = week72.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Week 35, 52" + "'", str52, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2791L + "'", long53 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week();
        long long8 = week7.getFirstMillisecond();
        org.jfree.data.time.Year year9 = week7.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(0, year9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(11, year9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(3, year9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) (short) 100, year9);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) (short) -1, year9);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(2, year9);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((-1), year9);
        int int17 = week16.getYearValue();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1637449200000L + "'", long8 == 1637449200000L);
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2021 + "'", int17 == 2021);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        int int3 = week0.getWeek();
        long long4 = week0.getLastMillisecond();
        long long5 = week0.getFirstMillisecond();
        java.util.Date date6 = week0.getEnd();
        java.util.Date date7 = week0.getEnd();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            week0.peg(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1638053999999L + "'", long4 == 1638053999999L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 27 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 27 23:59:59 CET 2021");
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(7, 35);
        long long3 = week2.getSerialIndex();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1862L + "'", long3 == 1862L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getYearValue();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week();
        long long10 = week9.getFirstMillisecond();
        org.jfree.data.time.Year year11 = week9.getYear();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(0, year11);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(53, year11);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '4', year11);
        int int15 = week14.getYearValue();
        boolean boolean16 = week2.equals((java.lang.Object) int15);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1637449200000L + "'", long10 == 1637449200000L);
        org.junit.Assert.assertNotNull(year11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2021 + "'", int15 == 2021);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week();
        long long75 = week74.getFirstMillisecond();
        org.jfree.data.time.Year year76 = week74.getYear();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(0, year76);
        java.util.Date date78 = week77.getStart();
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str82 = week81.toString();
        long long83 = week81.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = week81.next();
        java.util.Date date85 = week81.getEnd();
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week86.next();
        java.util.Date date88 = week86.getEnd();
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date88, timeZone89);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date78, timeZone89);
        java.util.Locale locale92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date31, timeZone89, locale92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1637449200000L + "'", long75 == 1637449200000L);
        org.junit.Assert.assertNotNull(year76);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Week 35, 52" + "'", str82, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-60506053200001L) + "'", long83 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        boolean boolean11 = week2.equals((java.lang.Object) date10);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week();
        long long14 = week13.getFirstMillisecond();
        org.jfree.data.time.Year year15 = week13.getYear();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(0, year15);
        org.jfree.data.time.Year year17 = week16.getYear();
        java.util.Date date18 = week16.getEnd();
        int int19 = week2.compareTo((java.lang.Object) date18);
        int int20 = week2.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1637449200000L + "'", long14 == 1637449200000L);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertNotNull(year17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Dec 26 23:59:59 CET 2020");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) (byte) 100, year4);
        long long6 = year4.getMiddleMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(6, year4);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week();
        long long12 = week11.getFirstMillisecond();
        org.jfree.data.time.Year year13 = week11.getYear();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(5, year13);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(10, year13);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(2021, year13);
        java.util.Date date17 = week16.getEnd();
        int int18 = week7.compareTo((java.lang.Object) date17);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1625223599999L + "'", long6 == 1625223599999L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1637449200000L + "'", long12 == 1637449200000L);
        org.junit.Assert.assertNotNull(year13);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Jun 20 23:59:59 CEST 2020");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        long long23 = week20.getSerialIndex();
        java.util.Date date24 = week20.getStart();
        java.lang.Class class25 = null;
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str29 = week28.toString();
        long long30 = week28.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week28.next();
        java.util.Date date32 = week28.getEnd();
        long long33 = week28.getLastMillisecond();
        java.util.Date date34 = week28.getEnd();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str38 = week37.toString();
        long long39 = week37.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week37.next();
        java.util.Date date41 = week37.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.util.Date date44 = week42.getEnd();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date44, timeZone45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance(class25, date34, timeZone45);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date24, timeZone45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5150L + "'", long23 == 5150L);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Week 35, 52" + "'", str29, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60506053200001L) + "'", long30 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-60505750800001L) + "'", long33 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Week 35, 52" + "'", str38, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60506053200001L) + "'", long39 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        java.lang.String str7 = week2.toString();
        int int8 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.next();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date13 = week12.getStart();
        int int14 = week12.getYearValue();
        java.util.Date date15 = week12.getEnd();
        java.util.Date date16 = week12.getEnd();
        boolean boolean17 = week2.equals((java.lang.Object) week12);
        java.util.Date date18 = week12.getStart();
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = week12.getFirstMillisecond(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week11.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week11.previous();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            week11.peg(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year3 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (32) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(52, year3);
        java.util.Date date5 = year3.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.lang.Class class16 = null;
        java.util.Date date17 = null;
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date17, timeZone18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date15, timeZone18);
        java.lang.Class<?> wildcardClass21 = regularTimePeriod20.getClass();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        long long25 = week24.getSerialIndex();
        java.util.Date date26 = week24.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str30 = week29.toString();
        long long31 = week29.getMiddleMillisecond();
        long long32 = week29.getLastMillisecond();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        int int39 = week29.compareTo((java.lang.Object) wildcardClass37);
        long long40 = week29.getMiddleMillisecond();
        java.util.Date date41 = week29.getEnd();
        int int42 = week29.getWeek();
        long long43 = week29.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week29.next();
        long long45 = week29.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week29.next();
        java.util.Date date47 = week29.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        java.lang.Class<?> wildcardClass63 = week61.getClass();
        java.lang.Class class64 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass63);
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass63);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.next();
        int int70 = week68.getYearValue();
        java.util.TimeZone timeZone71 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int72 = week68.compareTo((java.lang.Object) timeZone71);
        int int73 = week68.getYearValue();
        int int75 = week68.compareTo((java.lang.Object) 9);
        java.util.Date date76 = week68.getStart();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date76);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = week80.next();
        int int82 = week80.getYearValue();
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int84 = week80.compareTo((java.lang.Object) timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass63, date76, timeZone83);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = week88.previous();
        int int90 = week88.getYearValue();
        java.util.Date date91 = week88.getStart();
        java.util.TimeZone timeZone92 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date91, timeZone92);
        org.jfree.data.time.Week week94 = new org.jfree.data.time.Week(date76, timeZone92);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date58, timeZone92);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date47, timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod97 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass21, date26, timeZone92);
        org.jfree.data.time.Week week98 = new org.jfree.data.time.Week(date5, timeZone92);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1748L + "'", long25 == 1748L);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Week 35, 52" + "'", str30, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-60506053200001L) + "'", long31 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60505750800001L) + "'", long32 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-60506053200001L) + "'", long40 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60505750800001L) + "'", long43 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506355600000L) + "'", long45 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(class64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 52 + "'", int90 == 52);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod97);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.lang.String str11 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week7.previous();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        boolean boolean14 = week4.equals((java.lang.Object) wildcardClass13);
        int int15 = week4.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        java.lang.String str13 = week11.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 97, -1" + "'", str6, "Week 97, -1");
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.lang.Class<?> wildcardClass7 = week2.getClass();
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        long long16 = week14.getMiddleMillisecond();
        java.lang.String str17 = week14.toString();
        boolean boolean18 = week11.equals((java.lang.Object) week14);
        java.util.Date date19 = week11.getStart();
        java.util.Date date20 = week11.getStart();
        java.lang.Class class21 = null;
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        long long29 = week27.getMiddleMillisecond();
        java.lang.String str30 = week27.toString();
        boolean boolean31 = week24.equals((java.lang.Object) week27);
        java.util.Date date32 = week24.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str36 = week35.toString();
        long long37 = week35.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week35.next();
        java.util.Date date39 = regularTimePeriod38.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date43 = week42.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        int int48 = week46.getYearValue();
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int50 = week46.compareTo((java.lang.Object) timeZone49);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date43, timeZone49);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date39, timeZone49);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str56 = week55.toString();
        long long57 = week55.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week55.next();
        java.util.Date date59 = regularTimePeriod58.getEnd();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.next();
        int int68 = week66.getYearValue();
        java.util.TimeZone timeZone69 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int70 = week66.compareTo((java.lang.Object) timeZone69);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date63, timeZone69);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(date59, timeZone69);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date39, timeZone69);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class21, date32, timeZone69);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass7, date20, timeZone69);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Week 35, 52" + "'", str30, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Week 35, 52" + "'", str36, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2791L + "'", long37 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Week 35, 52" + "'", str56, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 2791L + "'", long57 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod75);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date10, timeZone19);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.previous();
        int int25 = week23.getYearValue();
        java.util.Date date26 = week23.getStart();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date26, timeZone27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance(class6, date10, timeZone27);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        int int37 = week32.getYearValue();
        int int39 = week32.compareTo((java.lang.Object) 9);
        java.util.Date date40 = week32.getStart();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date40);
        long long42 = week41.getFirstMillisecond();
        java.util.Date date43 = week41.getEnd();
        long long44 = week41.getFirstMillisecond();
        java.lang.Class<?> wildcardClass45 = week41.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        int int54 = week49.getYearValue();
        int int56 = week49.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week49.previous();
        int int58 = week49.getYearValue();
        long long59 = week49.getLastMillisecond();
        int int60 = week49.getWeek();
        int int61 = week49.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week49.next();
        long long63 = week49.getSerialIndex();
        java.util.Date date64 = week49.getEnd();
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date64);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week();
        long long68 = week67.getFirstMillisecond();
        org.jfree.data.time.Year year69 = week67.getYear();
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(0, year69);
        java.util.Date date71 = week70.getStart();
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str75 = week74.toString();
        long long76 = week74.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week74.next();
        java.util.Date date78 = week74.getEnd();
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date78);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = week79.next();
        java.util.Date date81 = week79.getEnd();
        java.util.TimeZone timeZone82 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date81, timeZone82);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date71, timeZone82);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class46, date64, timeZone82);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date10, timeZone82);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60506355600000L) + "'", long42 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60506355600000L) + "'", long44 == (-60506355600000L));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60505750800001L) + "'", long59 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 2791L + "'", long63 == 2791L);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1637449200000L + "'", long68 == 1637449200000L);
        org.junit.Assert.assertNotNull(year69);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Week 35, 52" + "'", str75, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-60506053200001L) + "'", long76 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod80);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getMiddleMillisecond();
        long long15 = week2.getSerialIndex();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str19 = week18.toString();
        long long20 = week18.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week18.next();
        java.util.Date date22 = week18.getEnd();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        int int30 = week25.getYearValue();
        int int32 = week25.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week25.previous();
        int int34 = week25.getYearValue();
        long long35 = week25.getLastMillisecond();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        java.lang.Class<?> wildcardClass40 = week38.getClass();
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        boolean boolean42 = week25.equals((java.lang.Object) wildcardClass40);
        boolean boolean43 = week18.equals((java.lang.Object) wildcardClass40);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        java.util.Date date48 = week46.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        int int53 = week51.getYearValue();
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int55 = week51.compareTo((java.lang.Object) timeZone54);
        int int56 = week51.getYearValue();
        long long57 = week51.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass58 = week51.getClass();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date62 = week61.getStart();
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        int int67 = week65.getYearValue();
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int69 = week65.compareTo((java.lang.Object) timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date62, timeZone68);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.next();
        java.lang.Class<?> wildcardClass75 = week73.getClass();
        java.lang.Class class76 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass75);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date80 = week79.getStart();
        java.lang.Class class81 = null;
        java.util.Date date82 = null;
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class81, date82, timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass75, date80, timeZone83);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date89 = week88.getStart();
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date89);
        java.util.TimeZone timeZone91 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod92 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass75, date89, timeZone91);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date62, timeZone91);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date48, timeZone91);
        boolean boolean95 = week2.equals((java.lang.Object) wildcardClass40);
        java.lang.Class class96 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        java.lang.Class class97 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60505750800001L) + "'", long35 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-60506053200001L) + "'", long57 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(class76);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone91);
// flaky:         org.junit.Assert.assertEquals(timeZone91.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod92);
        org.junit.Assert.assertNotNull(regularTimePeriod94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(class96);
        org.junit.Assert.assertNotNull(class97);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.TimeZone timeZone14 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int15 = week11.compareTo((java.lang.Object) timeZone14);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date8, timeZone14);
        java.util.Date date17 = week16.getEnd();
        boolean boolean18 = week2.equals((java.lang.Object) week16);
        java.util.Date date19 = week2.getStart();
        long long20 = week2.getLastMillisecond();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.util.Date date46 = week44.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        java.lang.Class class57 = null;
        java.util.Date date58 = null;
        java.util.TimeZone timeZone59 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class57, date58, timeZone59);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass51, date56, timeZone59);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date46, timeZone59);
        java.lang.Class class63 = null;
        java.util.Date date64 = null;
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance(class63, date64, timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class41, date46, timeZone65);
        boolean boolean68 = week2.equals((java.lang.Object) class41);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-61126275600001L) + "'", long20 == (-61126275600001L));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod66);
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week19.next();
        java.util.Date date23 = week19.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date23);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 27 00:00:00 CET 52");
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(7, 10);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getMiddleMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str4 = week3.toString();
        long long5 = week3.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week3.next();
        java.util.Date date7 = regularTimePeriod6.getEnd();
        java.lang.Class class8 = null;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date12 = week11.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date16 = week15.getStart();
        java.util.Date date17 = week15.getEnd();
        int int18 = week15.getYearValue();
        long long19 = week15.getLastMillisecond();
        java.lang.Class<?> wildcardClass20 = week15.getClass();
        java.util.Date date21 = null;
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date25 = week24.getStart();
        int int26 = week24.getYearValue();
        java.util.Date date27 = week24.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        java.util.Date date45 = week37.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date45, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.previous();
        int int59 = week57.getYearValue();
        java.util.Date date60 = week57.getStart();
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date60, timeZone61);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date45, timeZone61);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date27, timeZone61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass20, date21, timeZone61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance(class8, date12, timeZone61);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date7, timeZone61);
        java.util.Locale locale68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date0, timeZone61, locale68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 35, 52" + "'", str4, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-59100800400001L) + "'", long19 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod65);
        org.junit.Assert.assertNull(regularTimePeriod66);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 0, (int) (byte) -1);
        int int3 = week2.getWeek();
        long long4 = week2.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62199190800001L) + "'", long4 == (-62199190800001L));
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getYearValue();
        long long7 = week2.getLastMillisecond();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(97, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getWeek();
        boolean boolean13 = week2.equals((java.lang.Object) int12);
        long long14 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        java.util.Date date5 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        long long14 = week8.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass15 = week8.getClass();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date19, timeZone25);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date19);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date19, timeZone34);
        boolean boolean37 = week2.equals((java.lang.Object) week36);
        java.util.Date date38 = week2.getEnd();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        int int42 = week41.getWeek();
        java.util.Date date43 = week41.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str47 = week46.toString();
        long long48 = week46.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week46.next();
        java.util.Date date50 = week46.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date55 = week54.getStart();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        int int60 = week58.getYearValue();
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int62 = week58.compareTo((java.lang.Object) timeZone61);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date55, timeZone61);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date50, timeZone61);
        int int65 = week41.compareTo((java.lang.Object) timeZone61);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date38, timeZone61);
        java.util.Date date67 = week66.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Nov 21 00:00:00 CET 101");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Week 35, 52" + "'", str47, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-60506053200001L) + "'", long48 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(5, 0);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.previous();
        java.util.Date date12 = week10.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date16 = week15.getStart();
        java.util.Date date17 = week15.getEnd();
        java.util.Date date18 = week15.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date22, timeZone28);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date18, timeZone28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date12, timeZone28);
        int int33 = week2.compareTo((java.lang.Object) date12);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date12);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date12);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        java.lang.String str8 = week2.toString();
        long long9 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-59100800400001L) + "'", long8 == (-59100800400001L));
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        java.util.Date date9 = regularTimePeriod8.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        java.util.Date date27 = week19.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date27, timeZone34);
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date9, timeZone34, locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 19 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        long long3 = week0.getLastMillisecond();
        long long4 = week0.getMiddleMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week0.getMiddleMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1638053999999L + "'", long3 == 1638053999999L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637751599999L + "'", long4 == 1637751599999L);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (short) 10, 6);
        java.util.Date date9 = week8.getStart();
        boolean boolean10 = week5.equals((java.lang.Object) date9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((-5), 35);
        boolean boolean14 = week5.equals((java.lang.Object) (-5));
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 28 00:00:00 CET 6");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date9, timeZone10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str15 = week14.toString();
        long long16 = week14.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week14.next();
        java.util.Date date18 = regularTimePeriod17.getEnd();
        java.lang.Class class19 = null;
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date23 = week22.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        java.util.Date date28 = week26.getEnd();
        int int29 = week26.getYearValue();
        long long30 = week26.getLastMillisecond();
        java.lang.Class<?> wildcardClass31 = week26.getClass();
        java.util.Date date32 = null;
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date36 = week35.getStart();
        int int37 = week35.getYearValue();
        java.util.Date date38 = week35.getEnd();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        java.lang.Class<?> wildcardClass43 = week41.getClass();
        java.lang.Class class44 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        int int53 = week48.getYearValue();
        int int55 = week48.compareTo((java.lang.Object) 9);
        java.util.Date date56 = week48.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date56);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.next();
        int int62 = week60.getYearValue();
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int64 = week60.compareTo((java.lang.Object) timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass43, date56, timeZone63);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.previous();
        int int70 = week68.getYearValue();
        java.util.Date date71 = week68.getStart();
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date71, timeZone72);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date56, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date38, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date32, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance(class19, date23, timeZone72);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date18, timeZone72);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date9, timeZone72);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date83 = week82.getStart();
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week86.next();
        int int88 = week86.getYearValue();
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int90 = week86.compareTo((java.lang.Object) timeZone89);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date83, timeZone89);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date9, timeZone89);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-59100800400001L) + "'", long30 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(class44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod76);
        org.junit.Assert.assertNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 0);
        long long3 = week2.getSerialIndex();
        long long4 = week2.getFirstMillisecond();
        java.util.Date date5 = week2.getStart();
        java.lang.Class<?> wildcardClass6 = week2.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62147178000000L) + "'", long4 == (-62147178000000L));
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 22 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        long long29 = week23.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass30 = week23.getClass();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass30, date34, timeZone40);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        int int50 = week45.getYearValue();
        int int52 = week45.compareTo((java.lang.Object) 9);
        java.util.Date date53 = week45.getStart();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        int int65 = week63.getYearValue();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int67 = week63.compareTo((java.lang.Object) timeZone66);
        int int68 = week63.getYearValue();
        int int70 = week63.compareTo((java.lang.Object) 9);
        java.util.Date date71 = week63.getStart();
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(date71);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        int int77 = week75.getYearValue();
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int79 = week75.compareTo((java.lang.Object) timeZone78);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date71, timeZone78);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = week83.previous();
        int int85 = week83.getYearValue();
        java.util.Date date86 = week83.getStart();
        java.util.TimeZone timeZone87 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date86, timeZone87);
        org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(date71, timeZone87);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date53, timeZone87);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date34, timeZone87);
        java.util.Locale locale92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date4, timeZone87, locale92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod80);
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone87);
// flaky:         org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year6);
        java.util.Date date11 = week10.getEnd();
        long long12 = week10.getFirstMillisecond();
        long long13 = week10.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 26 23:59:59 CET 2022");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1668898800000L + "'", long12 == 1668898800000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1668898800000L + "'", long13 == 1668898800000L);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.next();
        int int24 = week2.getWeek();
        java.lang.Class<?> wildcardClass25 = week2.getClass();
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(class26);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getYearValue();
        long long7 = week2.getLastMillisecond();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(97, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getWeek();
        boolean boolean13 = week2.equals((java.lang.Object) int12);
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week2.getLastMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        long long13 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(7, 1);
        java.util.Date date3 = week2.getStart();
        long long4 = week2.getSerialIndex();
        long long5 = week2.getMiddleMillisecond();
        java.lang.String str6 = week2.toString();
        long long7 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 06 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 60L + "'", long4 == 60L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-62132360400001L) + "'", long5 == (-62132360400001L));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 7, 1" + "'", str6, "Week 7, 1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62132662800000L) + "'", long7 == (-62132662800000L));
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        long long7 = week6.getSerialIndex();
        org.jfree.data.time.Year year8 = week6.getYear();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week6.getLastMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 107124L + "'", long7 == 107124L);
        org.junit.Assert.assertNotNull(year8);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(52, year3);
        java.util.Date date5 = year3.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        java.util.Date date23 = week15.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date23, timeZone30);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        int int40 = week35.getYearValue();
        int int42 = week35.compareTo((java.lang.Object) 9);
        int int43 = week35.getYearValue();
        long long44 = week35.getLastMillisecond();
        int int45 = week35.getWeek();
        java.util.Date date46 = week35.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date50 = week49.getStart();
        java.util.Date date51 = week49.getEnd();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        java.lang.Class<?> wildcardClass56 = week54.getClass();
        java.lang.Class class57 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass56);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date61 = week60.getStart();
        java.lang.Class class62 = null;
        java.util.Date date63 = null;
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance(class62, date63, timeZone64);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass56, date61, timeZone64);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date51, timeZone64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date46, timeZone64);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str72 = week71.toString();
        long long73 = week71.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week71.next();
        java.util.Date date75 = regularTimePeriod74.getEnd();
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date79 = week78.getStart();
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = week82.next();
        int int84 = week82.getYearValue();
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int86 = week82.compareTo((java.lang.Object) timeZone85);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date79, timeZone85);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date75, timeZone85);
        org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(date46, timeZone85);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date23, timeZone85);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date5, timeZone85);
        java.util.Calendar calendar92 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long93 = week91.getFirstMillisecond(calendar92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60505750800001L) + "'", long44 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(class57);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Week 35, 52" + "'", str72, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 2791L + "'", long73 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getYearValue();
        long long7 = week2.getSerialIndex();
        long long8 = week2.getFirstMillisecond();
        java.util.Date date9 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        long long6 = week4.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week4.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year9 = week4.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59101405200000L) + "'", long6 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 100, 79);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        java.lang.String str13 = week2.toString();
        long long14 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str18 = week17.toString();
        long long19 = week17.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week17.next();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = week2.compareTo((java.lang.Object) regularTimePeriod20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2791L + "'", long19 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week30.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week30.next();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        boolean boolean47 = week30.equals((java.lang.Object) wildcardClass44);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        java.lang.Class class64 = null;
        java.util.Date date65 = null;
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date65, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date63, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date53, timeZone66);
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date53, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date27, timeZone72);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = week81.next();
        long long83 = week81.getMiddleMillisecond();
        java.lang.String str84 = week81.toString();
        boolean boolean85 = week78.equals((java.lang.Object) week81);
        int int86 = week81.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week81.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = week81.previous();
        boolean boolean89 = week75.equals((java.lang.Object) week81);
        java.util.Calendar calendar90 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long91 = week81.getFirstMillisecond(calendar90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-60506053200001L) + "'", long83 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Week 35, 52" + "'", str84, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.util.Date date7 = regularTimePeriod6.getEnd();
        java.util.Date date8 = regularTimePeriod6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(date8);
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 27 00:00:00 CET 52");
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date9 = year5.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.previous();
        int int12 = week10.getYearValue();
        java.util.Date date13 = week10.getStart();
        int int14 = week10.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week10.previous();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 26 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date5, timeZone6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        java.util.Date date18 = week10.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.previous();
        int int50 = week48.getYearValue();
        java.util.Date date51 = week48.getStart();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date51, timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date36, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date5, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date5);
        java.util.Date date58 = week57.getEnd();
        java.lang.String str59 = week57.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Week 35, 52" + "'", str59, "Week 35, 52");
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        long long12 = week2.getSerialIndex();
        long long13 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506355600000L) + "'", long13 == (-60506355600000L));
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week();
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(52, year12);
        java.util.Date date14 = year12.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((-1969), year12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week2.compareTo((java.lang.Object) week15);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year18 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1637449200000L + "'", long11 == 1637449200000L);
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1969) + "'", int17 == (-1969));
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.TimeZone timeZone14 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int15 = week11.compareTo((java.lang.Object) timeZone14);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date8, timeZone14);
        java.util.Date date17 = week16.getEnd();
        boolean boolean18 = week2.equals((java.lang.Object) week16);
        java.util.Date date19 = week2.getStart();
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = week2.getMiddleMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 21 00:00:00 CET 32");
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date18, timeZone20);
        java.lang.Class<?> wildcardClass22 = date18.getClass();
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(class23);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        java.lang.Class class75 = org.jfree.data.time.RegularTimePeriod.downsize(class74);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(class75);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week8.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week8.next();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        java.lang.Class<?> wildcardClass22 = week20.getClass();
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        boolean boolean25 = week8.equals((java.lang.Object) wildcardClass22);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        boolean boolean27 = week2.equals((java.lang.Object) class26);
        long long28 = week2.getLastMillisecond();
        java.lang.String str29 = week2.toString();
        long long30 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-61126275600001L) + "'", long28 == (-61126275600001L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Week 52, 32" + "'", str29, "Week 52, 32");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-61126578000001L) + "'", long30 == (-61126578000001L));
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        java.util.Date date5 = week4.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date15 = week14.getEnd();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        java.util.Date date20 = week18.getEnd();
        int int21 = week18.getYearValue();
        long long22 = week18.getLastMillisecond();
        java.lang.Class<?> wildcardClass23 = week18.getClass();
        java.util.Date date24 = null;
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date28 = week27.getStart();
        int int29 = week27.getYearValue();
        java.util.Date date30 = week27.getEnd();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        java.lang.Class<?> wildcardClass35 = week33.getClass();
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass35);
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass35);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        int int45 = week40.getYearValue();
        int int47 = week40.compareTo((java.lang.Object) 9);
        java.util.Date date48 = week40.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date48);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.next();
        int int54 = week52.getYearValue();
        java.util.TimeZone timeZone55 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int56 = week52.compareTo((java.lang.Object) timeZone55);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass35, date48, timeZone55);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.previous();
        int int62 = week60.getYearValue();
        java.util.Date date63 = week60.getStart();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date63, timeZone64);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date48, timeZone64);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date30, timeZone64);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date24, timeZone64);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date15, timeZone64);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date10, timeZone64);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date5, timeZone64);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-59100800400001L) + "'", long22 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        long long6 = week2.getSerialIndex();
        java.util.Date date7 = week2.getEnd();
        long long8 = week2.getSerialIndex();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date12 = week11.getStart();
        long long13 = week11.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week11.next();
        int int15 = week11.getWeek();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(35, 0);
        long long19 = week18.getSerialIndex();
        boolean boolean20 = week11.equals((java.lang.Object) long19);
        long long21 = week11.getLastMillisecond();
        boolean boolean22 = week2.equals((java.lang.Object) week11);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2791L + "'", long6 == 2791L);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-61126275600001L) + "'", long13 == (-61126275600001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61126275600001L) + "'", long21 == (-61126275600001L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str39 = week38.toString();
        long long40 = week38.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week38.next();
        java.util.Date date42 = regularTimePeriod41.getEnd();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date46, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date42, timeZone52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date13, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week();
        long long61 = week60.getFirstMillisecond();
        org.jfree.data.time.Year year62 = week60.getYear();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(0, year62);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) (byte) 1, year62);
        boolean boolean65 = week56.equals((java.lang.Object) year62);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Week 35, 52" + "'", str39, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2791L + "'", long40 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1637449200000L + "'", long61 == 1637449200000L);
        org.junit.Assert.assertNotNull(year62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        int int15 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.previous();
        java.util.Date date17 = week2.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        java.util.Date date15 = week2.getEnd();
        long long16 = week2.getSerialIndex();
        int int17 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.lang.String str7 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        java.lang.String str9 = week2.toString();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.previous();
        int int14 = week12.getYearValue();
        java.util.Date date15 = week12.getEnd();
        long long16 = week12.getMiddleMillisecond();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        java.util.Date date27 = week19.getStart();
        boolean boolean28 = week12.equals((java.lang.Object) date27);
        java.util.Date date29 = week12.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            int int30 = week2.compareTo((java.lang.Object) week12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((-2019), year4);
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            week6.peg(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        java.lang.String str19 = week2.toString();
        int int20 = week2.getYearValue();
        long long21 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week20.next();
        long long24 = week20.getMiddleMillisecond();
        java.lang.String str25 = week20.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-59101102800001L) + "'", long24 == (-59101102800001L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Week 9, 97" + "'", str25, "Week 9, 97");
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.lang.Class<?> wildcardClass5 = year3.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getLastMillisecond();
        int int9 = week2.getWeek();
        long long10 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(52, (int) (short) 1);
        java.util.Date date3 = week2.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Dec 24 23:59:59 CET 1");
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        int int13 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 1, year5);
        java.lang.String str9 = week8.toString();
        long long10 = week8.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 1, 2021" + "'", str9, "Week 1, 2021");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1609325999999L + "'", long10 == 1609325999999L);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(11, (int) '4');
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-5), (-5));
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date4 = week3.getStart();
        int int5 = week3.getYearValue();
        java.util.Date date6 = week3.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.previous();
        int int11 = week9.getYearValue();
        java.util.Date date12 = week9.getStart();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date12, timeZone13);
        java.lang.Class<?> wildcardClass15 = timeZone13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str20 = week19.toString();
        long long21 = week19.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week19.next();
        java.util.Date date23 = regularTimePeriod22.getEnd();
        java.util.Date date24 = regularTimePeriod22.getStart();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str28 = week27.toString();
        long long29 = week27.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week27.next();
        java.util.Date date31 = week27.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date35);
        java.util.Date date37 = week36.getStart();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        int int45 = week40.getYearValue();
        long long46 = week40.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass47 = week40.getClass();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass47, date51, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date37, timeZone57);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date31, timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date24, timeZone57);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date6, timeZone57);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date0, timeZone57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Week 35, 52" + "'", str20, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2791L + "'", long21 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Week 35, 52" + "'", str28, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60506053200001L) + "'", long46 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNull(regularTimePeriod62);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        java.lang.Class<?> wildcardClass12 = week11.getClass();
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass12);
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(class14);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        long long8 = week2.getMiddleMillisecond();
        int int9 = week2.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.next();
        long long25 = week16.getSerialIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2791L + "'", long25 == 2791L);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        java.util.Date date23 = week15.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date23, timeZone30);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.previous();
        int int37 = week35.getYearValue();
        java.util.Date date38 = week35.getStart();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date38, timeZone39);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date23, timeZone39);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date5, timeZone39);
        java.util.Calendar calendar43 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long44 = week42.getLastMillisecond(calendar43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        int int12 = week9.getYearValue();
        java.util.Date date13 = week9.getStart();
        long long14 = week9.getLastMillisecond();
        boolean boolean15 = week2.equals((java.lang.Object) week9);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        java.util.Date date20 = week18.getEnd();
        int int21 = week18.getYearValue();
        java.util.Date date22 = week18.getStart();
        int int23 = week18.getWeek();
        java.lang.Class<?> wildcardClass24 = week18.getClass();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str28 = week27.toString();
        long long29 = week27.getMiddleMillisecond();
        long long30 = week27.getLastMillisecond();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        java.lang.Class<?> wildcardClass35 = week33.getClass();
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass35);
        int int37 = week27.compareTo((java.lang.Object) wildcardClass35);
        long long38 = week27.getSerialIndex();
        int int40 = week27.compareTo((java.lang.Object) 0.0d);
        java.util.Date date41 = week27.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        java.lang.Class class43 = null;
        java.util.Date date44 = null;
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance(class43, date44, timeZone45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass24, date41, timeZone45);
        int int48 = week2.compareTo((java.lang.Object) date41);
        long long49 = week2.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-59100800400001L) + "'", long14 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Week 35, 52" + "'", str28, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60505750800001L) + "'", long30 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2791L + "'", long38 == 2791L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60506355600000L) + "'", long49 == (-60506355600000L));
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        java.util.Date date14 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.lang.String str10 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getYearValue();
        int int8 = week2.getWeek();
        int int9 = week2.getWeek();
        int int10 = week2.getWeek();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getFirstMillisecond();
        java.util.Date date13 = week2.getEnd();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        int int15 = week7.getYearValue();
        long long16 = week7.getLastMillisecond();
        int int17 = week7.getWeek();
        java.util.Date date18 = week7.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.util.Date date23 = week21.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.lang.Class class34 = null;
        java.util.Date date35 = null;
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date35, timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date33, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date23, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date18, timeZone36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date4, timeZone36);
        java.util.Calendar calendar42 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long43 = week41.getLastMillisecond(calendar42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(10, 7);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getFirstMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(1, year5);
        long long10 = week9.getLastMillisecond();
        org.jfree.data.time.Year year11 = week9.getYear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1609628399999L + "'", long10 == 1609628399999L);
        org.junit.Assert.assertNotNull(year11);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(11, year7);
        long long10 = week9.getSerialIndex();
        org.jfree.data.time.Year year11 = week9.getYear();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) (short) 1, year11);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(4, year11);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(0, year11);
        long long15 = week14.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 107124L + "'", long10 == 107124L);
        org.junit.Assert.assertNotNull(year11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1609023599999L + "'", long15 == 1609023599999L);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        long long6 = week2.getSerialIndex();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        int int12 = week11.getWeek();
        java.lang.Class<?> wildcardClass13 = week11.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize(class14);
        boolean boolean16 = week2.equals((java.lang.Object) class15);
        long long17 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2791L + "'", long6 == 2791L);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60505750800001L) + "'", long17 == (-60505750800001L));
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        long long7 = year5.getMiddleMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(97, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(10, year5);
        long long10 = week9.getMiddleMillisecond();
        org.jfree.data.time.Year year11 = week9.getYear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1625223599999L + "'", long7 == 1625223599999L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1614769199999L + "'", long10 == 1614769199999L);
        org.junit.Assert.assertNotNull(year11);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int15 = week2.compareTo((java.lang.Object) 0);
        int int16 = week2.getWeek();
        long long17 = week2.getFirstMillisecond();
        java.lang.String str18 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506355600000L) + "'", long17 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) -1, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year6);
        java.util.Date date10 = year6.getEnd();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.Year year12 = week11.getYear();
        java.util.Date date13 = year12.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(52, year12);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Dec 31 23:59:59 CET 2022");
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        long long13 = week2.getSerialIndex();
        java.util.Date date14 = week2.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5150L + "'", long13 == 5150L);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 10, 4);
        long long3 = week2.getFirstMillisecond();
        long long4 = week2.getMiddleMillisecond();
        java.util.Date date5 = week2.getStart();
        java.lang.Class<?> wildcardClass6 = date5.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62035894800000L) + "'", long3 == (-62035894800000L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62035592400001L) + "'", long4 == (-62035592400001L));
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 02 00:00:00 CET 4");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        boolean boolean7 = week2.equals((java.lang.Object) 0L);
        long long8 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-59101102800001L) + "'", long8 == (-59101102800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        java.lang.Class class20 = null;
        java.util.Date date21 = null;
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = org.jfree.data.time.RegularTimePeriod.createInstance(class20, date21, timeZone22);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date19, timeZone22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date9, timeZone22);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date4, timeZone22);
        int int27 = week26.getYearValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        long long19 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week2.next();
        java.lang.Class<?> wildcardClass21 = regularTimePeriod20.getClass();
        java.util.Date date22 = null;
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str26 = week25.toString();
        long long27 = week25.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week25.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week25.previous();
        java.lang.Class<?> wildcardClass30 = week25.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.util.Date date32 = null;
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date36 = week35.getEnd();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date40 = week39.getStart();
        java.util.Date date41 = week39.getEnd();
        int int42 = week39.getYearValue();
        long long43 = week39.getLastMillisecond();
        java.lang.Class<?> wildcardClass44 = week39.getClass();
        java.util.Date date45 = null;
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date49 = week48.getStart();
        int int50 = week48.getYearValue();
        java.util.Date date51 = week48.getEnd();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        java.lang.Class<?> wildcardClass56 = week54.getClass();
        java.lang.Class class57 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass56);
        java.lang.Class class58 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass56);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        int int63 = week61.getYearValue();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int65 = week61.compareTo((java.lang.Object) timeZone64);
        int int66 = week61.getYearValue();
        int int68 = week61.compareTo((java.lang.Object) 9);
        java.util.Date date69 = week61.getStart();
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date69);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.next();
        int int75 = week73.getYearValue();
        java.util.TimeZone timeZone76 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int77 = week73.compareTo((java.lang.Object) timeZone76);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass56, date69, timeZone76);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = week81.previous();
        int int83 = week81.getYearValue();
        java.util.Date date84 = week81.getStart();
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date84, timeZone85);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date69, timeZone85);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date51, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date45, timeZone85);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date36, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod91 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass30, date32, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod92 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass21, date22, timeZone85);
        java.lang.Class class93 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60505750800001L) + "'", long19 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Week 35, 52" + "'", str26, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2791L + "'", long27 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-59100800400001L) + "'", long43 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(class57);
        org.junit.Assert.assertNotNull(class58);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod89);
        org.junit.Assert.assertNull(regularTimePeriod91);
        org.junit.Assert.assertNull(regularTimePeriod92);
        org.junit.Assert.assertNotNull(class93);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize(class6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week10.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week10.next();
        java.util.Date date20 = week10.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week10.previous();
        long long22 = week10.getMiddleMillisecond();
        java.util.Date date23 = week10.getEnd();
        java.lang.Class class24 = null;
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        int int32 = week27.getYearValue();
        int int34 = week27.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week27.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week27.next();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        java.lang.Class<?> wildcardClass41 = week39.getClass();
        java.lang.Class class42 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass41);
        java.lang.Class class43 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass41);
        boolean boolean44 = week27.equals((java.lang.Object) wildcardClass41);
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass41);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.util.Date date50 = week48.getEnd();
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        java.lang.Class<?> wildcardClass55 = week53.getClass();
        java.lang.Class class56 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass55);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date60 = week59.getStart();
        java.lang.Class class61 = null;
        java.util.Date date62 = null;
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance(class61, date62, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass55, date60, timeZone63);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date50, timeZone63);
        java.lang.Class class67 = null;
        java.util.Date date68 = null;
        java.util.TimeZone timeZone69 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance(class67, date68, timeZone69);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class45, date50, timeZone69);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = week74.next();
        java.lang.Class<?> wildcardClass76 = week74.getClass();
        java.lang.Class class77 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass76);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date81 = week80.getStart();
        java.lang.Class class82 = null;
        java.util.Date date83 = null;
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class82, date83, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass76, date81, timeZone84);
        org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date90 = week89.getStart();
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date90);
        java.util.TimeZone timeZone92 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass76, date90, timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date50, timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod95 = org.jfree.data.time.RegularTimePeriod.createInstance(class6, date23, timeZone92);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date23);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60506053200001L) + "'", long22 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertNotNull(class43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(class56);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod70);
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(class77);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod93);
        org.junit.Assert.assertNull(regularTimePeriod94);
        org.junit.Assert.assertNull(regularTimePeriod95);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week19.next();
        long long23 = week19.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60505750800000L) + "'", long23 == (-60505750800000L));
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date18, timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date18);
        long long23 = week22.getLastMillisecond();
        long long24 = week22.getFirstMillisecond();
        int int25 = week22.getYearValue();
        java.util.Calendar calendar26 = null;
        // The following exception was thrown during execution in test generation
        try {
            week22.peg(calendar26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-59100800400001L) + "'", long23 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-59101405200000L) + "'", long24 == (-59101405200000L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week();
        long long8 = week7.getFirstMillisecond();
        org.jfree.data.time.Year year9 = week7.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(0, year9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(11, year9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(3, year9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) (short) 100, year9);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) (short) -1, year9);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(2, year9);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((-1), year9);
        java.util.Date date17 = week16.getStart();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1637449200000L + "'", long8 == 1637449200000L);
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 13 00:00:00 CET 2020");
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year8 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date5, timeZone6);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week7.getMiddleMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        java.util.Date date10 = week7.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date14, timeZone20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date10, timeZone20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date4, timeZone20);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date4);
        java.lang.Class<?> wildcardClass26 = week25.getClass();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(0, 0);
        long long30 = week29.getLastMillisecond();
        long long31 = week29.getLastMillisecond();
        java.util.Date date32 = week29.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date36 = week35.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        int int38 = week37.getWeek();
        java.lang.Class<?> wildcardClass39 = week37.getClass();
        java.lang.Class class40 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass39);
        java.util.Date date41 = null;
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.previous();
        int int46 = week44.getYearValue();
        java.util.Date date47 = week44.getStart();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date47, timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance(class40, date41, timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date32, timeZone48);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date32);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-62167741200001L) + "'", long30 == (-62167741200001L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-62167741200001L) + "'", long31 == (-62167741200001L));
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 21 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(class40);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date30 = week29.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        int int43 = week41.getYearValue();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int45 = week41.compareTo((java.lang.Object) timeZone44);
        int int46 = week41.getYearValue();
        int int48 = week41.compareTo((java.lang.Object) 9);
        java.util.Date date49 = week41.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date49, timeZone56);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.previous();
        int int63 = week61.getYearValue();
        java.util.Date date64 = week61.getStart();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date64, timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date49, timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date30, timeZone65);
        java.util.Date date69 = regularTimePeriod68.getEnd();
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date69);
        int int71 = week70.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) -1, (int) (byte) 0);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getSerialIndex();
        java.util.Date date9 = week2.getEnd();
        int int11 = week2.compareTo((java.lang.Object) 0.0d);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 6);
        java.lang.String str3 = week2.toString();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 0, 6" + "'", str3, "Week 0, 6");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        long long9 = week2.getLastMillisecond();
        long long10 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60505750800001L) + "'", long9 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506355600000L) + "'", long10 == (-60506355600000L));
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        long long9 = week2.getSerialIndex();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2791L + "'", long9 == 2791L);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        java.util.Date date6 = week5.getStart();
        java.util.Date date7 = week5.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week5.next();
        org.jfree.data.time.Year year9 = week5.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (byte) 0, year9);
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = year9.getMiddleMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(year9);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        int int34 = week29.getYearValue();
        int int36 = week29.compareTo((java.lang.Object) 9);
        int int37 = week29.getYearValue();
        long long38 = week29.getLastMillisecond();
        int int39 = week29.getWeek();
        java.util.Date date40 = week29.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date44 = week43.getStart();
        java.util.Date date45 = week43.getEnd();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        java.lang.Class<?> wildcardClass50 = week48.getClass();
        java.lang.Class class51 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date55 = week54.getStart();
        java.lang.Class class56 = null;
        java.util.Date date57 = null;
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance(class56, date57, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass50, date55, timeZone58);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date45, timeZone58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date40, timeZone58);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str66 = week65.toString();
        long long67 = week65.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week65.next();
        java.util.Date date69 = regularTimePeriod68.getEnd();
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date73 = week72.getStart();
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week76.next();
        int int78 = week76.getYearValue();
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int80 = week76.compareTo((java.lang.Object) timeZone79);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date73, timeZone79);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date69, timeZone79);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date40, timeZone79);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date17, timeZone79);
        long long85 = week84.getSerialIndex();
        java.util.Calendar calendar86 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long87 = week84.getMiddleMillisecond(calendar86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-60505750800001L) + "'", long38 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(class51);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Week 35, 52" + "'", str66, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2791L + "'", long67 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 2791L + "'", long85 == 2791L);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        java.util.Date date7 = week6.getEnd();
        long long8 = week6.getMiddleMillisecond();
        long long9 = week6.getFirstMillisecond();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week();
        long long12 = week11.getFirstMillisecond();
        org.jfree.data.time.Year year13 = week11.getYear();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(52, year13);
        java.util.Date date15 = year13.getStart();
        boolean boolean16 = week6.equals((java.lang.Object) date15);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Mar 13 23:59:59 CET 2021");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1615373999999L + "'", long8 == 1615373999999L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1615071600000L + "'", long9 == 1615071600000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1637449200000L + "'", long12 == 1637449200000L);
        org.junit.Assert.assertNotNull(year13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        java.lang.Class<?> wildcardClass1 = week0.getClass();
        java.lang.Class class2 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass1);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        int int7 = week5.getYearValue();
        java.util.TimeZone timeZone8 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int9 = week5.compareTo((java.lang.Object) timeZone8);
        int int10 = week5.getYearValue();
        int int12 = week5.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week5.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week5.next();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        boolean boolean22 = week5.equals((java.lang.Object) wildcardClass19);
        long long23 = week5.getSerialIndex();
        java.util.Date date24 = week5.getEnd();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date24);
        java.lang.Class class26 = null;
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        int int34 = week29.getYearValue();
        int int36 = week29.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week29.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week29.next();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        java.lang.Class<?> wildcardClass43 = week41.getClass();
        java.lang.Class class44 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        boolean boolean46 = week29.equals((java.lang.Object) wildcardClass43);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        java.util.Date date52 = week50.getEnd();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        java.lang.Class<?> wildcardClass57 = week55.getClass();
        java.lang.Class class58 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date62 = week61.getStart();
        java.lang.Class class63 = null;
        java.util.Date date64 = null;
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance(class63, date64, timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass57, date62, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date52, timeZone65);
        java.lang.Class class69 = null;
        java.util.Date date70 = null;
        java.util.TimeZone timeZone71 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance(class69, date70, timeZone71);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class47, date52, timeZone71);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week76.next();
        java.lang.Class<?> wildcardClass78 = week76.getClass();
        java.lang.Class class79 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass78);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date83 = week82.getStart();
        java.lang.Class class84 = null;
        java.util.Date date85 = null;
        java.util.TimeZone timeZone86 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance(class84, date85, timeZone86);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass78, date83, timeZone86);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date92 = week91.getStart();
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date92);
        java.util.TimeZone timeZone94 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod95 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass78, date92, timeZone94);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod96 = org.jfree.data.time.RegularTimePeriod.createInstance(class26, date52, timeZone94);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod97 = org.jfree.data.time.RegularTimePeriod.createInstance(class2, date24, timeZone94);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2791L + "'", long23 == 2791L);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(class44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(class58);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod66);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod72);
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(class79);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone86);
// flaky:         org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone94);
// flaky:         org.junit.Assert.assertEquals(timeZone94.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod95);
        org.junit.Assert.assertNull(regularTimePeriod96);
        org.junit.Assert.assertNull(regularTimePeriod97);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        java.util.Date date16 = week15.getStart();
        long long17 = week15.getLastMillisecond();
        long long18 = week15.getMiddleMillisecond();
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = week15.getMiddleMillisecond(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-59100800400001L) + "'", long17 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-59101102800001L) + "'", long18 == (-59101102800001L));
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 2, 0");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date9, timeZone10);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week11.getMiddleMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week2.previous();
        long long15 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date3);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        java.util.Date date6 = week4.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.previous();
        int int8 = week4.getYearValue();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2021 + "'", int8 == 2021);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getFirstMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getYearValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        long long4 = week2.getFirstMillisecond();
        long long5 = week2.getSerialIndex();
        int int6 = week2.getWeek();
        long long7 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61768573200000L) + "'", long4 == (-61768573200000L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 671L + "'", long5 == 671L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 671L + "'", long7 == 671L);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date18, timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date18);
        java.util.Date date23 = week22.getEnd();
        long long24 = week22.getSerialIndex();
        long long25 = week22.getSerialIndex();
        java.util.Calendar calendar26 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = week22.getFirstMillisecond(calendar26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5150L + "'", long24 == 5150L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 5150L + "'", long25 == 5150L);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        long long9 = week8.getSerialIndex();
        org.jfree.data.time.Year year10 = week8.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 1, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(4, year10);
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Year year14 = week12.getYear();
        long long15 = week12.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107124L + "'", long9 == 107124L);
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 17 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(year14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1611140399999L + "'", long15 == 1611140399999L);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        java.util.Date date7 = week2.getEnd();
        java.lang.Class class8 = null;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week11.next();
        int int16 = week11.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str20 = week19.toString();
        long long21 = week19.getMiddleMillisecond();
        long long22 = week19.getLastMillisecond();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        java.lang.Class<?> wildcardClass27 = week25.getClass();
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass27);
        int int29 = week19.compareTo((java.lang.Object) wildcardClass27);
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass27);
        int int31 = week11.compareTo((java.lang.Object) class30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week11.next();
        java.util.Date date33 = week11.getStart();
        long long34 = week11.getFirstMillisecond();
        java.util.Date date35 = week11.getEnd();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str39 = week38.toString();
        long long40 = week38.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week38.next();
        java.util.Date date42 = week38.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date47, timeZone53);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date42, timeZone53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance(class8, date35, timeZone53);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date7, timeZone53);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Week 35, 52" + "'", str20, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506053200001L) + "'", long21 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60506355600000L) + "'", long34 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Week 35, 52" + "'", str39, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-60506053200001L) + "'", long40 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNull(regularTimePeriod57);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(52, year8);
        java.util.Date date10 = year8.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(52, year8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(97, year8);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) (byte) 0, year8);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) (byte) 1, year8);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(97, year8);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 0);
        long long3 = week2.getLastMillisecond();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str7 = week6.toString();
        long long8 = week6.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week6.next();
        long long10 = week6.getMiddleMillisecond();
        boolean boolean11 = week2.equals((java.lang.Object) long10);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62167741200001L) + "'", long3 == (-62167741200001L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506053200001L) + "'", long10 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        long long5 = week2.getSerialIndex();
        int int6 = week2.getWeek();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        java.util.Date date8 = year6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(97, year6);
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week();
        long long18 = week17.getFirstMillisecond();
        org.jfree.data.time.Year year19 = week17.getYear();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(0, year19);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(11, year19);
        long long22 = week21.getSerialIndex();
        org.jfree.data.time.Year year23 = week21.getYear();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) (short) 1, year23);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(4, year23);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(32, year23);
        boolean boolean27 = week10.equals((java.lang.Object) year23);
        java.util.Date date28 = year23.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(52, year23);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1667080800000L + "'", long11 == 1667080800000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1637449200000L + "'", long18 == 1637449200000L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 107124L + "'", long22 == 107124L);
        org.junit.Assert.assertNotNull(year23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Dec 31 23:59:59 CET 2021");
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(12, 3);
        long long3 = week2.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62065832400001L) + "'", long3 == (-62065832400001L));
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        java.lang.String str7 = week2.toString();
        int int8 = week2.getYearValue();
        java.lang.String str9 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        long long20 = week2.getMiddleMillisecond();
        int int21 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = week19.getFirstMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        java.util.Date date6 = week4.getEnd();
        int int7 = week4.getWeek();
        long long8 = week4.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Dec 26 23:59:59 CET 2020");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 107113L + "'", long8 == 107113L);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getSerialIndex();
        java.util.Date date9 = week2.getEnd();
        java.util.Date date10 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 10, 6);
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = week2.compareTo((java.lang.Object) week7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 28 00:00:00 CET 6");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Feb 28 00:00:00 CET 6");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2791L + "'", long9 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(53, (int) (short) -1);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getMiddleMillisecond();
        long long14 = week2.getLastMillisecond();
        long long15 = week2.getLastMillisecond();
        long long16 = week2.getFirstMillisecond();
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = week2.getFirstMillisecond(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60505750800001L) + "'", long15 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506355600000L) + "'", long16 == (-60506355600000L));
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        int int14 = week2.getWeek();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(35, 100);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.previous();
        int int24 = week22.getYearValue();
        java.util.Date date25 = week22.getEnd();
        long long26 = week22.getMiddleMillisecond();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        int int34 = week29.getYearValue();
        int int36 = week29.compareTo((java.lang.Object) 9);
        java.util.Date date37 = week29.getStart();
        boolean boolean38 = week22.equals((java.lang.Object) date37);
        java.util.Date date39 = week22.getEnd();
        boolean boolean40 = week19.equals((java.lang.Object) week22);
        java.util.Date date41 = week19.getEnd();
        int int42 = week2.compareTo((java.lang.Object) date41);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506053200001L) + "'", long26 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Aug 29 23:59:59 CET 100");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        java.util.Date date32 = week31.getStart();
        java.lang.String str33 = week31.toString();
        java.lang.Object obj34 = null;
        int int35 = week31.compareTo(obj34);
        long long36 = week31.getSerialIndex();
        java.util.Date date37 = week31.getEnd();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Week 9, 97" + "'", str33, "Week 9, 97");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 5150L + "'", long36 == 5150L);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        long long22 = week16.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass23 = week16.getClass();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date27, timeZone33);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date39 = week38.getStart();
        java.util.Date date40 = week38.getEnd();
        java.util.Date date41 = week38.getStart();
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.util.Date date46 = week44.getEnd();
        java.util.Date date47 = week44.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date51, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date47, timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date41, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date13, timeZone57);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.previous();
        int int67 = week65.getWeek();
        int int68 = week65.getYearValue();
        java.util.Date date69 = week65.getStart();
        java.util.Date date70 = week65.getStart();
        boolean boolean71 = week62.equals((java.lang.Object) week65);
        long long72 = week62.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60506053200001L) + "'", long22 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 32 + "'", int68 == 32);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-60505750800001L) + "'", long72 == (-60505750800001L));
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        int int13 = week2.getWeek();
        int int14 = week2.getWeek();
        java.lang.String str15 = week2.toString();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week();
        java.lang.Class<?> wildcardClass17 = week16.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        int int19 = week2.compareTo((java.lang.Object) class18);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(52, year3);
        java.util.Date date5 = year3.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        long long7 = week6.getLastMillisecond();
        java.lang.String str8 = week6.toString();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week6.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1609628399999L + "'", long7 == 1609628399999L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 1, 2021" + "'", str8, "Week 1, 2021");
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        long long24 = week16.getLastMillisecond();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week();
        long long28 = week27.getFirstMillisecond();
        org.jfree.data.time.Year year29 = week27.getYear();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) (byte) 100, year29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(100, year29);
        int int32 = week16.compareTo((java.lang.Object) week31);
        long long33 = week16.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1637449200000L + "'", long28 == 1637449200000L);
        org.junit.Assert.assertNotNull(year29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1969) + "'", int32 == (-1969));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-60505750800001L) + "'", long33 == (-60505750800001L));
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week4.previous();
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = week4.getFirstMillisecond(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 100);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.previous();
        int int7 = week5.getYearValue();
        java.util.Date date8 = week5.getEnd();
        long long9 = week5.getMiddleMillisecond();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        int int14 = week12.getYearValue();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int16 = week12.compareTo((java.lang.Object) timeZone15);
        int int17 = week12.getYearValue();
        int int19 = week12.compareTo((java.lang.Object) 9);
        java.util.Date date20 = week12.getStart();
        boolean boolean21 = week5.equals((java.lang.Object) date20);
        java.util.Date date22 = week5.getEnd();
        boolean boolean23 = week2.equals((java.lang.Object) week5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week2.next();
        long long25 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-58991029200001L) + "'", long25 == (-58991029200001L));
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getMiddleMillisecond();
        java.lang.String str13 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        long long3 = week2.getMiddleMillisecond();
        long long4 = week2.getFirstMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-60506053200001L) + "'", long3 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506355600000L) + "'", long4 == (-60506355600000L));
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (-1));
        java.lang.Class<?> wildcardClass3 = week2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 2021);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getMiddleMillisecond();
        java.lang.String str14 = week2.toString();
        int int15 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.next();
        java.util.Date date17 = regularTimePeriod16.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = week18.getFirstMillisecond(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 27 00:00:00 CET 52");
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week8.previous();
        int int17 = week8.getYearValue();
        long long18 = week8.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        boolean boolean25 = week8.equals((java.lang.Object) wildcardClass23);
        int int26 = week8.getYearValue();
        boolean boolean27 = week2.equals((java.lang.Object) week8);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week8.next();
        long long29 = week8.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 52, 32" + "'", str5, "Week 52, 32");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date17);
        java.util.Calendar calendar29 = null;
        // The following exception was thrown during execution in test generation
        try {
            week28.peg(calendar29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        long long14 = week2.getLastMillisecond();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week2.getFirstMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        int int13 = week2.getYearValue();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        long long9 = week8.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1608418800000L + "'", long9 == 1608418800000L);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        long long7 = week2.getLastMillisecond();
        long long8 = week2.getFirstMillisecond();
        int int9 = week2.getWeek();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week2.getFirstMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        long long9 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2791L + "'", long9 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) -1, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year6);
        java.util.Date date10 = year6.getEnd();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(5, year6);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Dec 31 23:59:59 CET 2021");
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getMiddleMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        int int11 = week2.getYearValue();
        int int12 = week2.getYearValue();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week15.next();
        java.util.Date date19 = week15.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date19);
        long long21 = week20.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week20.next();
        boolean boolean23 = week2.equals((java.lang.Object) regularTimePeriod22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week();
        long long26 = week25.getFirstMillisecond();
        org.jfree.data.time.Year year27 = week25.getYear();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(0, year27);
        java.util.Date date29 = year27.getStart();
        int int30 = week2.compareTo((java.lang.Object) year27);
        java.lang.Class<?> wildcardClass31 = week2.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1637449200000L + "'", long26 == 1637449200000L);
        org.junit.Assert.assertNotNull(year27);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 0, (int) (byte) -1);
        long long3 = week2.getSerialIndex();
        java.util.Date date4 = week2.getEnd();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-53L) + "'", long3 == (-53L));
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Dec 28 23:59:59 CET 3");
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        int int8 = week2.getWeek();
        java.util.Date date9 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int6 = week2.getYearValue();
        java.util.Date date7 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        java.util.Date date5 = week4.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        long long7 = week6.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-59101405200000L) + "'", long7 == (-59101405200000L));
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.util.Date date9 = regularTimePeriod8.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 27 00:00:00 CET 52");
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, 2);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getMiddleMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        java.lang.Class<?> wildcardClass6 = week2.getClass();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        int int12 = week9.getYearValue();
        java.util.Date date13 = week9.getEnd();
        java.util.Date date14 = week9.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date18, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date18);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        int int38 = week30.getYearValue();
        long long39 = week30.getLastMillisecond();
        int int40 = week30.getWeek();
        java.util.Date date41 = week30.getEnd();
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.util.Date date46 = week44.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        java.lang.Class class57 = null;
        java.util.Date date58 = null;
        java.util.TimeZone timeZone59 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class57, date58, timeZone59);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass51, date56, timeZone59);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date46, timeZone59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date41, timeZone59);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str67 = week66.toString();
        long long68 = week66.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week66.next();
        java.util.Date date70 = regularTimePeriod69.getEnd();
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date74 = week73.getStart();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        int int79 = week77.getYearValue();
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int81 = week77.compareTo((java.lang.Object) timeZone80);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date74, timeZone80);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date70, timeZone80);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date41, timeZone80);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date18, timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass6, date14, timeZone80);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60505750800001L) + "'", long39 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Week 35, 52" + "'", str67, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 2791L + "'", long68 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getFirstMillisecond();
        int int16 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.previous();
        java.util.Date date18 = regularTimePeriod17.getEnd();
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = regularTimePeriod17.getMiddleMillisecond(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 19 23:59:59 CET 52");
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize(class6);
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize(class7);
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize(class7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.previous();
        int int14 = week12.getYearValue();
        long long15 = week12.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week12.next();
        java.util.Date date17 = regularTimePeriod16.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        java.util.Date date22 = week20.getEnd();
        int int23 = week20.getYearValue();
        long long24 = week20.getLastMillisecond();
        java.lang.Class<?> wildcardClass25 = week20.getClass();
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        long long35 = week33.getMiddleMillisecond();
        java.lang.String str36 = week33.toString();
        boolean boolean37 = week30.equals((java.lang.Object) week33);
        java.util.Date date38 = week30.getStart();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        java.lang.Class<?> wildcardClass43 = week41.getClass();
        java.lang.Class class44 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        int int53 = week48.getYearValue();
        int int55 = week48.compareTo((java.lang.Object) 9);
        java.util.Date date56 = week48.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date56);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.next();
        int int62 = week60.getYearValue();
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int64 = week60.compareTo((java.lang.Object) timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass43, date56, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass25, date38, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class9, date17, timeZone63);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-59100800400001L) + "'", long24 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60506053200001L) + "'", long35 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Week 35, 52" + "'", str36, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(class44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertNull(regularTimePeriod67);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, 100);
        int int3 = week2.getYearValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        long long4 = week2.getSerialIndex();
        long long5 = week2.getSerialIndex();
        int int6 = week2.getYearValue();
        int int7 = week2.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 44L + "'", long5 == 44L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getSerialIndex();
        int int2 = week0.getWeek();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 107161L + "'", long1 == 107161L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        long long5 = week2.getSerialIndex();
        long long6 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        int int13 = week2.getWeek();
        int int14 = week2.getWeek();
        java.lang.String str15 = week2.toString();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        java.util.Date date32 = week31.getStart();
        java.lang.String str33 = week31.toString();
        java.lang.Object obj34 = null;
        int int35 = week31.compareTo(obj34);
        long long36 = week31.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Week 9, 97" + "'", str33, "Week 9, 97");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-59100800400001L) + "'", long36 == (-59100800400001L));
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date16);
        int int19 = week18.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(5, 8);
        long long3 = week2.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-61912515600000L) + "'", long3 == (-61912515600000L));
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        long long23 = week20.getSerialIndex();
        java.util.Date date24 = week20.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date24);
        int int26 = week25.getYearValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5150L + "'", long23 == 5150L);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        java.lang.String str21 = week19.toString();
        long long22 = week19.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week19.next();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Week 36, 52" + "'", str21, "Week 36, 52");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505448400001L) + "'", long22 == (-60505448400001L));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        java.util.Date date32 = week31.getStart();
        java.lang.String str33 = week31.toString();
        java.lang.Object obj34 = null;
        int int35 = week31.compareTo(obj34);
        java.lang.String str36 = week31.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Week 9, 97" + "'", str33, "Week 9, 97");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Week 9, 97" + "'", str36, "Week 9, 97");
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str39 = week38.toString();
        long long40 = week38.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week38.next();
        java.util.Date date42 = regularTimePeriod41.getEnd();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date46, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date42, timeZone52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date13, timeZone52);
        java.lang.Class<?> wildcardClass57 = week56.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Week 35, 52" + "'", str39, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2791L + "'", long40 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        long long18 = week15.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        int int25 = week15.compareTo((java.lang.Object) wildcardClass23);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        boolean boolean27 = week12.equals((java.lang.Object) wildcardClass23);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.previous();
        int int32 = week30.getYearValue();
        java.util.Date date33 = week30.getStart();
        int int34 = week30.getYearValue();
        long long35 = week30.getSerialIndex();
        boolean boolean36 = week12.equals((java.lang.Object) week30);
        boolean boolean37 = week2.equals((java.lang.Object) boolean36);
        java.util.Date date38 = week2.getStart();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        java.util.Date date41 = week39.getEnd();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2791L + "'", long35 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        int int7 = week5.getYearValue();
        java.util.TimeZone timeZone8 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int9 = week5.compareTo((java.lang.Object) timeZone8);
        int int10 = week5.getYearValue();
        int int12 = week5.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week5.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week5.next();
        java.util.Date date15 = week5.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week5.previous();
        long long17 = week5.getMiddleMillisecond();
        long long18 = week5.getSerialIndex();
        int int19 = week2.compareTo((java.lang.Object) long18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2791L + "'", long18 == 2791L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getSerialIndex();
        java.lang.Class<?> wildcardClass2 = week0.getClass();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        int int7 = week5.getYearValue();
        java.util.TimeZone timeZone8 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int9 = week5.compareTo((java.lang.Object) timeZone8);
        int int10 = week5.getYearValue();
        int int12 = week5.compareTo((java.lang.Object) 9);
        int int13 = week5.getYearValue();
        java.lang.String str14 = week5.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week5.previous();
        java.util.Date date16 = regularTimePeriod15.getEnd();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.previous();
        java.util.Date date21 = week19.getEnd();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date25 = week24.getStart();
        java.util.Date date26 = week24.getEnd();
        java.util.Date date27 = week24.getStart();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date31, timeZone37);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date27, timeZone37);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date21, timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass2, date16, timeZone37);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 107161L + "'", long1 == 107161L);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 19 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        java.util.Date date20 = week2.getStart();
        java.util.Date date21 = week2.getEnd();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date21);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year23 = week22.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        long long44 = week2.getMiddleMillisecond();
        int int45 = week2.getYearValue();
        java.util.Calendar calendar46 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long47 = week2.getMiddleMillisecond(calendar46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60506053200001L) + "'", long44 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        int int6 = week5.getYearValue();
        int int7 = week5.getYearValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date7 = week6.getStart();
        java.util.Date date8 = week6.getEnd();
        int int9 = week6.getYearValue();
        long long10 = week6.getLastMillisecond();
        java.lang.Class<?> wildcardClass11 = week6.getClass();
        java.util.Date date12 = null;
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date16 = week15.getStart();
        int int17 = week15.getYearValue();
        java.util.Date date18 = week15.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.previous();
        int int50 = week48.getYearValue();
        java.util.Date date51 = week48.getStart();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date51, timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date36, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass11, date12, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date3, timeZone52);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-59100800400001L) + "'", long10 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date8 = week7.getEnd();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date12 = week11.getStart();
        java.util.Date date13 = week11.getEnd();
        int int14 = week11.getYearValue();
        long long15 = week11.getLastMillisecond();
        java.lang.Class<?> wildcardClass16 = week11.getClass();
        java.util.Date date17 = null;
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date21 = week20.getStart();
        int int22 = week20.getYearValue();
        java.util.Date date23 = week20.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        int int38 = week33.getYearValue();
        int int40 = week33.compareTo((java.lang.Object) 9);
        java.util.Date date41 = week33.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date41, timeZone48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.previous();
        int int55 = week53.getYearValue();
        java.util.Date date56 = week53.getStart();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date56, timeZone57);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date41, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date23, timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date17, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date8, timeZone57);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date3, timeZone57);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year64 = week63.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-59100800400001L) + "'", long15 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod61);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        long long16 = week15.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week15.next();
        java.util.Date date18 = week15.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        int int28 = week21.compareTo((java.lang.Object) 9);
        int int29 = week21.getYearValue();
        long long30 = week21.getLastMillisecond();
        int int31 = week21.getWeek();
        java.util.Date date32 = week21.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date36 = week35.getStart();
        java.util.Date date37 = week35.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        java.lang.Class<?> wildcardClass42 = week40.getClass();
        java.lang.Class class43 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        java.lang.Class class48 = null;
        java.util.Date date49 = null;
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date49, timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date47, timeZone50);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date37, timeZone50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date32, timeZone50);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone50);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(35, 9);
        int int59 = week55.compareTo((java.lang.Object) 9);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5150L + "'", long16 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60505750800001L) + "'", long30 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(class43);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(32, (-1));
        int int9 = week5.compareTo((java.lang.Object) 32);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getFirstMillisecond();
        int int6 = week2.compareTo((java.lang.Object) false);
        int int7 = week2.getYearValue();
        java.util.Date date8 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506355600000L) + "'", long4 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        int int13 = week2.getYearValue();
        long long14 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getWeek();
        int int17 = week2.getWeek();
        long long18 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.util.Date date9 = week2.getEnd();
        java.util.Date date10 = week2.getStart();
        long long11 = week2.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int6 = week2.getYearValue();
        java.lang.Class<?> wildcardClass7 = week2.getClass();
        java.util.Date date8 = null;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week11.next();
        java.util.Date date15 = regularTimePeriod14.getEnd();
        java.lang.Class class16 = null;
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date20 = week19.getEnd();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        java.util.Date date25 = week23.getEnd();
        int int26 = week23.getYearValue();
        long long27 = week23.getLastMillisecond();
        java.lang.Class<?> wildcardClass28 = week23.getClass();
        java.util.Date date29 = null;
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date33 = week32.getStart();
        int int34 = week32.getYearValue();
        java.util.Date date35 = week32.getEnd();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        java.lang.Class<?> wildcardClass40 = week38.getClass();
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        java.lang.Class class42 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        int int50 = week45.getYearValue();
        int int52 = week45.compareTo((java.lang.Object) 9);
        java.util.Date date53 = week45.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date53);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        int int59 = week57.getYearValue();
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int61 = week57.compareTo((java.lang.Object) timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date53, timeZone60);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.previous();
        int int67 = week65.getYearValue();
        java.util.Date date68 = week65.getStart();
        java.util.TimeZone timeZone69 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date68, timeZone69);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date53, timeZone69);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(date35, timeZone69);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date29, timeZone69);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date20, timeZone69);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date15, timeZone69);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass7, date8, timeZone69);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-59100800400001L) + "'", long27 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNull(regularTimePeriod76);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getFirstMillisecond();
        java.lang.String str8 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.util.Date date10 = regularTimePeriod9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str14 = week13.toString();
        long long15 = week13.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week13.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week13.previous();
        java.lang.Class<?> wildcardClass18 = week13.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.util.Date date20 = null;
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date24 = week23.getEnd();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.util.Date date29 = week27.getEnd();
        int int30 = week27.getYearValue();
        long long31 = week27.getLastMillisecond();
        java.lang.Class<?> wildcardClass32 = week27.getClass();
        java.util.Date date33 = null;
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date37 = week36.getStart();
        int int38 = week36.getYearValue();
        java.util.Date date39 = week36.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        int int54 = week49.getYearValue();
        int int56 = week49.compareTo((java.lang.Object) 9);
        java.util.Date date57 = week49.getStart();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date57);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        int int63 = week61.getYearValue();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int65 = week61.compareTo((java.lang.Object) timeZone64);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date57, timeZone64);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.previous();
        int int71 = week69.getYearValue();
        java.util.Date date72 = week69.getStart();
        java.util.TimeZone timeZone73 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date72, timeZone73);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date57, timeZone73);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date39, timeZone73);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date33, timeZone73);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date24, timeZone73);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date20, timeZone73);
        java.util.Locale locale80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date10, timeZone73, locale80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 13 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-59100800400001L) + "'", long31 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod77);
        org.junit.Assert.assertNull(regularTimePeriod79);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        java.util.Date date8 = week2.getEnd();
        java.lang.Object obj9 = null;
        boolean boolean10 = week2.equals(obj9);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.lang.Class class16 = null;
        java.util.Date date17 = null;
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date17, timeZone18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date15, timeZone18);
        java.lang.Class<?> wildcardClass21 = timeZone18.getClass();
        boolean boolean22 = week2.equals((java.lang.Object) wildcardClass21);
        java.util.Date date23 = week2.getStart();
        java.lang.String str24 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Week 35, 52" + "'", str24, "Week 35, 52");
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(11, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(3, year8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) (short) 100, year8);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) (short) -1, year8);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(79, year8);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        java.lang.String str15 = week7.toString();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week7.getLastMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        long long7 = year5.getMiddleMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(97, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(10, year5);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week9.getFirstMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1625223599999L + "'", long7 == 1625223599999L);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int5 = week2.getYearValue();
        java.lang.Class<?> wildcardClass6 = week2.getClass();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week();
        long long12 = week11.getFirstMillisecond();
        org.jfree.data.time.Year year13 = week11.getYear();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(0, year13);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(11, year13);
        long long16 = week15.getSerialIndex();
        org.jfree.data.time.Year year17 = week15.getYear();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) (short) 1, year17);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(4, year17);
        java.util.Date date20 = week19.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        int int26 = week24.getYearValue();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int28 = week24.compareTo((java.lang.Object) timeZone27);
        int int29 = week24.getYearValue();
        long long30 = week24.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass31 = week24.getClass();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date35, timeZone41);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date35);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.next();
        int int49 = week47.getYearValue();
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int51 = week47.compareTo((java.lang.Object) timeZone50);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date35, timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass6, date20, timeZone50);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1637449200000L + "'", long12 == 1637449200000L);
        org.junit.Assert.assertNotNull(year13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 107124L + "'", long16 == 107124L);
        org.junit.Assert.assertNotNull(year17);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Jan 17 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60506053200001L) + "'", long30 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        int int8 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        long long15 = week14.getSerialIndex();
        long long16 = week14.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506355600000L) + "'", long16 == (-60506355600000L));
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week8.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week8.next();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        java.lang.Class<?> wildcardClass22 = week20.getClass();
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        boolean boolean25 = week8.equals((java.lang.Object) wildcardClass22);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        boolean boolean27 = week2.equals((java.lang.Object) class26);
        long long28 = week2.getLastMillisecond();
        java.lang.String str29 = week2.toString();
        long long30 = week2.getFirstMillisecond();
        long long31 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-61126275600001L) + "'", long28 == (-61126275600001L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Week 52, 32" + "'", str29, "Week 52, 32");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-61126880400000L) + "'", long30 == (-61126880400000L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-61126880400000L) + "'", long31 == (-61126880400000L));
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.next();
        long long24 = week2.getMiddleMillisecond();
        long long25 = week2.getLastMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year26 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60506053200001L) + "'", long24 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60505750800001L) + "'", long25 == (-60505750800001L));
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.lang.String str13 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week2.previous();
        long long15 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506053200001L) + "'", long15 == (-60506053200001L));
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(32, (int) (short) 100);
        java.lang.Class<?> wildcardClass3 = week2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        long long9 = week2.getLastMillisecond();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week2.getMiddleMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60505750800001L) + "'", long9 == (-60505750800001L));
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(53, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '4', year8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(52, year8);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(2021, year8);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(32, year8);
        org.jfree.data.time.Year year15 = week14.getYear();
        int int16 = week14.getYearValue();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2021 + "'", int16 == 2021);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        long long6 = week2.getSerialIndex();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str10 = week9.toString();
        long long11 = week9.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        java.util.Date date13 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str19 = week18.toString();
        long long20 = week18.getSerialIndex();
        boolean boolean21 = week14.equals((java.lang.Object) long20);
        boolean boolean22 = week2.equals((java.lang.Object) week14);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2791L + "'", long6 == 2791L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2791L + "'", long20 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }
}
